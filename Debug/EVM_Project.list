
EVM_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08003fe4  08003fe4  00004fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  00006324  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b0  080041b0  00006324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000051b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041b4  080041b4  000051b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000324  20000000  080041b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006324  2**0
                  CONTENTS
 10 .bss          0000105c  20000324  20000324  00006324  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001380  20001380  00006324  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00006324  2**0
                  CONTENTS, READONLY
 13 .debug_info   000040d6  00000000  00000000  0000634e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014a9  00000000  00000000  0000a424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a0  00000000  00000000  0000b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000033f  00000000  00000000  0000bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043d7  00000000  00000000  0000c0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006b91  00000000  00000000  00010486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d13f  00000000  00000000  00017017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00024156  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000183c  00000000  00000000  0002419c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000259d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000324 	.word	0x20000324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fcc 	.word	0x08003fcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000328 	.word	0x20000328
 80001cc:	08003fcc 	.word	0x08003fcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EventMngt_Init>:

Event_Key_t Event_Key;
static void EventMngt_ButtonEvent(void);
void EventMngt_ButtonDebounceIRQ_CONFIG_BUTTON(void);
void EventMngt_Init()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	Event_Key.Status = 	Event_Key_Idle;
 8000286:	4b28      	ldr	r3, [pc, #160]	@ (8000328 <EventMngt_Init+0xa8>)
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NUM_CANDIDATES; i++)
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	e016      	b.n	80002c0 <EventMngt_Init+0x40>
    {
        CandidateVoting_Status[i].PinStatus = 0;
 8000292:	4926      	ldr	r1, [pc, #152]	@ (800032c <EventMngt_Init+0xac>)
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	4613      	mov	r3, r2
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	1a9b      	subs	r3, r3, r2
 800029c:	011b      	lsls	r3, r3, #4
 800029e:	440b      	add	r3, r1
 80002a0:	3369      	adds	r3, #105	@ 0x69
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
        CandidateVoting_Status[i].votes = 0;
 80002a6:	4921      	ldr	r1, [pc, #132]	@ (800032c <EventMngt_Init+0xac>)
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	4613      	mov	r3, r2
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	1a9b      	subs	r3, r3, r2
 80002b0:	011b      	lsls	r3, r3, #4
 80002b2:	440b      	add	r3, r1
 80002b4:	336c      	adds	r3, #108	@ 0x6c
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUM_CANDIDATES; i++)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3301      	adds	r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d9e5      	bls.n	8000292 <EventMngt_Init+0x12>

    }
    for(int i = 0; i < NUM_EVENT_PINS; i++)
 80002c6:	2300      	movs	r3, #0
 80002c8:	603b      	str	r3, [r7, #0]
 80002ca:	e01c      	b.n	8000306 <EventMngt_Init+0x86>
    {
    	GPIO_PeriClockControl(Event_GPIO_Handle[i].GPIO_Handle_Ev.pGPIOx, ENABLE);
 80002cc:	4a18      	ldr	r2, [pc, #96]	@ (8000330 <EventMngt_Init+0xb0>)
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	4413      	add	r3, r2
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2101      	movs	r1, #1
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fbbf 	bl	8001a5c <GPIO_PeriClockControl>
        GPIO_Init(&Event_GPIO_Handle[i].GPIO_Handle_Ev);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	4a13      	ldr	r2, [pc, #76]	@ (8000330 <EventMngt_Init+0xb0>)
 80002e4:	4413      	add	r3, r2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fc3c 	bl	8001b64 <GPIO_Init>
    	GPIO_IRQInterruptConfig(Event_GPIO_Handle[i].IRQ_Num, ENABLE);
 80002ec:	4a10      	ldr	r2, [pc, #64]	@ (8000330 <EventMngt_Init+0xb0>)
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	011b      	lsls	r3, r3, #4
 80002f2:	4413      	add	r3, r2
 80002f4:	330c      	adds	r3, #12
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2101      	movs	r1, #1
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fe08 	bl	8001f10 <GPIO_IRQInterruptConfig>
    for(int i = 0; i < NUM_EVENT_PINS; i++)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	603b      	str	r3, [r7, #0]
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	2b05      	cmp	r3, #5
 800030a:	d9df      	bls.n	80002cc <EventMngt_Init+0x4c>
    }
     //set default values
    memcpy(CandidateVoting_Status, CandidateVoting_Status_Default, sizeof(CandidateVoting_Status_Default));
 800030c:	4a07      	ldr	r2, [pc, #28]	@ (800032c <EventMngt_Init+0xac>)
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <EventMngt_Init+0xb4>)
 8000310:	4610      	mov	r0, r2
 8000312:	4619      	mov	r1, r3
 8000314:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000318:	461a      	mov	r2, r3
 800031a:	f003 f8e0 	bl	80034de <memcpy>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000340 	.word	0x20000340
 800032c:	20000344 	.word	0x20000344
 8000330:	20000230 	.word	0x20000230
 8000334:	20000000 	.word	0x20000000

08000338 <EventMngt_ReadButton>:
uint8_t EventMngt_ReadButton(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
    uint8_t ret = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]
    if((uint8_t)0x1 == (uint8_t)GPIO_ReadFromInputPin(pGPIOx, PinNumber))
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	4619      	mov	r1, r3
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f001 fda5 	bl	8001e9c <GPIO_ReadFromInputPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b01      	cmp	r3, #1
 8000356:	d101      	bne.n	800035c <EventMngt_ReadButton+0x24>
    {
        ret = 1;
 8000358:	2301      	movs	r3, #1
 800035a:	73fb      	strb	r3, [r7, #15]
        //start debounce timer
    }
    return ret; 
 800035c:	7bfb      	ldrb	r3, [r7, #15]
}
 800035e:	4618      	mov	r0, r3
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 800036c:	2064      	movs	r0, #100	@ 0x64
 800036e:	f001 ff69 	bl	8002244 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000372:	2000      	movs	r0, #0
 8000374:	f001 fe50 	bl	8002018 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 8000378:	4b03      	ldr	r3, [pc, #12]	@ (8000388 <EXTI0_IRQHandler+0x20>)
 800037a:	2201      	movs	r2, #1
 800037c:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	0;
 800037e:	4b02      	ldr	r3, [pc, #8]	@ (8000388 <EXTI0_IRQHandler+0x20>)
 8000380:	2200      	movs	r2, #0
 8000382:	705a      	strb	r2, [r3, #1]
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000340 	.word	0x20000340

0800038c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 8000390:	2064      	movs	r0, #100	@ 0x64
 8000392:	f001 ff57 	bl	8002244 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_1);
 8000396:	2001      	movs	r0, #1
 8000398:	f001 fe3e 	bl	8002018 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 800039c:	4b03      	ldr	r3, [pc, #12]	@ (80003ac <EXTI1_IRQHandler+0x20>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	1;
 80003a2:	4b02      	ldr	r3, [pc, #8]	@ (80003ac <EXTI1_IRQHandler+0x20>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	705a      	strb	r2, [r3, #1]
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000340 	.word	0x20000340

080003b0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 80003b4:	2064      	movs	r0, #100	@ 0x64
 80003b6:	f001 ff45 	bl	8002244 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_2);
 80003ba:	2002      	movs	r0, #2
 80003bc:	f001 fe2c 	bl	8002018 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 80003c0:	4b03      	ldr	r3, [pc, #12]	@ (80003d0 <EXTI2_IRQHandler+0x20>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	2;
 80003c6:	4b02      	ldr	r3, [pc, #8]	@ (80003d0 <EXTI2_IRQHandler+0x20>)
 80003c8:	2202      	movs	r2, #2
 80003ca:	705a      	strb	r2, [r3, #1]
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000340 	.word	0x20000340

080003d4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 80003d8:	2064      	movs	r0, #100	@ 0x64
 80003da:	f001 ff33 	bl	8002244 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_3);
 80003de:	2003      	movs	r0, #3
 80003e0:	f001 fe1a 	bl	8002018 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 80003e4:	4b03      	ldr	r3, [pc, #12]	@ (80003f4 <EXTI3_IRQHandler+0x20>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	3;
 80003ea:	4b02      	ldr	r3, [pc, #8]	@ (80003f4 <EXTI3_IRQHandler+0x20>)
 80003ec:	2203      	movs	r2, #3
 80003ee:	705a      	strb	r2, [r3, #1]
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000340 	.word	0x20000340

080003f8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 80003fc:	2064      	movs	r0, #100	@ 0x64
 80003fe:	f001 ff21 	bl	8002244 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_4);
 8000402:	2004      	movs	r0, #4
 8000404:	f001 fe08 	bl	8002018 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 8000408:	4b03      	ldr	r3, [pc, #12]	@ (8000418 <EXTI4_IRQHandler+0x20>)
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	4;
 800040e:	4b02      	ldr	r3, [pc, #8]	@ (8000418 <EXTI4_IRQHandler+0x20>)
 8000410:	2204      	movs	r2, #4
 8000412:	705a      	strb	r2, [r3, #1]
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000340 	.word	0x20000340

0800041c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 8000420:	2064      	movs	r0, #100	@ 0x64
 8000422:	f001 ff0f 	bl	8002244 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_8);
 8000426:	2008      	movs	r0, #8
 8000428:	f001 fdf6 	bl	8002018 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 800042c:	4b03      	ldr	r3, [pc, #12]	@ (800043c <EXTI9_5_IRQHandler+0x20>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	5;
 8000432:	4b02      	ldr	r3, [pc, #8]	@ (800043c <EXTI9_5_IRQHandler+0x20>)
 8000434:	2205      	movs	r2, #5
 8000436:	705a      	strb	r2, [r3, #1]
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000340 	.word	0x20000340

08000440 <EventMngt_Main>:
void EventMngt_Main()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	if(Event_Key.Status == Event_Key_Pressed)
 8000444:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <EventMngt_Main+0x40>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d117      	bne.n	800047c <EventMngt_Main+0x3c>
	{
		if (is_timer2_delay_elapsed() == 1)
 800044c:	f001 ff4c 	bl	80022e8 <is_timer2_delay_elapsed>
 8000450:	4603      	mov	r3, r0
 8000452:	2b01      	cmp	r3, #1
 8000454:	d112      	bne.n	800047c <EventMngt_Main+0x3c>
		{
			  Event_Key.Status = 	Event_Key_Debounced;
 8000456:	4b0a      	ldr	r3, [pc, #40]	@ (8000480 <EventMngt_Main+0x40>)
 8000458:	2202      	movs	r2, #2
 800045a:	701a      	strb	r2, [r3, #0]
			  if(ModeManagement.Mode == MODE_NORMAL)
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <EventMngt_Main+0x44>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d102      	bne.n	800046a <EventMngt_Main+0x2a>
			  {
					  EventMngt_ButtonEvent();
 8000464:	f000 f810 	bl	8000488 <EventMngt_ButtonEvent>
				  ModeM_ConfigMode_Ev_Callback(Event_Key.Key_Index);
			  }
		}
	}

}
 8000468:	e008      	b.n	800047c <EventMngt_Main+0x3c>
			  else if(ModeManagement.Mode == MODE_CONFIG)
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <EventMngt_Main+0x44>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b02      	cmp	r3, #2
 8000470:	d104      	bne.n	800047c <EventMngt_Main+0x3c>
				  ModeM_ConfigMode_Ev_Callback(Event_Key.Key_Index);
 8000472:	4b03      	ldr	r3, [pc, #12]	@ (8000480 <EventMngt_Main+0x40>)
 8000474:	785b      	ldrb	r3, [r3, #1]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f9cc 	bl	8000814 <ModeM_ConfigMode_Ev_Callback>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000340 	.word	0x20000340
 8000484:	20000d7c 	.word	0x20000d7c

08000488 <EventMngt_ButtonEvent>:
static void EventMngt_ButtonEvent(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b0b7      	sub	sp, #220	@ 0xdc
 800048c:	af18      	add	r7, sp, #96	@ 0x60
    GPIO_RegDef_t *pGPIOx = Event_GPIO_Handle[Event_Key.Key_Index].GPIO_Handle_Ev.pGPIOx;
 800048e:	4b41      	ldr	r3, [pc, #260]	@ (8000594 <EventMngt_ButtonEvent+0x10c>)
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	4a41      	ldr	r2, [pc, #260]	@ (8000598 <EventMngt_ButtonEvent+0x110>)
 8000494:	011b      	lsls	r3, r3, #4
 8000496:	4413      	add	r3, r2
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	673b      	str	r3, [r7, #112]	@ 0x70
    if((uint8_t)0x1 == (uint8_t)GPIO_ReadFromInputPin(pGPIOx,
    		Event_GPIO_Handle[Event_Key.Key_Index].GPIO_Handle_Ev.GPIO_PinConfig.GPIO_PinNumber))
 800049c:	4b3d      	ldr	r3, [pc, #244]	@ (8000594 <EventMngt_ButtonEvent+0x10c>)
 800049e:	785b      	ldrb	r3, [r3, #1]
    if((uint8_t)0x1 == (uint8_t)GPIO_ReadFromInputPin(pGPIOx,
 80004a0:	4a3d      	ldr	r2, [pc, #244]	@ (8000598 <EventMngt_ButtonEvent+0x110>)
 80004a2:	011b      	lsls	r3, r3, #4
 80004a4:	4413      	add	r3, r2
 80004a6:	3304      	adds	r3, #4
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	4619      	mov	r1, r3
 80004ac:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80004ae:	f001 fcf5 	bl	8001e9c <GPIO_ReadFromInputPin>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d165      	bne.n	8000584 <EventMngt_ButtonEvent+0xfc>
    {
        //update the button status
        for(int i =0; i < NUM_CANDIDATES; i++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80004bc:	e05f      	b.n	800057e <EventMngt_ButtonEvent+0xf6>
        {
            if(CandidateVoting_Status[i].PinNumber ==
 80004be:	4937      	ldr	r1, [pc, #220]	@ (800059c <EventMngt_ButtonEvent+0x114>)
 80004c0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80004c2:	4613      	mov	r3, r2
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	440b      	add	r3, r1
 80004cc:	3368      	adds	r3, #104	@ 0x68
 80004ce:	781a      	ldrb	r2, [r3, #0]
            		Event_GPIO_Handle[Event_Key.Key_Index].GPIO_Handle_Ev.GPIO_PinConfig.GPIO_PinNumber)
 80004d0:	4b30      	ldr	r3, [pc, #192]	@ (8000594 <EventMngt_ButtonEvent+0x10c>)
 80004d2:	785b      	ldrb	r3, [r3, #1]
 80004d4:	4930      	ldr	r1, [pc, #192]	@ (8000598 <EventMngt_ButtonEvent+0x110>)
 80004d6:	011b      	lsls	r3, r3, #4
 80004d8:	440b      	add	r3, r1
 80004da:	3304      	adds	r3, #4
 80004dc:	781b      	ldrb	r3, [r3, #0]
            if(CandidateVoting_Status[i].PinNumber ==
 80004de:	429a      	cmp	r2, r3
 80004e0:	d144      	bne.n	800056c <EventMngt_ButtonEvent+0xe4>
            {
                CandidateVoting_Status[i].votes++;
 80004e2:	492e      	ldr	r1, [pc, #184]	@ (800059c <EventMngt_ButtonEvent+0x114>)
 80004e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80004e6:	4613      	mov	r3, r2
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	011b      	lsls	r3, r3, #4
 80004ee:	440b      	add	r3, r1
 80004f0:	336c      	adds	r3, #108	@ 0x6c
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1c59      	adds	r1, r3, #1
 80004f6:	4829      	ldr	r0, [pc, #164]	@ (800059c <EventMngt_ButtonEvent+0x114>)
 80004f8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80004fa:	4613      	mov	r3, r2
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	4403      	add	r3, r0
 8000504:	336c      	adds	r3, #108	@ 0x6c
 8000506:	6019      	str	r1, [r3, #0]


                LCD_Job_t msg = {
 8000508:	463b      	mov	r3, r7
 800050a:	2270      	movs	r2, #112	@ 0x70
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 ff52 	bl	80033b8 <memset>
 8000514:	2301      	movs	r3, #1
 8000516:	703b      	strb	r3, [r7, #0]
 8000518:	2364      	movs	r3, #100	@ 0x64
 800051a:	66bb      	str	r3, [r7, #104]	@ 0x68
                    .type = LCD_JOB_SCROLLING,
                    .duration_ms = 100,
                };
                strcpy(msg.message, "You voted for ");
 800051c:	463b      	mov	r3, r7
 800051e:	3301      	adds	r3, #1
 8000520:	4a1f      	ldr	r2, [pc, #124]	@ (80005a0 <EventMngt_ButtonEvent+0x118>)
 8000522:	461c      	mov	r4, r3
 8000524:	4613      	mov	r3, r2
 8000526:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000528:	6020      	str	r0, [r4, #0]
 800052a:	6061      	str	r1, [r4, #4]
 800052c:	60a2      	str	r2, [r4, #8]
 800052e:	881a      	ldrh	r2, [r3, #0]
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	81a2      	strh	r2, [r4, #12]
 8000534:	73a3      	strb	r3, [r4, #14]
                strcat(msg.message, CandidateVoting_Status[i].CandName);
 8000536:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000538:	4613      	mov	r3, r2
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	4a16      	ldr	r2, [pc, #88]	@ (800059c <EventMngt_ButtonEvent+0x114>)
 8000542:	441a      	add	r2, r3
 8000544:	463b      	mov	r3, r7
 8000546:	3301      	adds	r3, #1
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f002 ff3c 	bl	80033c8 <strcat>
                lcd_enqueue_job(msg);
 8000550:	4668      	mov	r0, sp
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	2260      	movs	r2, #96	@ 0x60
 8000558:	4619      	mov	r1, r3
 800055a:	f002 ffc0 	bl	80034de <memcpy>
 800055e:	463b      	mov	r3, r7
 8000560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000562:	f001 f95b 	bl	800181c <lcd_enqueue_job>
                lcd_display_clear();
 8000566:	f001 f911 	bl	800178c <lcd_display_clear>
                break;
 800056a:	e00b      	b.n	8000584 <EventMngt_ButtonEvent+0xfc>
            }
            else if(Event_Key.Key_Index == SYSCONFIGPIN_INDEX)
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <EventMngt_ButtonEvent+0x10c>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	2b05      	cmp	r3, #5
 8000572:	d101      	bne.n	8000578 <EventMngt_ButtonEvent+0xf0>
            {
                //if config button pressed, call the config mode callback
                EventMngt_ButtonDebounceIRQ_CONFIG_BUTTON();
 8000574:	f000 f816 	bl	80005a4 <EventMngt_ButtonDebounceIRQ_CONFIG_BUTTON>
        for(int i =0; i < NUM_CANDIDATES; i++)
 8000578:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800057a:	3301      	adds	r3, #1
 800057c:	677b      	str	r3, [r7, #116]	@ 0x74
 800057e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000580:	2b04      	cmp	r3, #4
 8000582:	d99c      	bls.n	80004be <EventMngt_ButtonEvent+0x36>

            }
        }
    }

	Event_Key.Status = 	Event_Key_Idle;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <EventMngt_ButtonEvent+0x10c>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	377c      	adds	r7, #124	@ 0x7c
 800058e:	46bd      	mov	sp, r7
 8000590:	bd90      	pop	{r4, r7, pc}
 8000592:	bf00      	nop
 8000594:	20000340 	.word	0x20000340
 8000598:	20000230 	.word	0x20000230
 800059c:	20000344 	.word	0x20000344
 80005a0:	08003fe4 	.word	0x08003fe4

080005a4 <EventMngt_ButtonDebounceIRQ_CONFIG_BUTTON>:
void EventMngt_ButtonDebounceIRQ_CONFIG_BUTTON(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
    //dummy
    GPIO_RegDef_t *pGPIOx = Event_GPIO_Handle[SYSCONFIGPIN_INDEX].GPIO_Handle_Ev.pGPIOx;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <EventMngt_ButtonDebounceIRQ_CONFIG_BUTTON+0x30>)
 80005ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80005ae:	607b      	str	r3, [r7, #4]
    if((uint8_t)0x1 == (uint8_t)GPIO_ReadFromInputPin(pGPIOx, Event_GPIO_Handle[SYSCONFIGPIN_INDEX].GPIO_Handle_Ev.GPIO_PinConfig.GPIO_PinNumber))
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <EventMngt_ButtonDebounceIRQ_CONFIG_BUTTON+0x30>)
 80005b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f001 fc6f 	bl	8001e9c <GPIO_ReadFromInputPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d102      	bne.n	80005ca <EventMngt_ButtonDebounceIRQ_CONFIG_BUTTON+0x26>
    {
        //callback to Mode management to set config mode
        ModeM_ConfigMode_Ev_Callback(5);
 80005c4:	2005      	movs	r0, #5
 80005c6:	f000 f925 	bl	8000814 <ModeM_ConfigMode_Ev_Callback>
    }
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000230 	.word	0x20000230

080005d8 <ModeM_init>:
const uint32_t EVM_IDENTIFICATION_NUMBER = 0xA0A0A0A0;

char ascii_array[10];

void ModeM_init()
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b0b4      	sub	sp, #208	@ 0xd0
 80005dc:	af18      	add	r7, sp, #96	@ 0x60
    //start config Mode if config pin is pressed
    if((uint8_t)0x1 == (uint8_t)EventMngt_ReadButton(Event_GPIO_Handle[SYSCONFIGPIN_INDEX].GPIO_Handle_Ev.pGPIOx,
 80005de:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <ModeM_init+0x80>)
 80005e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80005e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000658 <ModeM_init+0x80>)
 80005e4:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fea4 	bl	8000338 <EventMngt_ReadButton>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d103      	bne.n	80005fe <ModeM_init+0x26>
    									Event_GPIO_Handle[SYSCONFIGPIN_INDEX].GPIO_Handle_Ev.GPIO_PinConfig.GPIO_PinNumber))
    {
        ModeManagement.Mode       = MODE_CONFIG_INIT;
 80005f6:	4b19      	ldr	r3, [pc, #100]	@ (800065c <ModeM_init+0x84>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e024      	b.n	8000648 <ModeM_init+0x70>
    } 
    else
    {
         ModeManagement.Mode = MODE_NORMAL;
 80005fe:	4b17      	ldr	r3, [pc, #92]	@ (800065c <ModeM_init+0x84>)
 8000600:	2203      	movs	r2, #3
 8000602:	701a      	strb	r2, [r3, #0]
         LCD_Job_t msg = {
 8000604:	463b      	mov	r3, r7
 8000606:	2270      	movs	r2, #112	@ 0x70
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fed4 	bl	80033b8 <memset>
 8000610:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000614:	66bb      	str	r3, [r7, #104]	@ 0x68
             .type = LCD_JOB_STATIC,
             .duration_ms = 3000,
         };
         strcpy(msg.message, "Normal mode Entered");
 8000616:	463b      	mov	r3, r7
 8000618:	3301      	adds	r3, #1
 800061a:	4a11      	ldr	r2, [pc, #68]	@ (8000660 <ModeM_init+0x88>)
 800061c:	461d      	mov	r5, r3
 800061e:	4614      	mov	r4, r2
 8000620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000622:	6028      	str	r0, [r5, #0]
 8000624:	6069      	str	r1, [r5, #4]
 8000626:	60aa      	str	r2, [r5, #8]
 8000628:	60eb      	str	r3, [r5, #12]
 800062a:	6820      	ldr	r0, [r4, #0]
 800062c:	6128      	str	r0, [r5, #16]
         lcd_enqueue_job(msg);
 800062e:	4668      	mov	r0, sp
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	2260      	movs	r2, #96	@ 0x60
 8000636:	4619      	mov	r1, r3
 8000638:	f002 ff51 	bl	80034de <memcpy>
 800063c:	463b      	mov	r3, r7
 800063e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000640:	f001 f8ec 	bl	800181c <lcd_enqueue_job>
         lcd_display_clear();
 8000644:	f001 f8a2 	bl	800178c <lcd_display_clear>
    }   
    ModeManagement.ConfigSate = MODE_IDLE;
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <ModeM_init+0x84>)
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
}
 800064e:	bf00      	nop
 8000650:	3770      	adds	r7, #112	@ 0x70
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	20000230 	.word	0x20000230
 800065c:	20000d7c 	.word	0x20000d7c
 8000660:	08003ff4 	.word	0x08003ff4

08000664 <ModeM_ConfigModeM_Message>:
static void ModeM_ConfigModeM_Message(void)
{
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b0b4      	sub	sp, #208	@ 0xd0
 8000668:	af18      	add	r7, sp, #96	@ 0x60
	//clear lcd queue
	lcd_job_clear();
 800066a:	f001 f91d 	bl	80018a8 <lcd_job_clear>

    ModeManagement.Mode = MODE_CONFIG;
 800066e:	4b62      	ldr	r3, [pc, #392]	@ (80007f8 <ModeM_ConfigModeM_Message+0x194>)
 8000670:	2202      	movs	r2, #2
 8000672:	701a      	strb	r2, [r3, #0]
    /* LCD Message:
    * Config Mode Entered */
    LCD_Job_t msg = {
 8000674:	463b      	mov	r3, r7
 8000676:	2270      	movs	r2, #112	@ 0x70
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fe9c 	bl	80033b8 <memset>
 8000680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000684:	66bb      	str	r3, [r7, #104]	@ 0x68
        .type = LCD_JOB_STATIC,
        .duration_ms = 1000,
    };
    strcpy(msg.message, "Config Mode Entered ");
 8000686:	463b      	mov	r3, r7
 8000688:	3301      	adds	r3, #1
 800068a:	4a5c      	ldr	r2, [pc, #368]	@ (80007fc <ModeM_ConfigModeM_Message+0x198>)
 800068c:	461d      	mov	r5, r3
 800068e:	4614      	mov	r4, r2
 8000690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000692:	6028      	str	r0, [r5, #0]
 8000694:	6069      	str	r1, [r5, #4]
 8000696:	60aa      	str	r2, [r5, #8]
 8000698:	60eb      	str	r3, [r5, #12]
 800069a:	6820      	ldr	r0, [r4, #0]
 800069c:	6128      	str	r0, [r5, #16]
 800069e:	7923      	ldrb	r3, [r4, #4]
 80006a0:	752b      	strb	r3, [r5, #20]
    lcd_enqueue_job(msg);
 80006a2:	4668      	mov	r0, sp
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2260      	movs	r2, #96	@ 0x60
 80006aa:	4619      	mov	r1, r3
 80006ac:	f002 ff17 	bl	80034de <memcpy>
 80006b0:	463b      	mov	r3, r7
 80006b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b4:	f001 f8b2 	bl	800181c <lcd_enqueue_job>


    /* Press 1 to Display Votes */
        msg.type = LCD_JOB_STATIC;
 80006b8:	2300      	movs	r3, #0
 80006ba:	703b      	strb	r3, [r7, #0]
        msg.duration_ms = 1000;
 80006bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c0:	66bb      	str	r3, [r7, #104]	@ 0x68

    strcpy(msg.message, "Press 1 to Display Votes  ");
 80006c2:	463b      	mov	r3, r7
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a4e      	ldr	r2, [pc, #312]	@ (8000800 <ModeM_ConfigModeM_Message+0x19c>)
 80006c8:	461d      	mov	r5, r3
 80006ca:	4614      	mov	r4, r2
 80006cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ce:	6028      	str	r0, [r5, #0]
 80006d0:	6069      	str	r1, [r5, #4]
 80006d2:	60aa      	str	r2, [r5, #8]
 80006d4:	60eb      	str	r3, [r5, #12]
 80006d6:	cc03      	ldmia	r4!, {r0, r1}
 80006d8:	6128      	str	r0, [r5, #16]
 80006da:	6169      	str	r1, [r5, #20]
 80006dc:	8823      	ldrh	r3, [r4, #0]
 80006de:	78a2      	ldrb	r2, [r4, #2]
 80006e0:	832b      	strh	r3, [r5, #24]
 80006e2:	4613      	mov	r3, r2
 80006e4:	76ab      	strb	r3, [r5, #26]
    lcd_enqueue_job(msg);
 80006e6:	4668      	mov	r0, sp
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2260      	movs	r2, #96	@ 0x60
 80006ee:	4619      	mov	r1, r3
 80006f0:	f002 fef5 	bl	80034de <memcpy>
 80006f4:	463b      	mov	r3, r7
 80006f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f8:	f001 f890 	bl	800181c <lcd_enqueue_job>

    /* Press 2 to Normal Mode */
    msg.type = LCD_JOB_STATIC;
 80006fc:	2300      	movs	r3, #0
 80006fe:	703b      	strb	r3, [r7, #0]
    msg.duration_ms = 1000;
 8000700:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000704:	66bb      	str	r3, [r7, #104]	@ 0x68

    strcpy(msg.message, "Press 2 to Normal Mode ");
 8000706:	463b      	mov	r3, r7
 8000708:	3301      	adds	r3, #1
 800070a:	4a3e      	ldr	r2, [pc, #248]	@ (8000804 <ModeM_ConfigModeM_Message+0x1a0>)
 800070c:	461d      	mov	r5, r3
 800070e:	4614      	mov	r4, r2
 8000710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000712:	6028      	str	r0, [r5, #0]
 8000714:	6069      	str	r1, [r5, #4]
 8000716:	60aa      	str	r2, [r5, #8]
 8000718:	60eb      	str	r3, [r5, #12]
 800071a:	cc03      	ldmia	r4!, {r0, r1}
 800071c:	6128      	str	r0, [r5, #16]
 800071e:	6169      	str	r1, [r5, #20]
    lcd_enqueue_job(msg);
 8000720:	4668      	mov	r0, sp
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	2260      	movs	r2, #96	@ 0x60
 8000728:	4619      	mov	r1, r3
 800072a:	f002 fed8 	bl	80034de <memcpy>
 800072e:	463b      	mov	r3, r7
 8000730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000732:	f001 f873 	bl	800181c <lcd_enqueue_job>

    /* Press 3 to Shutdown */
    msg.type = LCD_JOB_STATIC;
 8000736:	2300      	movs	r3, #0
 8000738:	703b      	strb	r3, [r7, #0]
    msg.duration_ms = 1000;
 800073a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073e:	66bb      	str	r3, [r7, #104]	@ 0x68

    strcpy(msg.message, "Press 3 to Shutdown ");
 8000740:	463b      	mov	r3, r7
 8000742:	3301      	adds	r3, #1
 8000744:	4a30      	ldr	r2, [pc, #192]	@ (8000808 <ModeM_ConfigModeM_Message+0x1a4>)
 8000746:	461d      	mov	r5, r3
 8000748:	4614      	mov	r4, r2
 800074a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800074c:	6028      	str	r0, [r5, #0]
 800074e:	6069      	str	r1, [r5, #4]
 8000750:	60aa      	str	r2, [r5, #8]
 8000752:	60eb      	str	r3, [r5, #12]
 8000754:	6820      	ldr	r0, [r4, #0]
 8000756:	6128      	str	r0, [r5, #16]
 8000758:	7923      	ldrb	r3, [r4, #4]
 800075a:	752b      	strb	r3, [r5, #20]
    lcd_enqueue_job(msg);
 800075c:	4668      	mov	r0, sp
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2260      	movs	r2, #96	@ 0x60
 8000764:	4619      	mov	r1, r3
 8000766:	f002 feba 	bl	80034de <memcpy>
 800076a:	463b      	mov	r3, r7
 800076c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800076e:	f001 f855 	bl	800181c <lcd_enqueue_job>

    /* Press 4 to Reset All Data */
    msg.type = LCD_JOB_STATIC;
 8000772:	2300      	movs	r3, #0
 8000774:	703b      	strb	r3, [r7, #0]
    msg.duration_ms = 1000;
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	66bb      	str	r3, [r7, #104]	@ 0x68

    strcpy(msg.message, "Press 4 to Reset All Data  ");
 800077c:	463b      	mov	r3, r7
 800077e:	3301      	adds	r3, #1
 8000780:	4a22      	ldr	r2, [pc, #136]	@ (800080c <ModeM_ConfigModeM_Message+0x1a8>)
 8000782:	461d      	mov	r5, r3
 8000784:	4614      	mov	r4, r2
 8000786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000788:	6028      	str	r0, [r5, #0]
 800078a:	6069      	str	r1, [r5, #4]
 800078c:	60aa      	str	r2, [r5, #8]
 800078e:	60eb      	str	r3, [r5, #12]
 8000790:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000792:	6128      	str	r0, [r5, #16]
 8000794:	6169      	str	r1, [r5, #20]
 8000796:	61aa      	str	r2, [r5, #24]
    lcd_enqueue_job(msg);
 8000798:	4668      	mov	r0, sp
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2260      	movs	r2, #96	@ 0x60
 80007a0:	4619      	mov	r1, r3
 80007a2:	f002 fe9c 	bl	80034de <memcpy>
 80007a6:	463b      	mov	r3, r7
 80007a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007aa:	f001 f837 	bl	800181c <lcd_enqueue_job>

    /* Press 5 to Connect with UART */
    msg.type = LCD_JOB_STATIC;
 80007ae:	2300      	movs	r3, #0
 80007b0:	703b      	strb	r3, [r7, #0]
    msg.duration_ms = 1000;
 80007b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b6:	66bb      	str	r3, [r7, #104]	@ 0x68

    strcpy(msg.message, "Press 5 to Connect with UART ");
 80007b8:	463b      	mov	r3, r7
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a14      	ldr	r2, [pc, #80]	@ (8000810 <ModeM_ConfigModeM_Message+0x1ac>)
 80007be:	461d      	mov	r5, r3
 80007c0:	4614      	mov	r4, r2
 80007c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c4:	6028      	str	r0, [r5, #0]
 80007c6:	6069      	str	r1, [r5, #4]
 80007c8:	60aa      	str	r2, [r5, #8]
 80007ca:	60eb      	str	r3, [r5, #12]
 80007cc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007ce:	6128      	str	r0, [r5, #16]
 80007d0:	6169      	str	r1, [r5, #20]
 80007d2:	61aa      	str	r2, [r5, #24]
 80007d4:	8823      	ldrh	r3, [r4, #0]
 80007d6:	83ab      	strh	r3, [r5, #28]
    lcd_enqueue_job(msg);
 80007d8:	4668      	mov	r0, sp
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2260      	movs	r2, #96	@ 0x60
 80007e0:	4619      	mov	r1, r3
 80007e2:	f002 fe7c 	bl	80034de <memcpy>
 80007e6:	463b      	mov	r3, r7
 80007e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ea:	f001 f817 	bl	800181c <lcd_enqueue_job>


}
 80007ee:	bf00      	nop
 80007f0:	3770      	adds	r7, #112	@ 0x70
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdb0      	pop	{r4, r5, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000d7c 	.word	0x20000d7c
 80007fc:	08004008 	.word	0x08004008
 8000800:	08004020 	.word	0x08004020
 8000804:	0800403c 	.word	0x0800403c
 8000808:	08004054 	.word	0x08004054
 800080c:	0800406c 	.word	0x0800406c
 8000810:	08004088 	.word	0x08004088

08000814 <ModeM_ConfigMode_Ev_Callback>:

void ModeM_ConfigMode_Ev_Callback(uint8_t pinIndex)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    if(pinIndex == SYSCONFIGPIN_INDEX)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b05      	cmp	r3, #5
 8000822:	d105      	bne.n	8000830 <ModeM_ConfigMode_Ev_Callback+0x1c>
    {
    	ModeManagement.ConfigSate = CONFIG_STATE_VIA_PIN;
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <ModeM_ConfigMode_Ev_Callback+0x7c>)
 8000826:	2207      	movs	r2, #7
 8000828:	705a      	strb	r2, [r3, #1]
    	ModeM_ConfigModeM_Message();
 800082a:	f7ff ff1b 	bl	8000664 <ModeM_ConfigModeM_Message>
    else if(pinIndex == 4u)
    {
        lcd_job_clear();
        ModeManagement.ConfigSate = CONFIG_STATE_UART_CONNECT;
    }
}
 800082e:	e02b      	b.n	8000888 <ModeM_ConfigMode_Ev_Callback+0x74>
    else if(pinIndex == 0u)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d105      	bne.n	8000842 <ModeM_ConfigMode_Ev_Callback+0x2e>
        lcd_job_clear();
 8000836:	f001 f837 	bl	80018a8 <lcd_job_clear>
        ModeManagement.ConfigSate = CONFIG_STATE_DISPLAY_VOTES;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <ModeM_ConfigMode_Ev_Callback+0x7c>)
 800083c:	2201      	movs	r2, #1
 800083e:	705a      	strb	r2, [r3, #1]
}
 8000840:	e022      	b.n	8000888 <ModeM_ConfigMode_Ev_Callback+0x74>
    else if(pinIndex == 1u)
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d105      	bne.n	8000854 <ModeM_ConfigMode_Ev_Callback+0x40>
        lcd_job_clear();
 8000848:	f001 f82e 	bl	80018a8 <lcd_job_clear>
        ModeManagement.ConfigSate = CONFIG_STATE_NORMAL_MODE;
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <ModeM_ConfigMode_Ev_Callback+0x7c>)
 800084e:	2202      	movs	r2, #2
 8000850:	705a      	strb	r2, [r3, #1]
}
 8000852:	e019      	b.n	8000888 <ModeM_ConfigMode_Ev_Callback+0x74>
    else if(pinIndex == 2u)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d105      	bne.n	8000866 <ModeM_ConfigMode_Ev_Callback+0x52>
        lcd_job_clear();
 800085a:	f001 f825 	bl	80018a8 <lcd_job_clear>
        ModeManagement.ConfigSate = CONFIG_STATE_SHUTDOWN;
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <ModeM_ConfigMode_Ev_Callback+0x7c>)
 8000860:	2203      	movs	r2, #3
 8000862:	705a      	strb	r2, [r3, #1]
}
 8000864:	e010      	b.n	8000888 <ModeM_ConfigMode_Ev_Callback+0x74>
    else if(pinIndex == 3u)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b03      	cmp	r3, #3
 800086a:	d105      	bne.n	8000878 <ModeM_ConfigMode_Ev_Callback+0x64>
        lcd_job_clear();
 800086c:	f001 f81c 	bl	80018a8 <lcd_job_clear>
        ModeManagement.ConfigSate = CONFIG_STATE_RESET_DATA;
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <ModeM_ConfigMode_Ev_Callback+0x7c>)
 8000872:	2205      	movs	r2, #5
 8000874:	705a      	strb	r2, [r3, #1]
}
 8000876:	e007      	b.n	8000888 <ModeM_ConfigMode_Ev_Callback+0x74>
    else if(pinIndex == 4u)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d104      	bne.n	8000888 <ModeM_ConfigMode_Ev_Callback+0x74>
        lcd_job_clear();
 800087e:	f001 f813 	bl	80018a8 <lcd_job_clear>
        ModeManagement.ConfigSate = CONFIG_STATE_UART_CONNECT;
 8000882:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <ModeM_ConfigMode_Ev_Callback+0x7c>)
 8000884:	2204      	movs	r2, #4
 8000886:	705a      	strb	r2, [r3, #1]
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000d7c 	.word	0x20000d7c

08000894 <ModeM_ConfigMode>:

void ModeM_ConfigMode()
{
 8000894:	b5b0      	push	{r4, r5, r7, lr}
 8000896:	b0b6      	sub	sp, #216	@ 0xd8
 8000898:	af18      	add	r7, sp, #96	@ 0x60


    switch(ModeManagement.ConfigSate)
 800089a:	4b7b      	ldr	r3, [pc, #492]	@ (8000a88 <ModeM_ConfigMode+0x1f4>)
 800089c:	785b      	ldrb	r3, [r3, #1]
 800089e:	3b01      	subs	r3, #1
 80008a0:	2b06      	cmp	r3, #6
 80008a2:	f200 80ed 	bhi.w	8000a80 <ModeM_ConfigMode+0x1ec>
 80008a6:	a201      	add	r2, pc, #4	@ (adr r2, 80008ac <ModeM_ConfigMode+0x18>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008db 	.word	0x080008db
 80008b0:	08000995 	.word	0x08000995
 80008b4:	0800099d 	.word	0x0800099d
 80008b8:	080009e7 	.word	0x080009e7
 80008bc:	08000a35 	.word	0x08000a35
 80008c0:	08000a81 	.word	0x08000a81
 80008c4:	080008c9 	.word	0x080008c9
    {
		case CONFIG_STATE_VIA_PIN:
			if(lcd_queue_size() == 0)
 80008c8:	f000 ff9c 	bl	8001804 <lcd_queue_size>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f040 80d5 	bne.w	8000a7e <ModeM_ConfigMode+0x1ea>
			{
				ModeM_ConfigModeM_Message();
 80008d4:	f7ff fec6 	bl	8000664 <ModeM_ConfigModeM_Message>
			}
		break;
 80008d8:	e0d1      	b.n	8000a7e <ModeM_ConfigMode+0x1ea>
        {
            //ModeManagement.ConfigSate = CONFIG_STATE_DISPLAY_VOTES;
            /* LCD Message: Display All candidates Votes 
            *  LCD Message: Press 6 for Main Menu
            */
            for(int i =0; i < NUM_CANDIDATES; i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80008de:	e055      	b.n	800098c <ModeM_ConfigMode+0xf8>
            {
                LCD_Job_t msg = {
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2270      	movs	r2, #112	@ 0x70
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fd66 	bl	80033b8 <memset>
 80008ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    .type = LCD_JOB_STATIC,
                    .duration_ms = 1000,
                };
                strcpy(msg.message, CandidateVoting_Status[i].CandName);
 80008f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008f4:	4613      	mov	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	1a9b      	subs	r3, r3, r2
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	4a63      	ldr	r2, [pc, #396]	@ (8000a8c <ModeM_ConfigMode+0x1f8>)
 80008fe:	441a      	add	r2, r3
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	3301      	adds	r3, #1
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fde1 	bl	80034ce <strcpy>
                strcat(msg.message, " - ");
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	3301      	adds	r3, #1
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fc5d 	bl	80001d0 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	3301      	adds	r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	4a5b      	ldr	r2, [pc, #364]	@ (8000a90 <ModeM_ConfigMode+0x1fc>)
 8000922:	6810      	ldr	r0, [r2, #0]
 8000924:	6018      	str	r0, [r3, #0]
                sprintf(ascii_array, "%lu", CandidateVoting_Status[i].votes);
 8000926:	4959      	ldr	r1, [pc, #356]	@ (8000a8c <ModeM_ConfigMode+0x1f8>)
 8000928:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800092a:	4613      	mov	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	440b      	add	r3, r1
 8000934:	336c      	adds	r3, #108	@ 0x6c
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4956      	ldr	r1, [pc, #344]	@ (8000a94 <ModeM_ConfigMode+0x200>)
 800093c:	4856      	ldr	r0, [pc, #344]	@ (8000a98 <ModeM_ConfigMode+0x204>)
 800093e:	f002 fc41 	bl	80031c4 <siprintf>
                strcat(msg.message, ascii_array);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	3301      	adds	r3, #1
 8000946:	4954      	ldr	r1, [pc, #336]	@ (8000a98 <ModeM_ConfigMode+0x204>)
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fd3d 	bl	80033c8 <strcat>
                strcat(msg.message, " votes");
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	3301      	adds	r3, #1
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc3c 	bl	80001d0 <strlen>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	3301      	adds	r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	4a4e      	ldr	r2, [pc, #312]	@ (8000a9c <ModeM_ConfigMode+0x208>)
 8000964:	6810      	ldr	r0, [r2, #0]
 8000966:	6018      	str	r0, [r3, #0]
 8000968:	8891      	ldrh	r1, [r2, #4]
 800096a:	7992      	ldrb	r2, [r2, #6]
 800096c:	8099      	strh	r1, [r3, #4]
 800096e:	719a      	strb	r2, [r3, #6]
                lcd_enqueue_job(msg);
 8000970:	4668      	mov	r0, sp
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2260      	movs	r2, #96	@ 0x60
 8000978:	4619      	mov	r1, r3
 800097a:	f002 fdb0 	bl	80034de <memcpy>
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000982:	f000 ff4b 	bl	800181c <lcd_enqueue_job>
            for(int i =0; i < NUM_CANDIDATES; i++)
 8000986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000988:	3301      	adds	r3, #1
 800098a:	677b      	str	r3, [r7, #116]	@ 0x74
 800098c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800098e:	2b04      	cmp	r3, #4
 8000990:	d9a6      	bls.n	80008e0 <ModeM_ConfigMode+0x4c>
            }
            break;
 8000992:	e075      	b.n	8000a80 <ModeM_ConfigMode+0x1ec>
        }
        case CONFIG_STATE_NORMAL_MODE:
        {
            /* LCD Message: Normal Mode */
            ModeManagement.ConfigSate = CONFIG_STATE_SHUTDOWN;
 8000994:	4b3c      	ldr	r3, [pc, #240]	@ (8000a88 <ModeM_ConfigMode+0x1f4>)
 8000996:	2203      	movs	r2, #3
 8000998:	705a      	strb	r2, [r3, #1]
            break;
 800099a:	e071      	b.n	8000a80 <ModeM_ConfigMode+0x1ec>
        }
        case CONFIG_STATE_SHUTDOWN:
        {
            /* LCD Message: Shutdown Mode */
            LCD_Job_t msg = {
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2270      	movs	r2, #112	@ 0x70
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fd08 	bl	80033b8 <memset>
 80009a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .type = LCD_JOB_STATIC,
            .duration_ms = 1000,
            };
            strcpy(msg.message, "Shutting down ");
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a3b      	ldr	r2, [pc, #236]	@ (8000aa0 <ModeM_ConfigMode+0x20c>)
 80009b4:	461c      	mov	r4, r3
 80009b6:	4613      	mov	r3, r2
 80009b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80009ba:	6020      	str	r0, [r4, #0]
 80009bc:	6061      	str	r1, [r4, #4]
 80009be:	60a2      	str	r2, [r4, #8]
 80009c0:	881a      	ldrh	r2, [r3, #0]
 80009c2:	789b      	ldrb	r3, [r3, #2]
 80009c4:	81a2      	strh	r2, [r4, #12]
 80009c6:	73a3      	strb	r3, [r4, #14]
            lcd_enqueue_job(msg);
 80009c8:	4668      	mov	r0, sp
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2260      	movs	r2, #96	@ 0x60
 80009d0:	4619      	mov	r1, r3
 80009d2:	f002 fd84 	bl	80034de <memcpy>
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009da:	f000 ff1f 	bl	800181c <lcd_enqueue_job>
            /* Shutdown code */
            ModeManagement.ConfigSate = CONFIG_STATE_UNINIT;
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <ModeM_ConfigMode+0x1f4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	705a      	strb	r2, [r3, #1]
            break;
 80009e4:	e04c      	b.n	8000a80 <ModeM_ConfigMode+0x1ec>
        }
        case CONFIG_STATE_UART_CONNECT:
        {
            /* LCD Message: UART Connect Mode */
            LCD_Job_t msg = {
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2270      	movs	r2, #112	@ 0x70
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fce3 	bl	80033b8 <memset>
 80009f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .type = LCD_JOB_STATIC,
            .duration_ms = 1000,
            };
            strcpy(msg.message, "UART Connect Mode");
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a29      	ldr	r2, [pc, #164]	@ (8000aa4 <ModeM_ConfigMode+0x210>)
 80009fe:	461d      	mov	r5, r3
 8000a00:	4614      	mov	r4, r2
 8000a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a04:	6028      	str	r0, [r5, #0]
 8000a06:	6069      	str	r1, [r5, #4]
 8000a08:	60aa      	str	r2, [r5, #8]
 8000a0a:	60eb      	str	r3, [r5, #12]
 8000a0c:	8823      	ldrh	r3, [r4, #0]
 8000a0e:	822b      	strh	r3, [r5, #16]
            lcd_enqueue_job(msg);
 8000a10:	4668      	mov	r0, sp
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2260      	movs	r2, #96	@ 0x60
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f002 fd60 	bl	80034de <memcpy>
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a22:	f000 fefb 	bl	800181c <lcd_enqueue_job>
            Dcm_Process.state = DCM_IDLE;
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <ModeM_ConfigMode+0x214>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]

            ModeManagement.ConfigSate = CONFIG_STATE_UNINIT;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <ModeM_ConfigMode+0x1f4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	705a      	strb	r2, [r3, #1]
            break;
 8000a32:	e025      	b.n	8000a80 <ModeM_ConfigMode+0x1ec>
        }
        case CONFIG_STATE_RESET_DATA:
        {
            /* Reset All permanently stored data */
            LCD_Job_t msg = {
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2270      	movs	r2, #112	@ 0x70
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fcbc 	bl	80033b8 <memset>
 8000a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a44:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .type = LCD_JOB_STATIC,
            .duration_ms = 1000,
            };
            strcpy(msg.message, "Erase All data");
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	3301      	adds	r3, #1
 8000a4a:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <ModeM_ConfigMode+0x218>)
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	4613      	mov	r3, r2
 8000a50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a52:	6020      	str	r0, [r4, #0]
 8000a54:	6061      	str	r1, [r4, #4]
 8000a56:	60a2      	str	r2, [r4, #8]
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	789b      	ldrb	r3, [r3, #2]
 8000a5c:	81a2      	strh	r2, [r4, #12]
 8000a5e:	73a3      	strb	r3, [r4, #14]
            lcd_enqueue_job(msg);
 8000a60:	4668      	mov	r0, sp
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2260      	movs	r2, #96	@ 0x60
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f002 fd38 	bl	80034de <memcpy>
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a72:	f000 fed3 	bl	800181c <lcd_enqueue_job>

            ModeManagement.ConfigSate = CONFIG_STATE_UNINIT;
 8000a76:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <ModeM_ConfigMode+0x1f4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	705a      	strb	r2, [r3, #1]
            break;
 8000a7c:	e000      	b.n	8000a80 <ModeM_ConfigMode+0x1ec>
		break;
 8000a7e:	bf00      	nop
        default:
        {

        }
    }
}
 8000a80:	bf00      	nop
 8000a82:	3778      	adds	r7, #120	@ 0x78
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bdb0      	pop	{r4, r5, r7, pc}
 8000a88:	20000d7c 	.word	0x20000d7c
 8000a8c:	20000344 	.word	0x20000344
 8000a90:	080040a8 	.word	0x080040a8
 8000a94:	080040ac 	.word	0x080040ac
 8000a98:	20000d80 	.word	0x20000d80
 8000a9c:	080040b0 	.word	0x080040b0
 8000aa0:	080040b8 	.word	0x080040b8
 8000aa4:	080040c8 	.word	0x080040c8
 8000aa8:	20000574 	.word	0x20000574
 8000aac:	080040dc 	.word	0x080040dc

08000ab0 <Dcm_Main>:

void Dcm_Main(void)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	f5ad 6d9e 	sub.w	sp, sp, #1264	@ 0x4f0
 8000ab6:	af18      	add	r7, sp, #96	@ 0x60
    uint16_t RDID = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8a7 3482 	strh.w	r3, [r7, #1154]	@ 0x482
    uint16_t routine = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8a7 3480 	strh.w	r3, [r7, #1152]	@ 0x480
    char tempbuffer[1024];
    uint16_t ReqLength = (Dcm_Process.rxBuffer[0] << 8) | Dcm_Process.rxBuffer[1];
 8000ac4:	4bb4      	ldr	r3, [pc, #720]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000ac6:	785b      	ldrb	r3, [r3, #1]
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	b21a      	sxth	r2, r3
 8000ace:	4bb2      	ldr	r3, [pc, #712]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	f8a7 347e 	strh.w	r3, [r7, #1150]	@ 0x47e
    switch(Dcm_Process.state)
 8000adc:	4bae      	ldr	r3, [pc, #696]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	f200 849d 	bhi.w	8001422 <Dcm_Main+0x972>
 8000ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8000af0 <Dcm_Main+0x40>)
 8000aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aee:	bf00      	nop
 8000af0:	08000b01 	.word	0x08000b01
 8000af4:	08000b13 	.word	0x08000b13
 8000af8:	08000b33 	.word	0x08000b33
 8000afc:	080013f3 	.word	0x080013f3
    {
        case DCM_IDLE:
    		//First lets enable the reception in interrupt mode
    		//this code enables the receive interrupt
    		USART_ReceiveDataIT_Request(Dcm_Process.rxBuffer, 2u);
 8000b00:	2102      	movs	r1, #2
 8000b02:	48a6      	ldr	r0, [pc, #664]	@ (8000d9c <Dcm_Main+0x2ec>)
 8000b04:	f001 fde6 	bl	80026d4 <USART_ReceiveDataIT_Request>
    		Dcm_Process.state = DCM_WAITING;
 8000b08:	4ba3      	ldr	r3, [pc, #652]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	701a      	strb	r2, [r3, #0]
        break;
 8000b0e:	f000 bc8b 	b.w	8001428 <Dcm_Main+0x978>
        case DCM_WAITING:
        if(Dcm_Process.rxReady == true)
 8000b12:	4ba1      	ldr	r3, [pc, #644]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000b14:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f000 8484 	beq.w	8001426 <Dcm_Main+0x976>
        {
            Dcm_Process.state = DCM_PROCESS_RX;
 8000b1e:	4b9e      	ldr	r3, [pc, #632]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000b20:	2203      	movs	r2, #3
 8000b22:	701a      	strb	r2, [r3, #0]
            Dcm_Process.service = (Dcm_service_en)Dcm_Process.rxBuffer[2];
 8000b24:	4b9c      	ldr	r3, [pc, #624]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000b26:	78da      	ldrb	r2, [r3, #3]
 8000b28:	4b9b      	ldr	r3, [pc, #620]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000b2a:	f883 2803 	strb.w	r2, [r3, #2051]	@ 0x803
        }
        break;
 8000b2e:	f000 bc7a 	b.w	8001426 <Dcm_Main+0x976>
        
        case DCM_PROCESS_RX:
            switch(Dcm_Process.service)
 8000b32:	4b99      	ldr	r3, [pc, #612]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000b34:	f893 3803 	ldrb.w	r3, [r3, #2051]	@ 0x803
 8000b38:	3b22      	subs	r3, #34	@ 0x22
 8000b3a:	2b1c      	cmp	r3, #28
 8000b3c:	f200 8450 	bhi.w	80013e0 <Dcm_Main+0x930>
 8000b40:	a201      	add	r2, pc, #4	@ (adr r2, 8000b48 <Dcm_Main+0x98>)
 8000b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b46:	bf00      	nop
 8000b48:	08000bbd 	.word	0x08000bbd
 8000b4c:	080013e1 	.word	0x080013e1
 8000b50:	080013e1 	.word	0x080013e1
 8000b54:	080013e1 	.word	0x080013e1
 8000b58:	080013e1 	.word	0x080013e1
 8000b5c:	080013e1 	.word	0x080013e1
 8000b60:	080013e1 	.word	0x080013e1
 8000b64:	080013e1 	.word	0x080013e1
 8000b68:	080013e1 	.word	0x080013e1
 8000b6c:	080013e1 	.word	0x080013e1
 8000b70:	080013e1 	.word	0x080013e1
 8000b74:	080013e1 	.word	0x080013e1
 8000b78:	08000cbf 	.word	0x08000cbf
 8000b7c:	080013e1 	.word	0x080013e1
 8000b80:	080013e1 	.word	0x080013e1
 8000b84:	08000da5 	.word	0x08000da5
 8000b88:	080013e1 	.word	0x080013e1
 8000b8c:	080013e1 	.word	0x080013e1
 8000b90:	080013e1 	.word	0x080013e1
 8000b94:	080013e1 	.word	0x080013e1
 8000b98:	080013e1 	.word	0x080013e1
 8000b9c:	080013e1 	.word	0x080013e1
 8000ba0:	080013e1 	.word	0x080013e1
 8000ba4:	080013e1 	.word	0x080013e1
 8000ba8:	080013e1 	.word	0x080013e1
 8000bac:	080013e1 	.word	0x080013e1
 8000bb0:	080013e1 	.word	0x080013e1
 8000bb4:	080013e1 	.word	0x080013e1
 8000bb8:	080013bf 	.word	0x080013bf
            {
                case DCM_READ_RDID:
                if(ReqLength == 3)
 8000bbc:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	@ 0x47e
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	f040 840f 	bne.w	80013e4 <Dcm_Main+0x934>
                {
                    RDID = (Dcm_Process.rxBuffer[3] << 8) | Dcm_Process.rxBuffer[4];
 8000bc6:	4b74      	ldr	r3, [pc, #464]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b71      	ldr	r3, [pc, #452]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000bd2:	795b      	ldrb	r3, [r3, #5]
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	f8a7 3482 	strh.w	r3, [r7, #1154]	@ 0x482
                    if(RDID == 0xF190)
 8000bde:	f8b7 3482 	ldrh.w	r3, [r7, #1154]	@ 0x482
 8000be2:	f24f 1290 	movw	r2, #61840	@ 0xf190
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12f      	bne.n	8000c4a <Dcm_Main+0x19a>
                    {
                        //EVM Identification  Number     EVM_IDENTIFICATION     
                       //	Active EVM state Session
                        Dcm_Process.txBuffer[0] = 0x00;
 8000bea:	4b6b      	ldr	r3, [pc, #428]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                        Dcm_Process.txBuffer[1] = 0x07;
 8000bf2:	4b69      	ldr	r3, [pc, #420]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                        Dcm_Process.txBuffer[2] = 0x62;
 8000bfa:	4b67      	ldr	r3, [pc, #412]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000bfc:	2262      	movs	r2, #98	@ 0x62
 8000bfe:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                        Dcm_Process.txBuffer[3] = 0xF1u;
 8000c02:	4b65      	ldr	r3, [pc, #404]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c04:	22f1      	movs	r2, #241	@ 0xf1
 8000c06:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                        Dcm_Process.txBuffer[4] = 0x90u;
 8000c0a:	4b63      	ldr	r3, [pc, #396]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c0c:	2290      	movs	r2, #144	@ 0x90
 8000c0e:	f883 2405 	strb.w	r2, [r3, #1029]	@ 0x405
                        Dcm_Process.txBuffer[5] = (uint8_t)((EVM_IDENTIFICATION_NUMBER  & 0xFF000000) >> 24) ;
 8000c12:	f04f 33a0 	mov.w	r3, #2694881440	@ 0xa0a0a0a0
 8000c16:	0e1b      	lsrs	r3, r3, #24
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c1c:	f883 2406 	strb.w	r2, [r3, #1030]	@ 0x406
                        Dcm_Process.txBuffer[6] = (uint8_t)((EVM_IDENTIFICATION_NUMBER  & 0x00FF0000) >> 16) ;
 8000c20:	f04f 33a0 	mov.w	r3, #2694881440	@ 0xa0a0a0a0
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b5b      	ldr	r3, [pc, #364]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c2a:	f883 2407 	strb.w	r2, [r3, #1031]	@ 0x407
                        Dcm_Process.txBuffer[7] = (uint8_t)((EVM_IDENTIFICATION_NUMBER  & 0x0000FF00) >> 8)  ;
 8000c2e:	f04f 33a0 	mov.w	r3, #2694881440	@ 0xa0a0a0a0
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b58      	ldr	r3, [pc, #352]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c38:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408
                        Dcm_Process.txBuffer[8] = (uint8_t)((EVM_IDENTIFICATION_NUMBER  & 0xFF)) ;
 8000c3c:	f04f 33a0 	mov.w	r3, #2694881440	@ 0xa0a0a0a0
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b55      	ldr	r3, [pc, #340]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c44:	f883 2409 	strb.w	r2, [r3, #1033]	@ 0x409
                        Dcm_Process.txBuffer[2] = 0x7F ;
                        Dcm_Process.txBuffer[3] = 0x22 ;
                        Dcm_Process.txBuffer[4] = 0x11 ;
                    }
                }
                break;
 8000c48:	e3cc      	b.n	80013e4 <Dcm_Main+0x934>
                    else if(RDID == 0xF111)
 8000c4a:	f8b7 3482 	ldrh.w	r3, [r7, #1154]	@ 0x482
 8000c4e:	f24f 1211 	movw	r2, #61713	@ 0xf111
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d11e      	bne.n	8000c94 <Dcm_Main+0x1e4>
                        Dcm_Process.txBuffer[0] = 0x00 ;
 8000c56:	4b50      	ldr	r3, [pc, #320]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                        Dcm_Process.txBuffer[1] = 0x05 ;
 8000c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c60:	2205      	movs	r2, #5
 8000c62:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                        Dcm_Process.txBuffer[2] = 0x62 ;
 8000c66:	4b4c      	ldr	r3, [pc, #304]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c68:	2262      	movs	r2, #98	@ 0x62
 8000c6a:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                        Dcm_Process.txBuffer[3] = 0xF1u ;
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c70:	22f1      	movs	r2, #241	@ 0xf1
 8000c72:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                        Dcm_Process.txBuffer[4] = 0x11 ;
 8000c76:	4b48      	ldr	r3, [pc, #288]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c78:	2211      	movs	r2, #17
 8000c7a:	f883 2405 	strb.w	r2, [r3, #1029]	@ 0x405
                        Dcm_Process.txBuffer[5] = ModeManagement.Mode ;
 8000c7e:	4b48      	ldr	r3, [pc, #288]	@ (8000da0 <Dcm_Main+0x2f0>)
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	4b45      	ldr	r3, [pc, #276]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c84:	f883 2406 	strb.w	r2, [r3, #1030]	@ 0x406
                        Dcm_Process.txBuffer[6] = ModeManagement.ConfigSate ;
 8000c88:	4b45      	ldr	r3, [pc, #276]	@ (8000da0 <Dcm_Main+0x2f0>)
 8000c8a:	785a      	ldrb	r2, [r3, #1]
 8000c8c:	4b42      	ldr	r3, [pc, #264]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c8e:	f883 2407 	strb.w	r2, [r3, #1031]	@ 0x407
                break;
 8000c92:	e3a7      	b.n	80013e4 <Dcm_Main+0x934>
                        Dcm_Process.txBuffer[0] = 0x00 ;
 8000c94:	4b40      	ldr	r3, [pc, #256]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                        Dcm_Process.txBuffer[1] = 0x03 ;
 8000c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                        Dcm_Process.txBuffer[2] = 0x7F ;
 8000ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000ca6:	227f      	movs	r2, #127	@ 0x7f
 8000ca8:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                        Dcm_Process.txBuffer[3] = 0x22 ;
 8000cac:	4b3a      	ldr	r3, [pc, #232]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000cae:	2222      	movs	r2, #34	@ 0x22
 8000cb0:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                        Dcm_Process.txBuffer[4] = 0x11 ;
 8000cb4:	4b38      	ldr	r3, [pc, #224]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000cb6:	2211      	movs	r2, #17
 8000cb8:	f883 2405 	strb.w	r2, [r3, #1029]	@ 0x405
                break;
 8000cbc:	e392      	b.n	80013e4 <Dcm_Main+0x934>
                case CM_WRITE_DID:
                    RDID = (Dcm_Process.rxBuffer[3] << 8) | Dcm_Process.rxBuffer[4];
 8000cbe:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000cc0:	791b      	ldrb	r3, [r3, #4]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	f8a7 3482 	strh.w	r3, [r7, #1154]	@ 0x482
                    //00 05 2E F1 90 03
                    if((RDID == 0xF111) && (Dcm_Process.rxBuffer[5] == MODE_NORMAL))
 8000cd6:	f8b7 3482 	ldrh.w	r3, [r7, #1154]	@ 0x482
 8000cda:	f24f 1211 	movw	r2, #61713	@ 0xf111
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d11e      	bne.n	8000d20 <Dcm_Main+0x270>
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000ce4:	799b      	ldrb	r3, [r3, #6]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d11a      	bne.n	8000d20 <Dcm_Main+0x270>
                    {
                        //EVM Identification  Number     EVM_IDENTIFICATION     
                        //	Active EVM state Session  
                        Dcm_Process.txBuffer[0] = 0x00 ;
 8000cea:	4b2b      	ldr	r3, [pc, #172]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                        Dcm_Process.txBuffer[1] = 0x03 ;
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                        Dcm_Process.txBuffer[2] = 0x6E ;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000cfc:	226e      	movs	r2, #110	@ 0x6e
 8000cfe:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                        Dcm_Process.txBuffer[3] = 0xF1u ;
 8000d02:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d04:	22f1      	movs	r2, #241	@ 0xf1
 8000d06:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                        Dcm_Process.txBuffer[4] = 0x11 ;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d0c:	2211      	movs	r2, #17
 8000d0e:	f883 2405 	strb.w	r2, [r3, #1029]	@ 0x405
                        
                        ModeManagement.Mode = MODE_NORMAL;
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <Dcm_Main+0x2f0>)
 8000d14:	2203      	movs	r2, #3
 8000d16:	701a      	strb	r2, [r3, #0]
                        ModeManagement.ConfigSate = CONFIG_STATE_UNINIT;
 8000d18:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <Dcm_Main+0x2f0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	705a      	strb	r2, [r3, #1]
 8000d1e:	e039      	b.n	8000d94 <Dcm_Main+0x2e4>
                    }
                    else if((RDID == 0xF111) && (Dcm_Process.rxBuffer[5] == MODE_SHUTDOWN))
 8000d20:	f8b7 3482 	ldrh.w	r3, [r7, #1154]	@ 0x482
 8000d24:	f24f 1211 	movw	r2, #61713	@ 0xf111
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d11e      	bne.n	8000d6a <Dcm_Main+0x2ba>
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d2e:	799b      	ldrb	r3, [r3, #6]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d11a      	bne.n	8000d6a <Dcm_Main+0x2ba>
                    {
                        Dcm_Process.txBuffer[0] = 0x00 ;
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                        Dcm_Process.txBuffer[1] = 0x03 ;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d3e:	2203      	movs	r2, #3
 8000d40:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                        Dcm_Process.txBuffer[2] = 0x6E;
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d46:	226e      	movs	r2, #110	@ 0x6e
 8000d48:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                        Dcm_Process.txBuffer[3] = 0xF1;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d4e:	22f1      	movs	r2, #241	@ 0xf1
 8000d50:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                        Dcm_Process.txBuffer[4] = 0x11;
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d56:	2211      	movs	r2, #17
 8000d58:	f883 2405 	strb.w	r2, [r3, #1029]	@ 0x405
                        
                        ModeManagement.Mode = MODE_SHUTDOWN;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <Dcm_Main+0x2f0>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	701a      	strb	r2, [r3, #0]
                        ModeManagement.ConfigSate = CONFIG_STATE_UNINIT;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <Dcm_Main+0x2f0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	705a      	strb	r2, [r3, #1]
 8000d68:	e014      	b.n	8000d94 <Dcm_Main+0x2e4>
                    }
                    else
                    {
                        //NRC: Service Not Supported
                        Dcm_Process.txBuffer[0] = 0x00;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                        Dcm_Process.txBuffer[1] = 0x03;
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d74:	2203      	movs	r2, #3
 8000d76:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                        Dcm_Process.txBuffer[2] = 0x7F;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d7c:	227f      	movs	r2, #127	@ 0x7f
 8000d7e:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                        Dcm_Process.txBuffer[3] = 0x22;
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d84:	2222      	movs	r2, #34	@ 0x22
 8000d86:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                        Dcm_Process.txBuffer[4] = 0x11;
 8000d8a:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <Dcm_Main+0x2e8>)
 8000d8c:	2211      	movs	r2, #17
 8000d8e:	f883 2405 	strb.w	r2, [r3, #1029]	@ 0x405
                    }
                break;
 8000d92:	e32a      	b.n	80013ea <Dcm_Main+0x93a>
 8000d94:	e329      	b.n	80013ea <Dcm_Main+0x93a>
 8000d96:	bf00      	nop
 8000d98:	20000574 	.word	0x20000574
 8000d9c:	20000575 	.word	0x20000575
 8000da0:	20000d7c 	.word	0x20000d7c
                case DCM_ROUTINE_CONTROL:
                    uint32_t index = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                    uint32_t Cand_index = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
                    // 00 05 31 01 FF 00
                    routine = (Dcm_Process.rxBuffer[4] << 8) | Dcm_Process.rxBuffer[5] ;
 8000db0:	4bbb      	ldr	r3, [pc, #748]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000db2:	795b      	ldrb	r3, [r3, #5]
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	4bb9      	ldr	r3, [pc, #740]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000dbc:	799b      	ldrb	r3, [r3, #6]
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	f8a7 3480 	strh.w	r3, [r7, #1152]	@ 0x480
                    Dcm_Process.txBuffer[0] = 0x00;
 8000dc8:	4bb5      	ldr	r3, [pc, #724]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                    Dcm_Process.txBuffer[1] = 0x04;
 8000dd0:	4bb3      	ldr	r3, [pc, #716]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                    Dcm_Process.txBuffer[2] = 0x71;
 8000dd8:	4bb1      	ldr	r3, [pc, #708]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000dda:	2271      	movs	r2, #113	@ 0x71
 8000ddc:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                    Dcm_Process.txBuffer[3] = 0x01;
 8000de0:	4baf      	ldr	r3, [pc, #700]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                    Dcm_Process.txBuffer[4] = Dcm_Process.rxBuffer[4];
 8000de8:	4bad      	ldr	r3, [pc, #692]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000dea:	795a      	ldrb	r2, [r3, #5]
 8000dec:	4bac      	ldr	r3, [pc, #688]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000dee:	f883 2405 	strb.w	r2, [r3, #1029]	@ 0x405
                    Dcm_Process.txBuffer[5] = Dcm_Process.rxBuffer[5];
 8000df2:	4bab      	ldr	r3, [pc, #684]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000df4:	799a      	ldrb	r2, [r3, #6]
 8000df6:	4baa      	ldr	r3, [pc, #680]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000df8:	f883 2406 	strb.w	r2, [r3, #1030]	@ 0x406
                     if(routine == 0xFF00)
 8000dfc:	f8b7 3480 	ldrh.w	r3, [r7, #1152]	@ 0x480
 8000e00:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8000e04:	d10e      	bne.n	8000e24 <Dcm_Main+0x374>
                     {
                        //erase all data;
                        memset(CandidateVoting_Status, 0, sizeof(CandidateVoting_Status));
 8000e06:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	48a5      	ldr	r0, [pc, #660]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000e0e:	f002 fad3 	bl	80033b8 <memset>
                        //set default values
                        memcpy(CandidateVoting_Status, CandidateVoting_Status_Default, sizeof(CandidateVoting_Status_t));
 8000e12:	4aa4      	ldr	r2, [pc, #656]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000e14:	4ba4      	ldr	r3, [pc, #656]	@ (80010a8 <Dcm_Main+0x5f8>)
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2370      	movs	r3, #112	@ 0x70
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f002 fb5e 	bl	80034de <memcpy>
                        Dcm_Process.txBuffer[1] = 0x03;
                        Dcm_Process.txBuffer[2] = 0x7F;
                        Dcm_Process.txBuffer[3] = 0x31;
                        Dcm_Process.txBuffer[4] = 0x11;
                    }
                break;
 8000e22:	e2e1      	b.n	80013e8 <Dcm_Main+0x938>
                     else if (0xFF01 == routine)
 8000e24:	f8b7 3480 	ldrh.w	r3, [r7, #1152]	@ 0x480
 8000e28:	f64f 7201 	movw	r2, #65281	@ 0xff01
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	f040 8124 	bne.w	800107a <Dcm_Main+0x5ca>
                        if( Dcm_Process.rxBuffer[5] == 0xAA)
 8000e32:	4b9b      	ldr	r3, [pc, #620]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000e34:	799b      	ldrb	r3, [r3, #6]
 8000e36:	2baa      	cmp	r3, #170	@ 0xaa
 8000e38:	f040 808f 	bne.w	8000f5a <Dcm_Main+0x4aa>
                            index = 6;
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            for(int i = 0; i < NUM_CANDIDATES; i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 8000e48:	e077      	b.n	8000f3a <Dcm_Main+0x48a>
                                Dcm_Process.txBuffer[index] = strlen(CandidateVoting_Status[i].CandName);
 8000e4a:	f8d7 2488 	ldr.w	r2, [r7, #1160]	@ 0x488
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4a93      	ldr	r2, [pc, #588]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000e58:	4413      	add	r3, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9b8 	bl	80001d0 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b2d9      	uxtb	r1, r3
 8000e64:	4a8e      	ldr	r2, [pc, #568]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000e66:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 8000e70:	460a      	mov	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
                                index++;
 8000e74:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000e78:	3301      	adds	r3, #1
 8000e7a:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                                memcpy(&Dcm_Process.txBuffer[index], CandidateVoting_Status[i].CandName, strlen(CandidateVoting_Status[i].CandName));
 8000e7e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000e82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000e86:	4a86      	ldr	r2, [pc, #536]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	1c5c      	adds	r4, r3, #1
 8000e8c:	f8d7 2488 	ldr.w	r2, [r7, #1160]	@ 0x488
 8000e90:	4613      	mov	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4a82      	ldr	r2, [pc, #520]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000e9a:	189d      	adds	r5, r3, r2
 8000e9c:	f8d7 2488 	ldr.w	r2, [r7, #1160]	@ 0x488
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4a7e      	ldr	r2, [pc, #504]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff f98f 	bl	80001d0 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f002 fb10 	bl	80034de <memcpy>
                                index += strlen(CandidateVoting_Status[i].CandName);
 8000ebe:	f8d7 2488 	ldr.w	r2, [r7, #1160]	@ 0x488
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	4a76      	ldr	r2, [pc, #472]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f97e 	bl	80001d0 <strlen>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000eda:	4413      	add	r3, r2
 8000edc:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                                sprintf(ascii_array, "%lu", CandidateVoting_Status[i].votes);
 8000ee0:	4970      	ldr	r1, [pc, #448]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000ee2:	f8d7 2488 	ldr.w	r2, [r7, #1160]	@ 0x488
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	440b      	add	r3, r1
 8000ef0:	336c      	adds	r3, #108	@ 0x6c
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	496d      	ldr	r1, [pc, #436]	@ (80010ac <Dcm_Main+0x5fc>)
 8000ef8:	486d      	ldr	r0, [pc, #436]	@ (80010b0 <Dcm_Main+0x600>)
 8000efa:	f002 f963 	bl	80031c4 <siprintf>
                                memcpy(&Dcm_Process.txBuffer[index], ascii_array, strlen(ascii_array));
 8000efe:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000f06:	4a66      	ldr	r2, [pc, #408]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	1c5c      	adds	r4, r3, #1
 8000f0c:	4868      	ldr	r0, [pc, #416]	@ (80010b0 <Dcm_Main+0x600>)
 8000f0e:	f7ff f95f 	bl	80001d0 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	4966      	ldr	r1, [pc, #408]	@ (80010b0 <Dcm_Main+0x600>)
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f002 fae0 	bl	80034de <memcpy>
                                index += strlen(ascii_array);
 8000f1e:	4864      	ldr	r0, [pc, #400]	@ (80010b0 <Dcm_Main+0x600>)
 8000f20:	f7ff f956 	bl	80001d0 <strlen>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            for(int i = 0; i < NUM_CANDIDATES; i++)
 8000f30:	f8d7 3488 	ldr.w	r3, [r7, #1160]	@ 0x488
 8000f34:	3301      	adds	r3, #1
 8000f36:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 8000f3a:	f8d7 3488 	ldr.w	r3, [r7, #1160]	@ 0x488
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d983      	bls.n	8000e4a <Dcm_Main+0x39a>
                            Dcm_Process.txBuffer[1] += index;
 8000f42:	4b57      	ldr	r3, [pc, #348]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000f44:	f893 2402 	ldrb.w	r2, [r3, #1026]	@ 0x402
 8000f48:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b53      	ldr	r3, [pc, #332]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000f54:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                break;
 8000f58:	e246      	b.n	80013e8 <Dcm_Main+0x938>
                        else if((Dcm_Process.rxBuffer[5] <= NUM_CANDIDATES) && ( Dcm_Process.rxBuffer[5] > 0))
 8000f5a:	4b51      	ldr	r3, [pc, #324]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000f5c:	799b      	ldrb	r3, [r3, #6]
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	f200 8242 	bhi.w	80013e8 <Dcm_Main+0x938>
 8000f64:	4b4e      	ldr	r3, [pc, #312]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000f66:	799b      	ldrb	r3, [r3, #6]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 823d 	beq.w	80013e8 <Dcm_Main+0x938>
                            index = 6;
 8000f6e:	2306      	movs	r3, #6
 8000f70:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            uint32_t Cand_index = Dcm_Process.rxBuffer[5] ;
 8000f74:	4b4a      	ldr	r3, [pc, #296]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000f76:	799b      	ldrb	r3, [r3, #6]
 8000f78:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
                            Dcm_Process.txBuffer[index] = strlen(CandidateVoting_Status[Cand_index].CandName);
 8000f7c:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4a46      	ldr	r2, [pc, #280]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f91f 	bl	80001d0 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b2d9      	uxtb	r1, r3
 8000f96:	4a42      	ldr	r2, [pc, #264]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000f98:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
                            index++;
 8000fa6:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            memcpy(&Dcm_Process.txBuffer[index], CandidateVoting_Status[Cand_index].CandName, strlen(CandidateVoting_Status[Cand_index].CandName));
 8000fb0:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000fb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000fb8:	4a39      	ldr	r2, [pc, #228]	@ (80010a0 <Dcm_Main+0x5f0>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	1c5c      	adds	r4, r3, #1
 8000fbe:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	4a36      	ldr	r2, [pc, #216]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000fcc:	189d      	adds	r5, r3, r2
 8000fce:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000fdc:	4413      	add	r3, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8f6 	bl	80001d0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4629      	mov	r1, r5
 8000fea:	4620      	mov	r0, r4
 8000fec:	f002 fa77 	bl	80034de <memcpy>
                            index += strlen(CandidateVoting_Status[Cand_index].CandName);
 8000ff0:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4a29      	ldr	r2, [pc, #164]	@ (80010a4 <Dcm_Main+0x5f4>)
 8000ffe:	4413      	add	r3, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f8e5 	bl	80001d0 <strlen>
 8001006:	4602      	mov	r2, r0
 8001008:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800100c:	4413      	add	r3, r2
 800100e:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            sprintf(ascii_array, "%lu", CandidateVoting_Status[Cand_index].votes);
 8001012:	4924      	ldr	r1, [pc, #144]	@ (80010a4 <Dcm_Main+0x5f4>)
 8001014:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	440b      	add	r3, r1
 8001022:	336c      	adds	r3, #108	@ 0x6c
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4920      	ldr	r1, [pc, #128]	@ (80010ac <Dcm_Main+0x5fc>)
 800102a:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <Dcm_Main+0x600>)
 800102c:	f002 f8ca 	bl	80031c4 <siprintf>
                            memcpy(&Dcm_Process.txBuffer[index], ascii_array, strlen(ascii_array));
 8001030:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8001034:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001038:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <Dcm_Main+0x5f0>)
 800103a:	4413      	add	r3, r2
 800103c:	1c5c      	adds	r4, r3, #1
 800103e:	481c      	ldr	r0, [pc, #112]	@ (80010b0 <Dcm_Main+0x600>)
 8001040:	f7ff f8c6 	bl	80001d0 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4919      	ldr	r1, [pc, #100]	@ (80010b0 <Dcm_Main+0x600>)
 800104a:	4620      	mov	r0, r4
 800104c:	f002 fa47 	bl	80034de <memcpy>
                            index += strlen(ascii_array);
 8001050:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <Dcm_Main+0x600>)
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4602      	mov	r2, r0
 8001058:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800105c:	4413      	add	r3, r2
 800105e:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            Dcm_Process.txBuffer[1] += index;
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <Dcm_Main+0x5f0>)
 8001064:	f893 2402 	ldrb.w	r2, [r3, #1026]	@ 0x402
 8001068:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4413      	add	r3, r2
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <Dcm_Main+0x5f0>)
 8001074:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                break;
 8001078:	e1b6      	b.n	80013e8 <Dcm_Main+0x938>
                     else if (0xFF02 == routine)
 800107a:	f8b7 3480 	ldrh.w	r3, [r7, #1152]	@ 0x480
 800107e:	f64f 7202 	movw	r2, #65282	@ 0xff02
 8001082:	4293      	cmp	r3, r2
 8001084:	f040 8186 	bne.w	8001394 <Dcm_Main+0x8e4>
                        if( Dcm_Process.rxBuffer[5] == 0xAA)
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <Dcm_Main+0x5f0>)
 800108a:	799b      	ldrb	r3, [r3, #6]
 800108c:	2baa      	cmp	r3, #170	@ 0xaa
 800108e:	f040 80cd 	bne.w	800122c <Dcm_Main+0x77c>
                            index = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            for(int i = 0; i < NUM_CANDIDATES; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 800109e:	e0bf      	b.n	8001220 <Dcm_Main+0x770>
 80010a0:	20000574 	.word	0x20000574
 80010a4:	20000344 	.word	0x20000344
 80010a8:	20000000 	.word	0x20000000
 80010ac:	080040ac 	.word	0x080040ac
 80010b0:	20000d80 	.word	0x20000d80
                                tempbuffer[index] = strlen(CandidateVoting_Status[i].CandName);
 80010b4:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4adc      	ldr	r2, [pc, #880]	@ (8001434 <Dcm_Main+0x984>)
 80010c2:	4413      	add	r3, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f883 	bl	80001d0 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80010d2:	f2a3 421c 	subw	r2, r3, #1052	@ 0x41c
 80010d6:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
                                index++;
 80010e0:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 80010e4:	3301      	adds	r3, #1
 80010e6:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                                memcpy(&tempbuffer[index], CandidateVoting_Status[i].CandName, strlen(CandidateVoting_Status[i].CandName));
 80010ea:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80010ee:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 80010f2:	18d4      	adds	r4, r2, r3
 80010f4:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	1a9b      	subs	r3, r3, r2
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4acc      	ldr	r2, [pc, #816]	@ (8001434 <Dcm_Main+0x984>)
 8001102:	189d      	adds	r5, r3, r2
 8001104:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4ac8      	ldr	r2, [pc, #800]	@ (8001434 <Dcm_Main+0x984>)
 8001112:	4413      	add	r3, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f85b 	bl	80001d0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4629      	mov	r1, r5
 8001120:	4620      	mov	r0, r4
 8001122:	f002 f9dc 	bl	80034de <memcpy>
                                index += strlen(CandidateVoting_Status[i].CandName);
 8001126:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	1a9b      	subs	r3, r3, r2
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4ac0      	ldr	r2, [pc, #768]	@ (8001434 <Dcm_Main+0x984>)
 8001134:	4413      	add	r3, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f84a 	bl	80001d0 <strlen>
 800113c:	4602      	mov	r2, r0
 800113e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8001142:	4413      	add	r3, r2
 8001144:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                                memcpy(&tempbuffer[index], " : ", 3);
 8001148:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800114c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8001150:	4413      	add	r3, r2
 8001152:	2203      	movs	r2, #3
 8001154:	49b8      	ldr	r1, [pc, #736]	@ (8001438 <Dcm_Main+0x988>)
 8001156:	4618      	mov	r0, r3
 8001158:	f002 f9c1 	bl	80034de <memcpy>
                                index += 3;
 800115c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8001160:	3303      	adds	r3, #3
 8001162:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                                sprintf(ascii_array, "%lu", CandidateVoting_Status[i].votes);
 8001166:	49b3      	ldr	r1, [pc, #716]	@ (8001434 <Dcm_Main+0x984>)
 8001168:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	440b      	add	r3, r1
 8001176:	336c      	adds	r3, #108	@ 0x6c
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	49af      	ldr	r1, [pc, #700]	@ (800143c <Dcm_Main+0x98c>)
 800117e:	48b0      	ldr	r0, [pc, #704]	@ (8001440 <Dcm_Main+0x990>)
 8001180:	f002 f820 	bl	80031c4 <siprintf>
                                memcpy(&tempbuffer[index], ascii_array, strlen(ascii_array));
 8001184:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001188:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800118c:	18d4      	adds	r4, r2, r3
 800118e:	48ac      	ldr	r0, [pc, #688]	@ (8001440 <Dcm_Main+0x990>)
 8001190:	f7ff f81e 	bl	80001d0 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	49a9      	ldr	r1, [pc, #676]	@ (8001440 <Dcm_Main+0x990>)
 800119a:	4620      	mov	r0, r4
 800119c:	f002 f99f 	bl	80034de <memcpy>
                                index += strlen(ascii_array);
 80011a0:	48a7      	ldr	r0, [pc, #668]	@ (8001440 <Dcm_Main+0x990>)
 80011a2:	f7ff f815 	bl	80001d0 <strlen>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 80011ac:	4413      	add	r3, r2
 80011ae:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                                lcd_job_clear();
 80011b2:	f000 fb79 	bl	80018a8 <lcd_job_clear>
                                LCD_Job_t msg = {
 80011b6:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80011ba:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 80011be:	4618      	mov	r0, r3
 80011c0:	2370      	movs	r3, #112	@ 0x70
 80011c2:	461a      	mov	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	f002 f8f7 	bl	80033b8 <memset>
 80011ca:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80011ce:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80011da:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 80011de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011e2:	669a      	str	r2, [r3, #104]	@ 0x68
                                strcpy(msg.message, tempbuffer);
 80011e4:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	3301      	adds	r3, #1
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 f96d 	bl	80034ce <strcpy>
                                lcd_enqueue_job(msg);
 80011f4:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80011f8:	f2a3 448c 	subw	r4, r3, #1164	@ 0x48c
 80011fc:	4668      	mov	r0, sp
 80011fe:	f104 0310 	add.w	r3, r4, #16
 8001202:	2260      	movs	r2, #96	@ 0x60
 8001204:	4619      	mov	r1, r3
 8001206:	f002 f96a 	bl	80034de <memcpy>
 800120a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800120e:	f000 fb05 	bl	800181c <lcd_enqueue_job>
                                lcd_display_clear();
 8001212:	f000 fabb 	bl	800178c <lcd_display_clear>
                            for(int i = 0; i < NUM_CANDIDATES; i++)
 8001216:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800121a:	3301      	adds	r3, #1
 800121c:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 8001220:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8001224:	2b04      	cmp	r3, #4
 8001226:	f67f af45 	bls.w	80010b4 <Dcm_Main+0x604>
                break;
 800122a:	e0dd      	b.n	80013e8 <Dcm_Main+0x938>
                        else if((Dcm_Process.rxBuffer[5] <= NUM_CANDIDATES) && ( Dcm_Process.rxBuffer[5] > 0))
 800122c:	4b85      	ldr	r3, [pc, #532]	@ (8001444 <Dcm_Main+0x994>)
 800122e:	799b      	ldrb	r3, [r3, #6]
 8001230:	2b05      	cmp	r3, #5
 8001232:	f200 80d9 	bhi.w	80013e8 <Dcm_Main+0x938>
 8001236:	4b83      	ldr	r3, [pc, #524]	@ (8001444 <Dcm_Main+0x994>)
 8001238:	799b      	ldrb	r3, [r3, #6]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 80d4 	beq.w	80013e8 <Dcm_Main+0x938>
                            index = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            Cand_index =  Dcm_Process.rxBuffer[5] ;
 8001246:	4b7f      	ldr	r3, [pc, #508]	@ (8001444 <Dcm_Main+0x994>)
 8001248:	799b      	ldrb	r3, [r3, #6]
 800124a:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
                            tempbuffer[index] = strlen(CandidateVoting_Status[Cand_index].CandName);
 800124e:	f8d7 2478 	ldr.w	r2, [r7, #1144]	@ 0x478
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4a76      	ldr	r2, [pc, #472]	@ (8001434 <Dcm_Main+0x984>)
 800125c:	4413      	add	r3, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ffb6 	bl	80001d0 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b2d9      	uxtb	r1, r3
 8001268:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800126c:	f2a3 421c 	subw	r2, r3, #1052	@ 0x41c
 8001270:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8001274:	4413      	add	r3, r2
 8001276:	460a      	mov	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
                            index++;
 800127a:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800127e:	3301      	adds	r3, #1
 8001280:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            memcpy(&tempbuffer[index], CandidateVoting_Status[Cand_index].CandName, strlen(CandidateVoting_Status[Cand_index].CandName));
 8001284:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001288:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800128c:	18d4      	adds	r4, r2, r3
 800128e:	f8d7 2478 	ldr.w	r2, [r7, #1144]	@ 0x478
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4a66      	ldr	r2, [pc, #408]	@ (8001434 <Dcm_Main+0x984>)
 800129c:	189d      	adds	r5, r3, r2
 800129e:	f8d7 2478 	ldr.w	r2, [r7, #1144]	@ 0x478
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	4a62      	ldr	r2, [pc, #392]	@ (8001434 <Dcm_Main+0x984>)
 80012ac:	4413      	add	r3, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7fe ff8e 	bl	80001d0 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4629      	mov	r1, r5
 80012ba:	4620      	mov	r0, r4
 80012bc:	f002 f90f 	bl	80034de <memcpy>
                            index += strlen(CandidateVoting_Status[Cand_index].CandName);
 80012c0:	f8d7 2478 	ldr.w	r2, [r7, #1144]	@ 0x478
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	4a59      	ldr	r2, [pc, #356]	@ (8001434 <Dcm_Main+0x984>)
 80012ce:	4413      	add	r3, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ff7d 	bl	80001d0 <strlen>
 80012d6:	4602      	mov	r2, r0
 80012d8:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 80012dc:	4413      	add	r3, r2
 80012de:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            sprintf(ascii_array, "%lu", CandidateVoting_Status[Cand_index].votes);
 80012e2:	4954      	ldr	r1, [pc, #336]	@ (8001434 <Dcm_Main+0x984>)
 80012e4:	f8d7 2478 	ldr.w	r2, [r7, #1144]	@ 0x478
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	440b      	add	r3, r1
 80012f2:	336c      	adds	r3, #108	@ 0x6c
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4950      	ldr	r1, [pc, #320]	@ (800143c <Dcm_Main+0x98c>)
 80012fa:	4851      	ldr	r0, [pc, #324]	@ (8001440 <Dcm_Main+0x990>)
 80012fc:	f001 ff62 	bl	80031c4 <siprintf>
                            memcpy(&tempbuffer[index], ascii_array, strlen(ascii_array));
 8001300:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001304:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8001308:	18d4      	adds	r4, r2, r3
 800130a:	484d      	ldr	r0, [pc, #308]	@ (8001440 <Dcm_Main+0x990>)
 800130c:	f7fe ff60 	bl	80001d0 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	494a      	ldr	r1, [pc, #296]	@ (8001440 <Dcm_Main+0x990>)
 8001316:	4620      	mov	r0, r4
 8001318:	f002 f8e1 	bl	80034de <memcpy>
                            index += strlen(ascii_array);
 800131c:	4848      	ldr	r0, [pc, #288]	@ (8001440 <Dcm_Main+0x990>)
 800131e:	f7fe ff57 	bl	80001d0 <strlen>
 8001322:	4602      	mov	r2, r0
 8001324:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8001328:	4413      	add	r3, r2
 800132a:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
                            lcd_job_clear();
 800132e:	f000 fabb 	bl	80018a8 <lcd_job_clear>
                            LCD_Job_t msg = {
 8001332:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8001336:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 800133a:	4618      	mov	r0, r3
 800133c:	2370      	movs	r3, #112	@ 0x70
 800133e:	461a      	mov	r2, r3
 8001340:	2100      	movs	r1, #0
 8001342:	f002 f839 	bl	80033b8 <memset>
 8001346:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800134a:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8001356:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 800135a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800135e:	669a      	str	r2, [r3, #104]	@ 0x68
                            strcpy(msg.message, tempbuffer);
 8001360:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	3301      	adds	r3, #1
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f002 f8af 	bl	80034ce <strcpy>
                            lcd_enqueue_job(msg);
 8001370:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8001374:	f2a3 448c 	subw	r4, r3, #1164	@ 0x48c
 8001378:	4668      	mov	r0, sp
 800137a:	f104 0310 	add.w	r3, r4, #16
 800137e:	2260      	movs	r2, #96	@ 0x60
 8001380:	4619      	mov	r1, r3
 8001382:	f002 f8ac 	bl	80034de <memcpy>
 8001386:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800138a:	f000 fa47 	bl	800181c <lcd_enqueue_job>
                            lcd_display_clear();
 800138e:	f000 f9fd 	bl	800178c <lcd_display_clear>
                break;
 8001392:	e029      	b.n	80013e8 <Dcm_Main+0x938>
                        Dcm_Process.txBuffer[0] = 0x00;
 8001394:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <Dcm_Main+0x994>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                        Dcm_Process.txBuffer[1] = 0x03;
 800139c:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <Dcm_Main+0x994>)
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                        Dcm_Process.txBuffer[2] = 0x7F;
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <Dcm_Main+0x994>)
 80013a6:	227f      	movs	r2, #127	@ 0x7f
 80013a8:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                        Dcm_Process.txBuffer[3] = 0x31;
 80013ac:	4b25      	ldr	r3, [pc, #148]	@ (8001444 <Dcm_Main+0x994>)
 80013ae:	2231      	movs	r2, #49	@ 0x31
 80013b0:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                        Dcm_Process.txBuffer[4] = 0x11;
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <Dcm_Main+0x994>)
 80013b6:	2211      	movs	r2, #17
 80013b8:	f883 2405 	strb.w	r2, [r3, #1029]	@ 0x405
                break;
 80013bc:	e014      	b.n	80013e8 <Dcm_Main+0x938>
                case DCM_TESTER_PRESENT:
                    //send positive response
                    Dcm_Process.txBuffer[0] = 0x00;
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <Dcm_Main+0x994>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
                    Dcm_Process.txBuffer[1] = 0x02;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <Dcm_Main+0x994>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
                    Dcm_Process.txBuffer[2] = 0x7E;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <Dcm_Main+0x994>)
 80013d0:	227e      	movs	r2, #126	@ 0x7e
 80013d2:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
                    Dcm_Process.txBuffer[3] = 0x00;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <Dcm_Main+0x994>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2404 	strb.w	r2, [r3, #1028]	@ 0x404
                break;
 80013de:	e004      	b.n	80013ea <Dcm_Main+0x93a>
                default:
                break;
 80013e0:	bf00      	nop
 80013e2:	e002      	b.n	80013ea <Dcm_Main+0x93a>
                break;
 80013e4:	bf00      	nop
 80013e6:	e000      	b.n	80013ea <Dcm_Main+0x93a>
                break;
 80013e8:	bf00      	nop
            }
        Dcm_Process.state = DCM_PROCESS_TX;
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <Dcm_Main+0x994>)
 80013ec:	2204      	movs	r2, #4
 80013ee:	701a      	strb	r2, [r3, #0]
        break;
 80013f0:	e01a      	b.n	8001428 <Dcm_Main+0x978>
        case DCM_PROCESS_TX:
			Dcm_Process.txReady = true; // handle transmission in UART_Main()
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <Dcm_Main+0x994>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2802 	strb.w	r2, [r3, #2050]	@ 0x802
			Dcm_Process.rxReady = false; // reset rxReady for next operation
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <Dcm_Main+0x994>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2801 	strb.w	r2, [r3, #2049]	@ 0x801
			//Send the msg indexed by cnt in blocking mode3
			USART_SendDataIT_Response(Dcm_Process.txBuffer, ((Dcm_Process.txBuffer[0] << 8) | Dcm_Process.txBuffer[1]));
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <Dcm_Main+0x994>)
 8001404:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	4a0e      	ldr	r2, [pc, #56]	@ (8001444 <Dcm_Main+0x994>)
 800140c:	f892 2402 	ldrb.w	r2, [r2, #1026]	@ 0x402
 8001410:	4313      	orrs	r3, r2
 8001412:	4619      	mov	r1, r3
 8001414:	480c      	ldr	r0, [pc, #48]	@ (8001448 <Dcm_Main+0x998>)
 8001416:	f001 f91f 	bl	8002658 <USART_SendDataIT_Response>
			Dcm_Process.state = DCM_IDLE;
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <Dcm_Main+0x994>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
  	   break;
 8001420:	e002      	b.n	8001428 <Dcm_Main+0x978>

        
        default:
        break;
 8001422:	bf00      	nop
 8001424:	e000      	b.n	8001428 <Dcm_Main+0x978>
        break;
 8001426:	bf00      	nop
    }
}
 8001428:	bf00      	nop
 800142a:	f507 6792 	add.w	r7, r7, #1168	@ 0x490
 800142e:	46bd      	mov	sp, r7
 8001430:	bdb0      	pop	{r4, r5, r7, pc}
 8001432:	bf00      	nop
 8001434:	20000344 	.word	0x20000344
 8001438:	080040ec 	.word	0x080040ec
 800143c:	080040ac 	.word	0x080040ac
 8001440:	20000d80 	.word	0x20000d80
 8001444:	20000574 	.word	0x20000574
 8001448:	20000975 	.word	0x20000975

0800144c <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t event)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
	static uint8_t request_rx_state = REQ_RX_IDLE;
   if(event == USART_EVENT_RX_CMPLT)
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d124      	bne.n	80014a8 <USART_ApplicationEventCallback+0x5c>
   {
	    if(request_rx_state == REQ_RX_IDLE)
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <USART_ApplicationEventCallback+0x80>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d110      	bne.n	8001488 <USART_ApplicationEventCallback+0x3c>
	    {
	    	request_rx_state = REQ_RX_PCI;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <USART_ApplicationEventCallback+0x80>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
	    	//Dcm_Process.rxBuffer[2] = '\0';
	    	//uint16_t len = asciiToInt(Dcm_Process.rxBuffer);
	    	uint16_t len = ((Dcm_Process.rxBuffer[1] << 8) + Dcm_Process.rxBuffer[1]);
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <USART_ApplicationEventCallback+0x84>)
 800146e:	789b      	ldrb	r3, [r3, #2]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	4a16      	ldr	r2, [pc, #88]	@ (80014d0 <USART_ApplicationEventCallback+0x84>)
 8001476:	7892      	ldrb	r2, [r2, #2]
 8001478:	4413      	add	r3, r2
 800147a:	81fb      	strh	r3, [r7, #14]
	    	USART_ReceiveDataIT_Request(&Dcm_Process.rxBuffer[2], len);
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	4619      	mov	r1, r3
 8001480:	4814      	ldr	r0, [pc, #80]	@ (80014d4 <USART_ApplicationEventCallback+0x88>)
 8001482:	f001 f927 	bl	80026d4 <USART_ReceiveDataIT_Request>
   {
	   Dcm_Process.txReady = false;
	   Dcm_Process.rxReady = false;
	   Dcm_Process.state = DCM_IDLE;
   }
}
 8001486:	e01d      	b.n	80014c4 <USART_ApplicationEventCallback+0x78>
	    else if((request_rx_state == REQ_RX_PCI) && (Dcm_Process.state == DCM_WAITING))
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <USART_ApplicationEventCallback+0x80>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d119      	bne.n	80014c4 <USART_ApplicationEventCallback+0x78>
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <USART_ApplicationEventCallback+0x84>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d115      	bne.n	80014c4 <USART_ApplicationEventCallback+0x78>
	 	    Dcm_Process.rxReady = true;
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <USART_ApplicationEventCallback+0x84>)
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2801 	strb.w	r2, [r3, #2049]	@ 0x801
	 	   request_rx_state = REQ_RX_IDLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <USART_ApplicationEventCallback+0x80>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
}
 80014a6:	e00d      	b.n	80014c4 <USART_ApplicationEventCallback+0x78>
   }else if (event == USART_EVENT_TX_CMPLT)
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <USART_ApplicationEventCallback+0x78>
	   Dcm_Process.txReady = false;
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <USART_ApplicationEventCallback+0x84>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2802 	strb.w	r2, [r3, #2050]	@ 0x802
	   Dcm_Process.rxReady = false;
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <USART_ApplicationEventCallback+0x84>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2801 	strb.w	r2, [r3, #2049]	@ 0x801
	   Dcm_Process.state = DCM_IDLE;
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <USART_ApplicationEventCallback+0x84>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000d8a 	.word	0x20000d8a
 80014d0:	20000574 	.word	0x20000574
 80014d4:	20000577 	.word	0x20000577

080014d8 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	480c      	ldr	r0, [pc, #48]	@ (8001518 <lcd_send_command+0x40>)
 80014e8:	f000 fced 	bl	8001ec6 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2101      	movs	r1, #1
 80014f0:	4809      	ldr	r0, [pc, #36]	@ (8001518 <lcd_send_command+0x40>)
 80014f2:	f000 fce8 	bl	8001ec6 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f90d 	bl	800171c <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f906 	bl	800171c <write_4_bits>

}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40020c00 	.word	0x40020c00

0800151c <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2100      	movs	r1, #0
 800152a:	480c      	ldr	r0, [pc, #48]	@ (800155c <lcd_print_char+0x40>)
 800152c:	f000 fccb 	bl	8001ec6 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <lcd_print_char+0x40>)
 8001536:	f000 fcc6 	bl	8001ec6 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f8eb 	bl	800171c <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f8e4 	bl	800171c <write_4_bits>

}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40020c00 	.word	0x40020c00

08001560 <lcd_print_auto_wrap>:
void lcd_print_auto_wrap(const char* str)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    // Print to first line
    lcd_set_cursor(0, 0);
 8001568:	2100      	movs	r1, #0
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f918 	bl	80017a0 <lcd_set_cursor>
	mdelay(100);
 8001570:	2064      	movs	r0, #100	@ 0x64
 8001572:	f000 fa47 	bl	8001a04 <mdelay>
    int count = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]

    while (*str != '\0' && count < 16)
 800157a:	e009      	b.n	8001590 <lcd_print_auto_wrap+0x30>
    {
        lcd_print_char(*str++);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ffc9 	bl	800151c <lcd_print_char>
        count++;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
    while (*str != '\0' && count < 16)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <lcd_print_auto_wrap+0x3e>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	ddee      	ble.n	800157c <lcd_print_auto_wrap+0x1c>
    }

	mdelay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f000 fa30 	bl	8001a04 <mdelay>
    // If more characters exist, print to second line
    if (*str != '\0')
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01a      	beq.n	80015e2 <lcd_print_auto_wrap+0x82>
    {
        lcd_set_cursor(1, 0);
 80015ac:	2100      	movs	r1, #0
 80015ae:	2001      	movs	r0, #1
 80015b0:	f000 f8f6 	bl	80017a0 <lcd_set_cursor>
    	mdelay(100);
 80015b4:	2064      	movs	r0, #100	@ 0x64
 80015b6:	f000 fa25 	bl	8001a04 <mdelay>
        count = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
        while (*str && count < 16)
 80015be:	e009      	b.n	80015d4 <lcd_print_auto_wrap+0x74>
        {
            lcd_print_char(*str++);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ffa7 	bl	800151c <lcd_print_char>
            count++;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
        while (*str && count < 16)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <lcd_print_auto_wrap+0x82>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	ddee      	ble.n	80015c0 <lcd_print_auto_wrap+0x60>
        }
    }
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <lcd_init>:

}


void lcd_init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 80015f2:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <lcd_init+0x12c>)
 80015f4:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80015f6:	2301      	movs	r3, #1
 80015f8:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 80015fa:	2300      	movs	r3, #0
 80015fc:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80015fe:	2300      	movs	r3, #0
 8001600:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001602:	2300      	movs	r3, #0
 8001604:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001606:	2302      	movs	r3, #2
 8001608:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4618      	mov	r0, r3
 800160e:	f000 faa9 	bl	8001b64 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8001612:	2301      	movs	r3, #1
 8001614:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4618      	mov	r0, r3
 800161a:	f000 faa3 	bl	8001b64 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 800161e:	2302      	movs	r3, #2
 8001620:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fa9d 	bl	8001b64 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 800162a:	2303      	movs	r3, #3
 800162c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fa97 	bl	8001b64 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8001636:	2304      	movs	r3, #4
 8001638:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fa91 	bl	8001b64 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8001642:	2305      	movs	r3, #5
 8001644:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fa8b 	bl	8001b64 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 800164e:	2306      	movs	r3, #6
 8001650:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fa85 	bl	8001b64 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	482e      	ldr	r0, [pc, #184]	@ (8001718 <lcd_init+0x12c>)
 8001660:	f000 fc31 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2101      	movs	r1, #1
 8001668:	482b      	ldr	r0, [pc, #172]	@ (8001718 <lcd_init+0x12c>)
 800166a:	f000 fc2c 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	4829      	ldr	r0, [pc, #164]	@ (8001718 <lcd_init+0x12c>)
 8001674:	f000 fc27 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2103      	movs	r1, #3
 800167c:	4826      	ldr	r0, [pc, #152]	@ (8001718 <lcd_init+0x12c>)
 800167e:	f000 fc22 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2104      	movs	r1, #4
 8001686:	4824      	ldr	r0, [pc, #144]	@ (8001718 <lcd_init+0x12c>)
 8001688:	f000 fc1d 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2105      	movs	r1, #5
 8001690:	4821      	ldr	r0, [pc, #132]	@ (8001718 <lcd_init+0x12c>)
 8001692:	f000 fc18 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2106      	movs	r1, #6
 800169a:	481f      	ldr	r0, [pc, #124]	@ (8001718 <lcd_init+0x12c>)
 800169c:	f000 fc13 	bl	8001ec6 <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 80016a0:	2028      	movs	r0, #40	@ 0x28
 80016a2:	f000 f9af 	bl	8001a04 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	481b      	ldr	r0, [pc, #108]	@ (8001718 <lcd_init+0x12c>)
 80016ac:	f000 fc0b 	bl	8001ec6 <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2101      	movs	r1, #1
 80016b4:	4818      	ldr	r0, [pc, #96]	@ (8001718 <lcd_init+0x12c>)
 80016b6:	f000 fc06 	bl	8001ec6 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 80016ba:	2003      	movs	r0, #3
 80016bc:	f000 f82e 	bl	800171c <write_4_bits>

	mdelay(5);
 80016c0:	2005      	movs	r0, #5
 80016c2:	f000 f99f 	bl	8001a04 <mdelay>

	write_4_bits(0x3);
 80016c6:	2003      	movs	r0, #3
 80016c8:	f000 f828 	bl	800171c <write_4_bits>

	udelay(150);
 80016cc:	2096      	movs	r0, #150	@ 0x96
 80016ce:	f000 f9b1 	bl	8001a34 <udelay>

	write_4_bits(0x3);
 80016d2:	2003      	movs	r0, #3
 80016d4:	f000 f822 	bl	800171c <write_4_bits>
	write_4_bits(0x2);
 80016d8:	2002      	movs	r0, #2
 80016da:	f000 f81f 	bl	800171c <write_4_bits>

    // Now LCD is in 4-bit mode
    lcd_send_command(0x28); // 4-bit, 2 line, 5x8 font
 80016de:	2028      	movs	r0, #40	@ 0x28
 80016e0:	f7ff fefa 	bl	80014d8 <lcd_send_command>
	mdelay(100);
 80016e4:	2064      	movs	r0, #100	@ 0x64
 80016e6:	f000 f98d 	bl	8001a04 <mdelay>
    lcd_send_command(0x0C); // Display ON, cursor OFF
 80016ea:	200c      	movs	r0, #12
 80016ec:	f7ff fef4 	bl	80014d8 <lcd_send_command>
	mdelay(100);
 80016f0:	2064      	movs	r0, #100	@ 0x64
 80016f2:	f000 f987 	bl	8001a04 <mdelay>
    lcd_send_command(0x06); // Entry mode: increment, no shift
 80016f6:	2006      	movs	r0, #6
 80016f8:	f7ff feee 	bl	80014d8 <lcd_send_command>
	mdelay(100);
 80016fc:	2064      	movs	r0, #100	@ 0x64
 80016fe:	f000 f981 	bl	8001a04 <mdelay>
    lcd_send_command(0x01); // Clear display
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff fee8 	bl	80014d8 <lcd_send_command>
    mdelay(100);              // Wait for clear to complete
 8001708:	2064      	movs	r0, #100	@ 0x64
 800170a:	f000 f97b 	bl	8001a04 <mdelay>



}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40020c00 	.word	0x40020c00

0800171c <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	2103      	movs	r1, #3
 8001732:	4815      	ldr	r0, [pc, #84]	@ (8001788 <write_4_bits+0x6c>)
 8001734:	f000 fbc7 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	2104      	movs	r1, #4
 8001748:	480f      	ldr	r0, [pc, #60]	@ (8001788 <write_4_bits+0x6c>)
 800174a:	f000 fbbc 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	2105      	movs	r1, #5
 800175e:	480a      	ldr	r0, [pc, #40]	@ (8001788 <write_4_bits+0x6c>)
 8001760:	f000 fbb1 	bl	8001ec6 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	2106      	movs	r1, #6
 8001774:	4804      	ldr	r0, [pc, #16]	@ (8001788 <write_4_bits+0x6c>)
 8001776:	f000 fba6 	bl	8001ec6 <GPIO_WriteToOutputPin>

	lcd_enable();
 800177a:	f000 f82d 	bl	80017d8 <lcd_enable>

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40020c00 	.word	0x40020c00

0800178c <lcd_display_clear>:

void lcd_display_clear(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fea1 	bl	80014d8 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 8001796:	2002      	movs	r0, #2
 8001798:	f000 f934 	bl	8001a04 <mdelay>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	460a      	mov	r2, r1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? (0x00 + column) : (0x40 + column);
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <lcd_set_cursor+0x1e>
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	3340      	adds	r3, #64	@ 0x40
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	e000      	b.n	80017c0 <lcd_set_cursor+0x20>
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	73fb      	strb	r3, [r7, #15]
    lcd_send_command(0x80 | address);
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fe84 	bl	80014d8 <lcd_send_command>
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <lcd_enable>:




static void lcd_enable(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2102      	movs	r1, #2
 80017e0:	4807      	ldr	r0, [pc, #28]	@ (8001800 <lcd_enable+0x28>)
 80017e2:	f000 fb70 	bl	8001ec6 <GPIO_WriteToOutputPin>
	udelay(10);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f000 f924 	bl	8001a34 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2102      	movs	r1, #2
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <lcd_enable+0x28>)
 80017f2:	f000 fb68 	bl	8001ec6 <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 80017f6:	2064      	movs	r0, #100	@ 0x64
 80017f8:	f000 f91c 	bl	8001a34 <udelay>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020c00 	.word	0x40020c00

08001804 <lcd_queue_size>:
uint8_t lcd_queue_size(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	return LCD_JobQueue.count;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <lcd_queue_size+0x14>)
 800180a:	f893 3462 	ldrb.w	r3, [r3, #1122]	@ 0x462
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000d8c 	.word	0x20000d8c

0800181c <lcd_enqueue_job>:
uint8_t lcd_enqueue_job(LCD_Job_t job)
{
 800181c:	b084      	sub	sp, #16
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
 8001822:	f107 0c08 	add.w	ip, r7, #8
 8001826:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(LCD_JobQueue.count >= LCD_JOB_QUEUE_SIZE)
 800182a:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <lcd_enqueue_job+0x84>)
 800182c:	f893 3462 	ldrb.w	r3, [r3, #1122]	@ 0x462
 8001830:	2b09      	cmp	r3, #9
 8001832:	d901      	bls.n	8001838 <lcd_enqueue_job+0x1c>
		return 0;
 8001834:	2300      	movs	r3, #0
 8001836:	e02c      	b.n	8001892 <lcd_enqueue_job+0x76>

	LCD_JobQueue.jobs[LCD_JobQueue.tail] = job;
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <lcd_enqueue_job+0x84>)
 800183a:	f893 3461 	ldrb.w	r3, [r3, #1121]	@ 0x461
 800183e:	4619      	mov	r1, r3
 8001840:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <lcd_enqueue_job+0x84>)
 8001842:	460b      	mov	r3, r1
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	1a5b      	subs	r3, r3, r1
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2270      	movs	r2, #112	@ 0x70
 8001854:	4619      	mov	r1, r3
 8001856:	f001 fe42 	bl	80034de <memcpy>
	LCD_JobQueue.count++;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <lcd_enqueue_job+0x84>)
 800185c:	f893 3462 	ldrb.w	r3, [r3, #1122]	@ 0x462
 8001860:	3301      	adds	r3, #1
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <lcd_enqueue_job+0x84>)
 8001866:	f883 2462 	strb.w	r2, [r3, #1122]	@ 0x462
	LCD_JobQueue.tail = (LCD_JobQueue.tail + 1) % LCD_JOB_QUEUE_SIZE;
 800186a:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <lcd_enqueue_job+0x84>)
 800186c:	f893 3461 	ldrb.w	r3, [r3, #1121]	@ 0x461
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <lcd_enqueue_job+0x88>)
 8001874:	fb83 1302 	smull	r1, r3, r3, r2
 8001878:	1099      	asrs	r1, r3, #2
 800187a:	17d3      	asrs	r3, r2, #31
 800187c:	1ac9      	subs	r1, r1, r3
 800187e:	460b      	mov	r3, r1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	1ad1      	subs	r1, r2, r3
 8001888:	b2ca      	uxtb	r2, r1
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <lcd_enqueue_job+0x84>)
 800188c:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
	return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800189a:	b004      	add	sp, #16
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000d8c 	.word	0x20000d8c
 80018a4:	66666667 	.word	0x66666667

080018a8 <lcd_job_clear>:
void lcd_job_clear()
{	
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	memset(&LCD_JobQueue, 0, sizeof(LCD_JobQueue));
 80018ac:	f240 4264 	movw	r2, #1124	@ 0x464
 80018b0:	2100      	movs	r1, #0
 80018b2:	4802      	ldr	r0, [pc, #8]	@ (80018bc <lcd_job_clear+0x14>)
 80018b4:	f001 fd80 	bl	80033b8 <memset>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000d8c 	.word	0x20000d8c

080018c0 <lcd_process_jobs>:
void lcd_process_jobs(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    static LCD_Job_t *activeJob = NULL;
    static uint32_t lastTick = 0;
    static uint32_t os_time_tick = 0;
    static uint8_t scrollIndex = 0;

    os_time_tick = os_timer_get_tick();
 80018c4:	f000 fd50 	bl	8002368 <os_timer_get_tick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a48      	ldr	r2, [pc, #288]	@ (80019ec <lcd_process_jobs+0x12c>)
 80018cc:	6013      	str	r3, [r2, #0]
    if((LCD_JobQueue.count != 0) && (!activeJob))
 80018ce:	4b48      	ldr	r3, [pc, #288]	@ (80019f0 <lcd_process_jobs+0x130>)
 80018d0:	f893 3462 	ldrb.w	r3, [r3, #1122]	@ 0x462
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d02e      	beq.n	8001936 <lcd_process_jobs+0x76>
 80018d8:	4b46      	ldr	r3, [pc, #280]	@ (80019f4 <lcd_process_jobs+0x134>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d12a      	bne.n	8001936 <lcd_process_jobs+0x76>
	{
    	activeJob = &LCD_JobQueue.jobs[LCD_JobQueue.head];
 80018e0:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <lcd_process_jobs+0x130>)
 80018e2:	f893 3460 	ldrb.w	r3, [r3, #1120]	@ 0x460
 80018e6:	461a      	mov	r2, r3
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4a3f      	ldr	r2, [pc, #252]	@ (80019f0 <lcd_process_jobs+0x130>)
 80018f2:	4413      	add	r3, r2
 80018f4:	4a3f      	ldr	r2, [pc, #252]	@ (80019f4 <lcd_process_jobs+0x134>)
 80018f6:	6013      	str	r3, [r2, #0]
    	LCD_JobQueue.head = (LCD_JobQueue.head + 1) % LCD_JOB_QUEUE_SIZE;
 80018f8:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <lcd_process_jobs+0x130>)
 80018fa:	f893 3460 	ldrb.w	r3, [r3, #1120]	@ 0x460
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <lcd_process_jobs+0x138>)
 8001902:	fb83 1302 	smull	r1, r3, r3, r2
 8001906:	1099      	asrs	r1, r3, #2
 8001908:	17d3      	asrs	r3, r2, #31
 800190a:	1ac9      	subs	r1, r1, r3
 800190c:	460b      	mov	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	1ad1      	subs	r1, r2, r3
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	4b35      	ldr	r3, [pc, #212]	@ (80019f0 <lcd_process_jobs+0x130>)
 800191a:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
    	LCD_JobQueue.count--;
 800191e:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <lcd_process_jobs+0x130>)
 8001920:	f893 3462 	ldrb.w	r3, [r3, #1122]	@ 0x462
 8001924:	3b01      	subs	r3, #1
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <lcd_process_jobs+0x130>)
 800192a:	f883 2462 	strb.w	r2, [r3, #1122]	@ 0x462
    	lastTick = os_time_tick;
 800192e:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <lcd_process_jobs+0x12c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a32      	ldr	r2, [pc, #200]	@ (80019fc <lcd_process_jobs+0x13c>)
 8001934:	6013      	str	r3, [r2, #0]
	}

    switch(activeJob->type)
 8001936:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <lcd_process_jobs+0x134>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d048      	beq.n	80019d2 <lcd_process_jobs+0x112>
 8001940:	2b02      	cmp	r3, #2
 8001942:	dc50      	bgt.n	80019e6 <lcd_process_jobs+0x126>
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <lcd_process_jobs+0x8e>
 8001948:	2b01      	cmp	r3, #1
 800194a:	d017      	beq.n	800197c <lcd_process_jobs+0xbc>
    	case LCD_JOB_CONSTANT:
    		lcd_print_auto_wrap(activeJob->message);
			activeJob = 0;
    	break;
    	default:
    		break;
 800194c:	e04b      	b.n	80019e6 <lcd_process_jobs+0x126>
    		if((os_time_tick - lastTick) < activeJob->duration_ms)
 800194e:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <lcd_process_jobs+0x12c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <lcd_process_jobs+0x13c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	1ad2      	subs	r2, r2, r3
 8001958:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <lcd_process_jobs+0x134>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800195e:	429a      	cmp	r2, r3
 8001960:	d206      	bcs.n	8001970 <lcd_process_jobs+0xb0>
        		lcd_print_auto_wrap(activeJob->message);
 8001962:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <lcd_process_jobs+0x134>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fdf9 	bl	8001560 <lcd_print_auto_wrap>
    	break;
 800196e:	e03b      	b.n	80019e8 <lcd_process_jobs+0x128>
    			activeJob = 0;
 8001970:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <lcd_process_jobs+0x134>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
    			lcd_display_clear();
 8001976:	f7ff ff09 	bl	800178c <lcd_display_clear>
    	break;
 800197a:	e035      	b.n	80019e8 <lcd_process_jobs+0x128>
    		if((os_time_tick - lastTick) < activeJob->duration_ms)
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <lcd_process_jobs+0x12c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <lcd_process_jobs+0x13c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <lcd_process_jobs+0x134>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800198c:	429a      	cmp	r2, r3
 800198e:	d209      	bcs.n	80019a4 <lcd_process_jobs+0xe4>
    			lcd_print_auto_wrap(&activeJob->message[scrollIndex]);
 8001990:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <lcd_process_jobs+0x134>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1a      	ldr	r2, [pc, #104]	@ (8001a00 <lcd_process_jobs+0x140>)
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	4413      	add	r3, r2
 800199a:	3301      	adds	r3, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fddf 	bl	8001560 <lcd_print_auto_wrap>
    	break;
 80019a2:	e021      	b.n	80019e8 <lcd_process_jobs+0x128>
    			scrollIndex++;
 80019a4:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <lcd_process_jobs+0x140>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <lcd_process_jobs+0x140>)
 80019ae:	701a      	strb	r2, [r3, #0]
    			if(scrollIndex < 16)
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <lcd_process_jobs+0x140>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d803      	bhi.n	80019c0 <lcd_process_jobs+0x100>
    				lastTick = 0;
 80019b8:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <lcd_process_jobs+0x13c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    	break;
 80019be:	e013      	b.n	80019e8 <lcd_process_jobs+0x128>
    				scrollIndex = 0;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <lcd_process_jobs+0x140>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
        			activeJob = 0;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <lcd_process_jobs+0x134>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
        			lcd_display_clear();
 80019cc:	f7ff fede 	bl	800178c <lcd_display_clear>
    	break;
 80019d0:	e00a      	b.n	80019e8 <lcd_process_jobs+0x128>
    		lcd_print_auto_wrap(activeJob->message);
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <lcd_process_jobs+0x134>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fdc1 	bl	8001560 <lcd_print_auto_wrap>
			activeJob = 0;
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <lcd_process_jobs+0x134>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
    	break;
 80019e4:	e000      	b.n	80019e8 <lcd_process_jobs+0x128>
    		break;
 80019e6:	bf00      	nop
    }

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200011f0 	.word	0x200011f0
 80019f0:	20000d8c 	.word	0x20000d8c
 80019f4:	200011f4 	.word	0x200011f4
 80019f8:	66666667 	.word	0x66666667
 80019fc:	200011f8 	.word	0x200011f8
 8001a00:	200011fc 	.word	0x200011fc

08001a04 <mdelay>:
static void mdelay(uint32_t cnt)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e002      	b.n	8001a18 <mdelay+0x14>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3f4      	bcc.n	8001a12 <mdelay+0xe>
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <udelay>:

static void udelay(uint32_t cnt)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e002      	b.n	8001a48 <udelay+0x14>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3f8      	bcc.n	8001a42 <udelay+0xe>
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d161      	bne.n	8001b32 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a32      	ldr	r2, [pc, #200]	@ (8001b3c <GPIO_PeriClockControl+0xe0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d106      	bne.n	8001a84 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8001a76:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a31      	ldr	r2, [pc, #196]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
        
	}

}
 8001a82:	e056      	b.n	8001b32 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOB)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a2f      	ldr	r2, [pc, #188]	@ (8001b44 <GPIO_PeriClockControl+0xe8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d106      	bne.n	8001a9a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	4a2b      	ldr	r2, [pc, #172]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a98:	e04b      	b.n	8001b32 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOC)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b48 <GPIO_PeriClockControl+0xec>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d106      	bne.n	8001ab0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a26      	ldr	r2, [pc, #152]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001aae:	e040      	b.n	8001b32 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOD)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a26      	ldr	r2, [pc, #152]	@ (8001b4c <GPIO_PeriClockControl+0xf0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d106      	bne.n	8001ac6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8001ab8:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	4a20      	ldr	r2, [pc, #128]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001ac4:	e035      	b.n	8001b32 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a21      	ldr	r2, [pc, #132]	@ (8001b50 <GPIO_PeriClockControl+0xf4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d106      	bne.n	8001adc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001ada:	e02a      	b.n	8001b32 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a1d      	ldr	r2, [pc, #116]	@ (8001b54 <GPIO_PeriClockControl+0xf8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d106      	bne.n	8001af2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001aea:	f043 0320 	orr.w	r3, r3, #32
 8001aee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001af0:	e01f      	b.n	8001b32 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOG)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <GPIO_PeriClockControl+0xfc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d106      	bne.n	8001b08 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001b06:	e014      	b.n	8001b32 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOH)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <GPIO_PeriClockControl+0x100>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d106      	bne.n	8001b1e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b14:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b1a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001b1c:	e009      	b.n	8001b32 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0f      	ldr	r2, [pc, #60]	@ (8001b60 <GPIO_PeriClockControl+0x104>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d105      	bne.n	8001b32 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <GPIO_PeriClockControl+0xe4>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40021400 	.word	0x40021400
 8001b58:	40021800 	.word	0x40021800
 8001b5c:	40021c00 	.word	0x40021c00
 8001b60:	40022000 	.word	0x40022000

08001b64 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff70 	bl	8001a5c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	795b      	ldrb	r3, [r3, #5]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d820      	bhi.n	8001bc6 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	795b      	ldrb	r3, [r3, #5]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	791b      	ldrb	r3, [r3, #4]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2103      	movs	r1, #3
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e0cb      	b.n	8001d5e <GPIO_Init+0x1fa>

	}else
	{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	795b      	ldrb	r3, [r3, #5]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d117      	bne.n	8001bfe <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001bce:	4b4b      	ldr	r3, [pc, #300]	@ (8001cfc <GPIO_Init+0x198>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	7912      	ldrb	r2, [r2, #4]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	2201      	movs	r2, #1
 8001bda:	408a      	lsls	r2, r1
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4a47      	ldr	r2, [pc, #284]	@ (8001cfc <GPIO_Init+0x198>)
 8001be0:	430b      	orrs	r3, r1
 8001be2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001be4:	4b45      	ldr	r3, [pc, #276]	@ (8001cfc <GPIO_Init+0x198>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	7912      	ldrb	r2, [r2, #4]
 8001bec:	4611      	mov	r1, r2
 8001bee:	2201      	movs	r2, #1
 8001bf0:	408a      	lsls	r2, r1
 8001bf2:	43d2      	mvns	r2, r2
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4a41      	ldr	r2, [pc, #260]	@ (8001cfc <GPIO_Init+0x198>)
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	6093      	str	r3, [r2, #8]
 8001bfc:	e035      	b.n	8001c6a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	795b      	ldrb	r3, [r3, #5]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d117      	bne.n	8001c36 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c06:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <GPIO_Init+0x198>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	7912      	ldrb	r2, [r2, #4]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	2201      	movs	r2, #1
 8001c12:	408a      	lsls	r2, r1
 8001c14:	4611      	mov	r1, r2
 8001c16:	4a39      	ldr	r2, [pc, #228]	@ (8001cfc <GPIO_Init+0x198>)
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c1c:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <GPIO_Init+0x198>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	7912      	ldrb	r2, [r2, #4]
 8001c24:	4611      	mov	r1, r2
 8001c26:	2201      	movs	r2, #1
 8001c28:	408a      	lsls	r2, r1
 8001c2a:	43d2      	mvns	r2, r2
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4a33      	ldr	r2, [pc, #204]	@ (8001cfc <GPIO_Init+0x198>)
 8001c30:	400b      	ands	r3, r1
 8001c32:	60d3      	str	r3, [r2, #12]
 8001c34:	e019      	b.n	8001c6a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	795b      	ldrb	r3, [r3, #5]
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d115      	bne.n	8001c6a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <GPIO_Init+0x198>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	7912      	ldrb	r2, [r2, #4]
 8001c46:	4611      	mov	r1, r2
 8001c48:	2201      	movs	r2, #1
 8001c4a:	408a      	lsls	r2, r1
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cfc <GPIO_Init+0x198>)
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c54:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <GPIO_Init+0x198>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	7912      	ldrb	r2, [r2, #4]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	2201      	movs	r2, #1
 8001c60:	408a      	lsls	r2, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	4a25      	ldr	r2, [pc, #148]	@ (8001cfc <GPIO_Init+0x198>)
 8001c66:	430b      	orrs	r3, r1
 8001c68:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	791b      	ldrb	r3, [r3, #4]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	791b      	ldrb	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1f      	ldr	r2, [pc, #124]	@ (8001d00 <GPIO_Init+0x19c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d04e      	beq.n	8001d24 <GPIO_Init+0x1c0>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <GPIO_Init+0x1a0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d032      	beq.n	8001cf6 <GPIO_Init+0x192>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1c      	ldr	r2, [pc, #112]	@ (8001d08 <GPIO_Init+0x1a4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d02b      	beq.n	8001cf2 <GPIO_Init+0x18e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <GPIO_Init+0x1a8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d024      	beq.n	8001cee <GPIO_Init+0x18a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <GPIO_Init+0x1ac>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01d      	beq.n	8001cea <GPIO_Init+0x186>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a18      	ldr	r2, [pc, #96]	@ (8001d14 <GPIO_Init+0x1b0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d016      	beq.n	8001ce6 <GPIO_Init+0x182>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <GPIO_Init+0x1b4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00f      	beq.n	8001ce2 <GPIO_Init+0x17e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a15      	ldr	r2, [pc, #84]	@ (8001d1c <GPIO_Init+0x1b8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d008      	beq.n	8001cde <GPIO_Init+0x17a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a13      	ldr	r2, [pc, #76]	@ (8001d20 <GPIO_Init+0x1bc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <GPIO_Init+0x176>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	e025      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e023      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e021      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e01f      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e01d      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e01b      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e019      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e017      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e015      	b.n	8001d26 <GPIO_Init+0x1c2>
 8001cfa:	bf00      	nop
 8001cfc:	40013c00 	.word	0x40013c00
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40020400 	.word	0x40020400
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40021400 	.word	0x40021400
 8001d18:	40021800 	.word	0x40021800
 8001d1c:	40021c00 	.word	0x40021c00
 8001d20:	40022000 	.word	0x40022000
 8001d24:	2300      	movs	r3, #0
 8001d26:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001d28:	4b59      	ldr	r3, [pc, #356]	@ (8001e90 <GPIO_Init+0x32c>)
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	4a58      	ldr	r2, [pc, #352]	@ (8001e90 <GPIO_Init+0x32c>)
 8001d2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d32:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8001d34:	7c7a      	ldrb	r2, [r7, #17]
 8001d36:	7cbb      	ldrb	r3, [r7, #18]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	fa02 f103 	lsl.w	r1, r2, r3
 8001d3e:	4a55      	ldr	r2, [pc, #340]	@ (8001e94 <GPIO_Init+0x330>)
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	3302      	adds	r3, #2
 8001d44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8001d48:	4b53      	ldr	r3, [pc, #332]	@ (8001e98 <GPIO_Init+0x334>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	7912      	ldrb	r2, [r2, #4]
 8001d50:	4611      	mov	r1, r2
 8001d52:	2201      	movs	r2, #1
 8001d54:	408a      	lsls	r2, r1
 8001d56:	4611      	mov	r1, r2
 8001d58:	4a4f      	ldr	r2, [pc, #316]	@ (8001e98 <GPIO_Init+0x334>)
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	799b      	ldrb	r3, [r3, #6]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	791b      	ldrb	r3, [r3, #4]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	791b      	ldrb	r3, [r3, #4]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	4619      	mov	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	79db      	ldrb	r3, [r3, #7]
 8001da2:	461a      	mov	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	791b      	ldrb	r3, [r3, #4]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	400a      	ands	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68d9      	ldr	r1, [r3, #12]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7a1b      	ldrb	r3, [r3, #8]
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	791b      	ldrb	r3, [r3, #4]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	408b      	lsls	r3, r1
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	4619      	mov	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	400a      	ands	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality if necessary
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	795b      	ldrb	r3, [r3, #5]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d131      	bne.n	8001e86 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	791b      	ldrb	r3, [r3, #4]
 8001e26:	08db      	lsrs	r3, r3, #3
 8001e28:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	791b      	ldrb	r3, [r3, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	7c3a      	ldrb	r2, [r7, #16]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	7c3a      	ldrb	r2, [r7, #16]
 8001e54:	4001      	ands	r1, r0
 8001e56:	3208      	adds	r2, #8
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	7c3a      	ldrb	r2, [r7, #16]
 8001e62:	3208      	adds	r2, #8
 8001e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7a5b      	ldrb	r3, [r3, #9]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	7c3a      	ldrb	r2, [r7, #16]
 8001e7e:	4301      	orrs	r1, r0
 8001e80:	3208      	adds	r2, #8
 8001e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <GPIO_ReadFromInputPin>:
	}

}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]

   return value;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <GPIO_WriteToOutputPin>:
	return value;
}


void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8001ed6:	78bb      	ldrb	r3, [r7, #2]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d109      	bne.n	8001ef0 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8001eee:	e009      	b.n	8001f04 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	43d2      	mvns	r2, r2
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	615a      	str	r2, [r3, #20]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
	...

08001f10 <GPIO_IRQInterruptConfig>:
	pGPIOx->ODR  ^= ( 1 << PinNumber);
}

//NVIC configuration
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d133      	bne.n	8001f8e <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b1f      	cmp	r3, #31
 8001f2a:	d80a      	bhi.n	8001f42 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8001f2c:	4b34      	ldr	r3, [pc, #208]	@ (8002000 <GPIO_IRQInterruptConfig+0xf0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	79fa      	ldrb	r2, [r7, #7]
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4a31      	ldr	r2, [pc, #196]	@ (8002000 <GPIO_IRQInterruptConfig+0xf0>)
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8001f40:	e059      	b.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b1f      	cmp	r3, #31
 8001f46:	d90f      	bls.n	8001f68 <GPIO_IRQInterruptConfig+0x58>
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f4c:	d80c      	bhi.n	8001f68 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <GPIO_IRQInterruptConfig+0xf4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	f002 021f 	and.w	r2, r2, #31
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4a28      	ldr	r2, [pc, #160]	@ (8002004 <GPIO_IRQInterruptConfig+0xf4>)
 8001f62:	430b      	orrs	r3, r1
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e046      	b.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f6c:	d943      	bls.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b5f      	cmp	r3, #95	@ 0x5f
 8001f72:	d840      	bhi.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8001f74:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <GPIO_IRQInterruptConfig+0xf8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4a20      	ldr	r2, [pc, #128]	@ (8002008 <GPIO_IRQInterruptConfig+0xf8>)
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	e033      	b.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b1f      	cmp	r3, #31
 8001f92:	d80a      	bhi.n	8001faa <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <GPIO_IRQInterruptConfig+0xfc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800200c <GPIO_IRQInterruptConfig+0xfc>)
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	e025      	b.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b1f      	cmp	r3, #31
 8001fae:	d90f      	bls.n	8001fd0 <GPIO_IRQInterruptConfig+0xc0>
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fb4:	d80c      	bhi.n	8001fd0 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8001fb6:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <GPIO_IRQInterruptConfig+0x100>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	79fa      	ldrb	r2, [r7, #7]
 8001fbc:	f002 021f 	and.w	r2, r2, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4a11      	ldr	r2, [pc, #68]	@ (8002010 <GPIO_IRQInterruptConfig+0x100>)
 8001fca:	430b      	orrs	r3, r1
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e012      	b.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fd4:	d90f      	bls.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b5f      	cmp	r3, #95	@ 0x5f
 8001fda:	d80c      	bhi.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <GPIO_IRQInterruptConfig+0x104>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	4611      	mov	r1, r2
 8001fee:	4a09      	ldr	r2, [pc, #36]	@ (8002014 <GPIO_IRQInterruptConfig+0x104>)
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	e7ff      	b.n	8001ff6 <GPIO_IRQInterruptConfig+0xe6>
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000e104 	.word	0xe000e104
 8002008:	e000e108 	.word	0xe000e108
 800200c:	e000e180 	.word	0xe000e180
 8002010:	e000e184 	.word	0xe000e184
 8002014:	e000e188 	.word	0xe000e188

08002018 <GPIO_IRQHandling>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber))
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <GPIO_IRQHandling+0x3c>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	79fa      	ldrb	r2, [r7, #7]
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <GPIO_IRQHandling+0x3c>)
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4611      	mov	r1, r2
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <GPIO_IRQHandling+0x3c>)
 8002044:	430b      	orrs	r3, r1
 8002046:	6153      	str	r3, [r2, #20]
	}

}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40013c00 	.word	0x40013c00

08002058 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800205e:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <RCC_GetPCLK1Value+0x9c>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 800206c:	7a7b      	ldrb	r3, [r7, #9]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8002072:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <RCC_GetPCLK1Value+0xa0>)
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e00b      	b.n	8002090 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8002078:	7a7b      	ldrb	r3, [r7, #9]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800207e:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <RCC_GetPCLK1Value+0xa4>)
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e005      	b.n	8002090 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8002084:	7a7b      	ldrb	r3, [r7, #9]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d102      	bne.n	8002090 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800208a:	f000 f88d 	bl	80021a8 <RCC_GetPLLOutputClock>
 800208e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <RCC_GetPCLK1Value+0x9c>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800209e:	7a3b      	ldrb	r3, [r7, #8]
 80020a0:	2b07      	cmp	r3, #7
 80020a2:	d802      	bhi.n	80020aa <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	72fb      	strb	r3, [r7, #11]
 80020a8:	e005      	b.n	80020b6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80020aa:	7a3b      	ldrb	r3, [r7, #8]
 80020ac:	3b08      	subs	r3, #8
 80020ae:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <RCC_GetPCLK1Value+0xa8>)
 80020b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020b4:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <RCC_GetPCLK1Value+0x9c>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0a9b      	lsrs	r3, r3, #10
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80020c4:	7a3b      	ldrb	r3, [r7, #8]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d802      	bhi.n	80020d0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	72bb      	strb	r3, [r7, #10]
 80020ce:	e004      	b.n	80020da <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80020d0:	7a3b      	ldrb	r3, [r7, #8]
 80020d2:	3b04      	subs	r3, #4
 80020d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <RCC_GetPCLK1Value+0xac>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e2:	7abb      	ldrb	r3, [r7, #10]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80020ea:	687b      	ldr	r3, [r7, #4]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	20000290 	.word	0x20000290
 8002104:	200002a0 	.word	0x200002a0

08002108 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <RCC_GetPCLK2Value+0x8c>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8002120:	7a7b      	ldrb	r3, [r7, #9]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8002126:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <RCC_GetPCLK2Value+0x90>)
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e001      	b.n	8002130 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 800212c:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <RCC_GetPCLK2Value+0x94>)
 800212e:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <RCC_GetPCLK2Value+0x8c>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b07      	cmp	r3, #7
 8002140:	d802      	bhi.n	8002148 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	72fb      	strb	r3, [r7, #11]
 8002146:	e005      	b.n	8002154 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b08      	subs	r3, #8
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <RCC_GetPCLK2Value+0x98>)
 800214e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002152:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <RCC_GetPCLK2Value+0x8c>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	0b5b      	lsrs	r3, r3, #13
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d802      	bhi.n	800216c <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8002166:	2301      	movs	r3, #1
 8002168:	72bb      	strb	r3, [r7, #10]
 800216a:	e004      	b.n	8002176 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b04      	subs	r3, #4
 8002170:	4a0c      	ldr	r2, [pc, #48]	@ (80021a4 <RCC_GetPCLK2Value+0x9c>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8002176:	7afb      	ldrb	r3, [r7, #11]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	fbb2 f2f3 	udiv	r2, r2, r3
 800217e:	7abb      	ldrb	r3, [r7, #10]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	603b      	str	r3, [r7, #0]

	return pclk2;
 8002186:	683b      	ldr	r3, [r7, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	20000290 	.word	0x20000290
 80021a4:	200002a0 	.word	0x200002a0

080021a8 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

	return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <timer_init>:
static volatile uint32_t delay_counter = 0;
static void TIM2_IRQHandler_Handler();
volatile uint32_t os_tick_count = 0;

void timer_init(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
	timer2_init();
 80021ba:	f000 f805 	bl	80021c8 <timer2_init>
    timer3_os_tick_init();
 80021be:	f000 f89d 	bl	80022fc <timer3_os_tick_init>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <timer2_init>:
void timer2_init(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <timer2_init+0x74>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	4a1a      	ldr	r2, [pc, #104]	@ (800223c <timer2_init+0x74>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6413      	str	r3, [r2, #64]	@ 0x40

    TIM2->CR1 = 0;
 80021d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
    TIM2->PSC = 16000 - 1;       // 1 ms tick
 80021e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021e4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80021e8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1;             // Count to 1000 → 1 second
 80021ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021ee:	2201      	movs	r2, #1
 80021f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;
 80021f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->EGR |= 1;              // Force update, apply ARR/PSC immediately
 80021fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6153      	str	r3, [r2, #20]

    TIM2->SR &= ~TIM_SR_UIF;     // Clear update flag
 800220a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6113      	str	r3, [r2, #16]
    TIM2->DIER |= TIM_DIER_UIE;  // Enable update interrupt
 800221a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 800222a:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <timer2_init+0x78>)
 800222c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	e000e100 	.word	0xe000e100

08002244 <timer2_delay_ms>:


void timer2_delay_ms(uint32_t ms)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    delay_counter = ms;
 800224c:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <timer2_delay_ms+0x30>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]

    // Start the timer
    TIM2->CNT = 0;
 8002252:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->CR1 |= TIM_CR1_CEN;
 800225a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6013      	str	r3, [r2, #0]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20001200 	.word	0x20001200

08002278 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
    TIM2_IRQHandler_Handler();
 800227c:	f000 f802 	bl	8002284 <TIM2_IRQHandler_Handler>
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <TIM2_IRQHandler_Handler>:
uint8_t delay_done;
void TIM2_IRQHandler_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8002288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01f      	beq.n	80022d6 <TIM2_IRQHandler_Handler+0x52>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 8002296:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	6113      	str	r3, [r2, #16]

        if (delay_counter > 0)
 80022a6:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <TIM2_IRQHandler_Handler+0x5c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d013      	beq.n	80022d6 <TIM2_IRQHandler_Handler+0x52>
        {
            delay_counter--;
 80022ae:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <TIM2_IRQHandler_Handler+0x5c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <TIM2_IRQHandler_Handler+0x5c>)
 80022b6:	6013      	str	r3, [r2, #0]

            if (delay_counter == 0)
 80022b8:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <TIM2_IRQHandler_Handler+0x5c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <TIM2_IRQHandler_Handler+0x52>
            {
                TIM2->CR1 &= ~TIM_CR1_CEN;
 80022c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]
                delay_done = 1; // Signal that delay is over
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <TIM2_IRQHandler_Handler+0x60>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20001200 	.word	0x20001200
 80022e4:	20001208 	.word	0x20001208

080022e8 <is_timer2_delay_elapsed>:

uint8_t is_timer2_delay_elapsed(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	return delay_done;
 80022ec:	4b02      	ldr	r3, [pc, #8]	@ (80022f8 <is_timer2_delay_elapsed+0x10>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20001208 	.word	0x20001208

080022fc <timer3_os_tick_init>:




void timer3_os_tick_init(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
    // 1. Enable TIM3 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002300:	4b16      	ldr	r3, [pc, #88]	@ (800235c <timer3_os_tick_init+0x60>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	4a15      	ldr	r2, [pc, #84]	@ (800235c <timer3_os_tick_init+0x60>)
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	6413      	str	r3, [r2, #64]	@ 0x40

    // 2. Disable timer before configuration
    TIM3->CR1 = 0;
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <timer3_os_tick_init+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

    // 3. Set prescaler and ARR for 1ms tick (assuming 16MHz clock)
    TIM3->PSC = 16000 - 1;  // 1 tick = 1ms
 8002312:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <timer3_os_tick_init+0x64>)
 8002314:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002318:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1;          // Overflow every 1 tick
 800231a:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <timer3_os_tick_init+0x64>)
 800231c:	2201      	movs	r2, #1
 800231e:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->CNT = 0;
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <timer3_os_tick_init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24

    // 4. Generate update event to load PSC/ARR
    TIM3->EGR |= TIM_EGR_UG;
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <timer3_os_tick_init+0x64>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <timer3_os_tick_init+0x64>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6153      	str	r3, [r2, #20]

    // 5. Enable update interrupt
    TIM3->DIER |= TIM_DIER_UIE;
 8002332:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <timer3_os_tick_init+0x64>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <timer3_os_tick_init+0x64>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	60d3      	str	r3, [r2, #12]

    // 6. Enable TIM3 interrupt in NVIC
    NVIC_EnableIRQ(TIM3_IRQn);
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <timer3_os_tick_init+0x68>)
 8002340:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002344:	601a      	str	r2, [r3, #0]

    // 7. Start the timer
    TIM3->CR1 |= TIM_CR1_CEN;
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <timer3_os_tick_init+0x64>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <timer3_os_tick_init+0x64>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6013      	str	r3, [r2, #0]
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40000400 	.word	0x40000400
 8002364:	e000e100 	.word	0xe000e100

08002368 <os_timer_get_tick>:

uint32_t os_timer_get_tick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
    return os_tick_count;
 800236c:	4b02      	ldr	r3, [pc, #8]	@ (8002378 <os_timer_get_tick+0x10>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	20001204 	.word	0x20001204

0800237c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF)
 8002380:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <TIM3_IRQHandler+0x30>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <TIM3_IRQHandler+0x26>
    {
        TIM3->SR &= ~TIM_SR_UIF;  // Clear the interrupt flag
 800238c:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <TIM3_IRQHandler+0x30>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	4a06      	ldr	r2, [pc, #24]	@ (80023ac <TIM3_IRQHandler+0x30>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6113      	str	r3, [r2, #16]
        os_tick_count++;          // Increment OS tick
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <TIM3_IRQHandler+0x34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <TIM3_IRQHandler+0x34>)
 80023a0:	6013      	str	r3, [r2, #0]
    }
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40000400 	.word	0x40000400
 80023b0:	20001204 	.word	0x20001204

080023b4 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a31      	ldr	r2, [pc, #196]	@ (800248c <USART_SetBaudRate+0xd8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d003      	beq.n	80023d2 <USART_SetBaudRate+0x1e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a30      	ldr	r2, [pc, #192]	@ (8002490 <USART_SetBaudRate+0xdc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d103      	bne.n	80023da <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 80023d2:	f7ff fe99 	bl	8002108 <RCC_GetPCLK2Value>
 80023d6:	61f8      	str	r0, [r7, #28]
 80023d8:	e002      	b.n	80023e0 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 80023da:	f7ff fe3d 	bl	8002058 <RCC_GetPCLK1Value>
 80023de:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009a      	lsls	r2, r3, #2
 80023f6:	441a      	add	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e00a      	b.n	800241a <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009a      	lsls	r2, r3, #2
 800240e:	441a      	add	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4a1d      	ldr	r2, [pc, #116]	@ (8002494 <USART_SetBaudRate+0xe0>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2264      	movs	r2, #100	@ 0x64
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	3332      	adds	r3, #50	@ 0x32
 8002450:	4a10      	ldr	r2, [pc, #64]	@ (8002494 <USART_SetBaudRate+0xe0>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e009      	b.n	8002474 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	3332      	adds	r3, #50	@ 0x32
 8002466:	4a0b      	ldr	r2, [pc, #44]	@ (8002494 <USART_SetBaudRate+0xe0>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	609a      	str	r2, [r3, #8]
}
 8002482:	bf00      	nop
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40011000 	.word	0x40011000
 8002490:	40011400 	.word	0x40011400
 8002494:	51eb851f 	.word	0x51eb851f

08002498 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f890 	bl	80025d0 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	791b      	ldrb	r3, [r3, #4]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d104      	bne.n	80024c2 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e010      	b.n	80024e4 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	791b      	ldrb	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e007      	b.n	80024e4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d103      	bne.n	80024e4 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f043 030c 	orr.w	r3, r3, #12
 80024e2:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7b5b      	ldrb	r3, [r3, #13]
 80024e8:	031b      	lsls	r3, r3, #12
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7b9b      	ldrb	r3, [r3, #14]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d104      	bne.n	8002502 <USART_Init+0x6a>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e00b      	b.n	800251a <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7b9b      	ldrb	r3, [r3, #14]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d107      	bne.n	800251a <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002510:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002518:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7b1b      	ldrb	r3, [r3, #12]
 800252a:	031b      	lsls	r3, r3, #12
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7bdb      	ldrb	r3, [r3, #15]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d104      	bne.n	8002550 <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e014      	b.n	800257a <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7bdb      	ldrb	r3, [r3, #15]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d104      	bne.n	8002562 <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e00b      	b.n	800257a <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7bdb      	ldrb	r3, [r3, #15]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002570:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002578:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f7ff ff11 	bl	80023b4 <USART_SetBaudRate>

}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d106      	bne.n	80025ba <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 80025b8:	e005      	b.n	80025c6 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60da      	str	r2, [r3, #12]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d12a      	bne.n	8002638 <USART_PeriClockControl+0x68>
	{
		if(pUSARTx == USART1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <USART_PeriClockControl+0x74>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d106      	bne.n	80025f8 <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 80025ea:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <USART_PeriClockControl+0x78>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	4a16      	ldr	r2, [pc, #88]	@ (8002648 <USART_PeriClockControl+0x78>)
 80025f0:	f043 0310 	orr.w	r3, r3, #16
 80025f4:	6453      	str	r3, [r2, #68]	@ 0x44
	else
	{
		//TODO
	}

}
 80025f6:	e01f      	b.n	8002638 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a14      	ldr	r2, [pc, #80]	@ (800264c <USART_PeriClockControl+0x7c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d106      	bne.n	800260e <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8002600:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <USART_PeriClockControl+0x78>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	4a10      	ldr	r2, [pc, #64]	@ (8002648 <USART_PeriClockControl+0x78>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800260c:	e014      	b.n	8002638 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART3)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a0f      	ldr	r2, [pc, #60]	@ (8002650 <USART_PeriClockControl+0x80>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d106      	bne.n	8002624 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 8002616:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <USART_PeriClockControl+0x78>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <USART_PeriClockControl+0x78>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002622:	e009      	b.n	8002638 <USART_PeriClockControl+0x68>
		else if (pUSARTx == UART4)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a0b      	ldr	r2, [pc, #44]	@ (8002654 <USART_PeriClockControl+0x84>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d105      	bne.n	8002638 <USART_PeriClockControl+0x68>
			UART4_PCCK_EN();
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <USART_PeriClockControl+0x78>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	4a05      	ldr	r2, [pc, #20]	@ (8002648 <USART_PeriClockControl+0x78>)
 8002632:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002636:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40011000 	.word	0x40011000
 8002648:	40023800 	.word	0x40023800
 800264c:	40004400 	.word	0x40004400
 8002650:	40004800 	.word	0x40004800
 8002654:	40004c00 	.word	0x40004c00

08002658 <USART_SendDataIT_Response>:

   return RESET;
}

void USART_SendDataIT_Response(uint8_t *pTxBuffer, uint32_t Len)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
	USART_SendDataIT(&usart2_handle, pTxBuffer, Len);
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4803      	ldr	r0, [pc, #12]	@ (8002674 <USART_SendDataIT_Response+0x1c>)
 8002668:	f000 f806 	bl	8002678 <USART_SendDataIT>
	//USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));

}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2000120c 	.word	0x2000120c

08002678 <USART_SendDataIT>:
 *
 * @Note              -

 */
uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	uint8_t txstate = pUSARTHandle->TxBusyState;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3020 	ldrb.w	r3, [r3, #32]
 800268a:	75fb      	strb	r3, [r7, #23]

	if(txstate != USART_BUSY_IN_TX)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d019      	beq.n	80026c6 <USART_SendDataIT+0x4e>
	{
		pUSARTHandle->TxLen = Len;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
		pUSARTHandle->pTxBuffer = pTxBuffer;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	611a      	str	r2, [r3, #16]
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]

		//Implement the code to enable interrupt for TXE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_TXEIE);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026b4:	60da      	str	r2, [r3, #12]


		//Implement the code to enable interrupt for TC
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_TCIE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026c4:	60da      	str	r2, [r3, #12]


	}

	return txstate;
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <USART_ReceiveDataIT_Request>:

void USART_ReceiveDataIT_Request(uint8_t *pRxBuffer, uint32_t Len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
	//First lets enable the reception in interrupt mode
	//this code enables the receive interrupt
	while ( USART_ReceiveDataIT(&usart2_handle,pRxBuffer,Len) != USART_READY );
 80026de:	bf00      	nop
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4805      	ldr	r0, [pc, #20]	@ (80026fc <USART_ReceiveDataIT_Request+0x28>)
 80026e6:	f000 f80b 	bl	8002700 <USART_ReceiveDataIT>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f7      	bne.n	80026e0 <USART_ReceiveDataIT_Request+0xc>
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000120c 	.word	0x2000120c

08002700 <USART_ReceiveDataIT>:
 *
 * @Note              -

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002712:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d014      	beq.n	8002744 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0220 	orr.w	r2, r2, #32
 8002742:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8002744:	7dfb      	ldrb	r3, [r7, #23]
}
 8002746:	4618      	mov	r0, r3
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <USART_IRQInterruptConfig>:
 *
 * @Note              -

 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	460a      	mov	r2, r1
 800275a:	71fb      	strb	r3, [r7, #7]
 800275c:	4613      	mov	r3, r2
 800275e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8002760:	79bb      	ldrb	r3, [r7, #6]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d133      	bne.n	80027ce <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	2b1f      	cmp	r3, #31
 800276a:	d80a      	bhi.n	8002782 <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 800276c:	4b34      	ldr	r3, [pc, #208]	@ (8002840 <USART_IRQInterruptConfig+0xf0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	79fa      	ldrb	r2, [r7, #7]
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4a31      	ldr	r2, [pc, #196]	@ (8002840 <USART_IRQInterruptConfig+0xf0>)
 800277c:	430b      	orrs	r3, r1
 800277e:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8002780:	e059      	b.n	8002836 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2b1f      	cmp	r3, #31
 8002786:	d90f      	bls.n	80027a8 <USART_IRQInterruptConfig+0x58>
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	2b3f      	cmp	r3, #63	@ 0x3f
 800278c:	d80c      	bhi.n	80027a8 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 800278e:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <USART_IRQInterruptConfig+0xf4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	79fa      	ldrb	r2, [r7, #7]
 8002794:	f002 021f 	and.w	r2, r2, #31
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	4611      	mov	r1, r2
 80027a0:	4a28      	ldr	r2, [pc, #160]	@ (8002844 <USART_IRQInterruptConfig+0xf4>)
 80027a2:	430b      	orrs	r3, r1
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e046      	b.n	8002836 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ac:	d943      	bls.n	8002836 <USART_IRQInterruptConfig+0xe6>
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2b5f      	cmp	r3, #95	@ 0x5f
 80027b2:	d840      	bhi.n	8002836 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 80027b4:	4b24      	ldr	r3, [pc, #144]	@ (8002848 <USART_IRQInterruptConfig+0xf8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	79fa      	ldrb	r2, [r7, #7]
 80027ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4611      	mov	r1, r2
 80027c6:	4a20      	ldr	r2, [pc, #128]	@ (8002848 <USART_IRQInterruptConfig+0xf8>)
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	e033      	b.n	8002836 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b1f      	cmp	r3, #31
 80027d2:	d80a      	bhi.n	80027ea <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 80027d4:	4b1d      	ldr	r3, [pc, #116]	@ (800284c <USART_IRQInterruptConfig+0xfc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <USART_IRQInterruptConfig+0xfc>)
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	e025      	b.n	8002836 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	2b1f      	cmp	r3, #31
 80027ee:	d90f      	bls.n	8002810 <USART_IRQInterruptConfig+0xc0>
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80027f4:	d80c      	bhi.n	8002810 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <USART_IRQInterruptConfig+0x100>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	79fa      	ldrb	r2, [r7, #7]
 80027fc:	f002 021f 	and.w	r2, r2, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	4611      	mov	r1, r2
 8002808:	4a11      	ldr	r2, [pc, #68]	@ (8002850 <USART_IRQInterruptConfig+0x100>)
 800280a:	430b      	orrs	r3, r1
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e012      	b.n	8002836 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d90f      	bls.n	8002836 <USART_IRQInterruptConfig+0xe6>
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b5f      	cmp	r3, #95	@ 0x5f
 800281a:	d80c      	bhi.n	8002836 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 800281c:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <USART_IRQInterruptConfig+0x104>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	79fa      	ldrb	r2, [r7, #7]
 8002822:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	4611      	mov	r1, r2
 800282e:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <USART_IRQInterruptConfig+0x104>)
 8002830:	430b      	orrs	r3, r1
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	e7ff      	b.n	8002836 <USART_IRQInterruptConfig+0xe6>
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	e000e100 	.word	0xe000e100
 8002844:	e000e104 	.word	0xe000e104
 8002848:	e000e10c 	.word	0xe000e10c
 800284c:	e000e180 	.word	0xe000e180
 8002850:	e000e184 	.word	0xe000e184
 8002854:	e000e18c 	.word	0xe000e18c

08002858 <USART_IRQHandling>:
 *
 * @Note              -

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286a:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002876:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d021      	beq.n	80028c2 <USART_IRQHandling+0x6a>
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01e      	beq.n	80028c2 <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d119      	bne.n	80028c2 <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d115      	bne.n	80028c2 <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028a4:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 80028ba:	2100      	movs	r1, #0
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7fe fdc5 	bl	800144c <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028cc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d8:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d055      	beq.n	800298c <USART_IRQHandling+0x134>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d052      	beq.n	800298c <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d14d      	bne.n	800298c <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d03d      	beq.n	8002974 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7b5b      	ldrb	r3, [r3, #13]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d129      	bne.n	8002954 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002914:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7b9b      	ldrb	r3, [r3, #14]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	1e9a      	subs	r2, r3, #2
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
 800293c:	e01a      	b.n	8002974 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	619a      	str	r2, [r3, #24]
 8002952:	e00f      	b.n	8002974 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	1e5a      	subs	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800298a:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d073      	beq.n	8002a92 <USART_IRQHandling+0x23a>
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d070      	beq.n	8002a92 <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d16b      	bne.n	8002a92 <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d053      	beq.n	8002a6a <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7b5b      	ldrb	r3, [r3, #13]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d12f      	bne.n	8002a2a <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7b9b      	ldrb	r3, [r3, #14]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d119      	bne.n	8002a06 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e2:	b292      	uxth	r2, r2
 80029e4:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	1e9a      	subs	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	61da      	str	r2, [r3, #28]
 8002a04:	e031      	b.n	8002a6a <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	1e5a      	subs	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	61da      	str	r2, [r3, #28]
 8002a28:	e01f      	b.n	8002a6a <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7b9b      	ldrb	r3, [r3, #14]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d107      	bne.n	8002a42 <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e009      	b.n	8002a56 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0220 	bic.w	r2, r2, #32
 8002a80:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fe fcdd 	bl	800144c <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a9c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aa8:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab4:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00e      	beq.n	8002ada <USART_IRQHandling+0x282>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ad0:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8002ad2:	2103      	movs	r1, #3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fe fcb9 	bl	800144c <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00f      	beq.n	8002b18 <USART_IRQHandling+0x2c0>
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00c      	beq.n	8002b18 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	f023 0310 	bic.w	r3, r3, #16
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8002b10:	2102      	movs	r1, #2
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe fc9a 	bl	800144c <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0305 	and.w	r3, r3, #5
 8002b2e:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <USART_IRQHandling+0x2ec>
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8002b3c:	2107      	movs	r1, #7
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fc84 	bl	800144c <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01e      	beq.n	8002b94 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8002b68:	2105      	movs	r1, #5
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fc6e 	bl	800144c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8002b7a:	2106      	movs	r1, #6
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fe fc65 	bl	800144c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe fc5c 	bl	800144c <USART_ApplicationEventCallback>
		}
	}


}
 8002b94:	bf00      	nop
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <USART2_Init>:

void USART2_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <USART2_Init+0x3c>)
 8002ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8002bdc <USART2_Init+0x40>)
 8002ba4:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <USART2_Init+0x3c>)
 8002ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bac:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <USART2_Init+0x3c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <USART2_Init+0x3c>)
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <USART2_Init+0x3c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <USART2_Init+0x3c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8002bc6:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <USART2_Init+0x3c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8002bcc:	4802      	ldr	r0, [pc, #8]	@ (8002bd8 <USART2_Init+0x3c>)
 8002bce:	f7ff fc63 	bl	8002498 <USART_Init>
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000120c 	.word	0x2000120c
 8002bdc:	40004400 	.word	0x40004400

08002be0 <USART2_GPIOInit>:


void 	USART2_GPIOInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <USART2_GPIOInit+0x40>)
 8002be8:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8002bea:	2302      	movs	r3, #2
 8002bec:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe ffad 	bl	8001b64 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe ffa7 	bl	8001b64 <GPIO_Init>

}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40020000 	.word	0x40020000

08002c24 <USART_Init_DCM>:
void USART_Init_DCM(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
	USART2_GPIOInit();
 8002c28:	f7ff ffda 	bl	8002be0 <USART2_GPIOInit>
    USART2_Init();
 8002c2c:	f7ff ffb6 	bl	8002b9c <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 8002c30:	2101      	movs	r1, #1
 8002c32:	2026      	movs	r0, #38	@ 0x26
 8002c34:	f7ff fd8c 	bl	8002750 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <USART_Init_DCM+0x20>)
 8002c3c:	f7ff fcad 	bl	800259a <USART_PeripheralControl>
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40004400 	.word	0x40004400

08002c48 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 8002c4c:	4802      	ldr	r0, [pc, #8]	@ (8002c58 <USART2_IRQHandler+0x10>)
 8002c4e:	f7ff fe03 	bl	8002858 <USART_IRQHandling>
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000120c 	.word	0x2000120c

08002c5c <scheduler_loop>:
#include "sched_cfg.h"
#include "stm32f407xx_timer_driver.h"

uint32_t get_millis();  // Function returning system uptime in ms

void scheduler_loop() {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
    while(1)
    {
        uint32_t now = os_timer_get_tick();
 8002c62:	f7ff fb81 	bl	8002368 <os_timer_get_tick>
 8002c66:	6038      	str	r0, [r7, #0]
        for(int i = 0; i < NUM_TASKS; i++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	e02b      	b.n	8002cc6 <scheduler_loop+0x6a>
        {
            if((now - task_table[i].last_run_ms) >=  task_table[i].interval_ms)
 8002c6e:	4918      	ldr	r1, [pc, #96]	@ (8002cd0 <scheduler_loop+0x74>)
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	1ad1      	subs	r1, r2, r3
 8002c84:	4812      	ldr	r0, [pc, #72]	@ (8002cd0 <scheduler_loop+0x74>)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4403      	add	r3, r0
 8002c92:	3304      	adds	r3, #4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4299      	cmp	r1, r3
 8002c98:	d312      	bcc.n	8002cc0 <scheduler_loop+0x64>
            {
                task_table[i].task_func();
 8002c9a:	490d      	ldr	r1, [pc, #52]	@ (8002cd0 <scheduler_loop+0x74>)
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4798      	blx	r3
                task_table[i].last_run_ms = now;
 8002cac:	4908      	ldr	r1, [pc, #32]	@ (8002cd0 <scheduler_loop+0x74>)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3308      	adds	r3, #8
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	601a      	str	r2, [r3, #0]
        for(int i = 0; i < NUM_TASKS; i++)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	ddd0      	ble.n	8002c6e <scheduler_loop+0x12>
    {
 8002ccc:	e7c9      	b.n	8002c62 <scheduler_loop+0x6>
 8002cce:	bf00      	nop
 8002cd0:	200002a4 	.word	0x200002a4

08002cd4 <task1>:


#include "ModeManagement.h"
#include "lcd.h"
void task1(void) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
    if(ModeManagement.Mode == MODE_CONFIG)
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <task1+0x18>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d103      	bne.n	8002ce8 <task1+0x14>
    {
        ModeM_ConfigMode();
 8002ce0:	f7fd fdd8 	bl	8000894 <ModeM_ConfigMode>
        Dcm_Main();
 8002ce4:	f7fd fee4 	bl	8000ab0 <Dcm_Main>
    }
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000d7c 	.word	0x20000d7c

08002cf0 <task2>:

void task2(void) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
    // Read sensor or toggle GPIO
    if(ModeManagement.Mode == MODE_NORMAL)
    {
    }
	EventMngt_Main();
 8002cf4:	f7fd fba4 	bl	8000440 <EventMngt_Main>
}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <task3>:
extern 	void testingfun(void);
void task3(void) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	//testingfun();
    lcd_process_jobs();
 8002d00:	f7fe fdde 	bl	80018c0 <lcd_process_jobs>
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <GPIO_ButtonInit>:




void GPIO_ButtonInit(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <GPIO_ButtonInit+0x54>)
 8002d10:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8002d16:	2300      	movs	r3, #0
 8002d18:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe ff1c 	bl	8001b64 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <GPIO_ButtonInit+0x58>)
 8002d2e:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8002d30:	230c      	movs	r3, #12
 8002d32:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8002d34:	2301      	movs	r3, #1
 8002d36:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002d40:	2300      	movs	r3, #0
 8002d42:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8002d44:	2101      	movs	r1, #1
 8002d46:	4806      	ldr	r0, [pc, #24]	@ (8002d60 <GPIO_ButtonInit+0x58>)
 8002d48:	f7fe fe88 	bl	8001a5c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff08 	bl	8001b64 <GPIO_Init>

}
 8002d54:	bf00      	nop
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	40020c00 	.word	0x40020c00

08002d64 <main>:
void delay(void)
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}
int main(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]


	EventMngt_Init();
 8002d6e:	f7fd fa87 	bl	8000280 <EventMngt_Init>
	ModeM_init();
 8002d72:	f7fd fc31 	bl	80005d8 <ModeM_init>
	GPIO_ButtonInit();
 8002d76:	f7ff ffc7 	bl	8002d08 <GPIO_ButtonInit>
	USART_Init_DCM();
 8002d7a:	f7ff ff53 	bl	8002c24 <USART_Init_DCM>

	lcd_init();
 8002d7e:	f7fe fc35 	bl	80015ec <lcd_init>
	lcd_print_auto_wrap("Welcome... ");
 8002d82:	4806      	ldr	r0, [pc, #24]	@ (8002d9c <main+0x38>)
 8002d84:	f7fe fbec 	bl	8001560 <lcd_print_auto_wrap>

	timer_init();
 8002d88:	f7ff fa15 	bl	80021b6 <timer_init>
	//Timer init
	__enable_irq();;
 8002d8c:	b662      	cpsie	i

	scheduler_loop();
 8002d8e:	f7ff ff65 	bl	8002c5c <scheduler_loop>

    printf("Application is running\n");
 8002d92:	4803      	ldr	r0, [pc, #12]	@ (8002da0 <main+0x3c>)
 8002d94:	f000 fa0e 	bl	80031b4 <puts>




    //do forever
    while(1)
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <main+0x34>
 8002d9c:	08004128 	.word	0x08004128
 8002da0:	08004134 	.word	0x08004134

08002da4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <ITM_SendChar+0x44>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <ITM_SendChar+0x44>)
 8002db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002dba:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <ITM_SendChar+0x48>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8002dec <ITM_SendChar+0x48>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002dc6:	bf00      	nop
 8002dc8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f8      	beq.n	8002dc8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002dd6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	6013      	str	r3, [r2, #0]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	e000edfc 	.word	0xe000edfc
 8002dec:	e0000e00 	.word	0xe0000e00

08002df0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e00a      	b.n	8002e18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e02:	f3af 8000 	nop.w
 8002e06:	4601      	mov	r1, r0
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	60ba      	str	r2, [r7, #8]
 8002e0e:	b2ca      	uxtb	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	dbf0      	blt.n	8002e02 <_read+0x12>
  }

  return len;
 8002e20:	687b      	ldr	r3, [r7, #4]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e009      	b.n	8002e50 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	60ba      	str	r2, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ffad 	bl	8002da4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	dbf1      	blt.n	8002e3c <_write+0x12>
  }
  return len;
 8002e58:	687b      	ldr	r3, [r7, #4]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_close>:

int _close(int file)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e88:	605a      	str	r2, [r3, #4]
  return 0;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <_isatty>:

int _isatty(int file)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e9e:	2301      	movs	r3, #1
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
	...

08002ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ecc:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <_sbrk+0x5c>)
 8002ece:	4b15      	ldr	r3, [pc, #84]	@ (8002f24 <_sbrk+0x60>)
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed8:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <_sbrk+0x64>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	@ (8002f2c <_sbrk+0x68>)
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d207      	bcs.n	8002f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef4:	f000 fabe 	bl	8003474 <__errno>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	220c      	movs	r2, #12
 8002efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e009      	b.n	8002f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f04:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <_sbrk+0x64>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	4a05      	ldr	r2, [pc, #20]	@ (8002f28 <_sbrk+0x64>)
 8002f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20020000 	.word	0x20020000
 8002f24:	00000400 	.word	0x00000400
 8002f28:	20001230 	.word	0x20001230
 8002f2c:	20001380 	.word	0x20001380

08002f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f30:	480d      	ldr	r0, [pc, #52]	@ (8002f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f38:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f3a:	490d      	ldr	r1, [pc, #52]	@ (8002f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f74 <LoopForever+0xe>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f40:	e002      	b.n	8002f48 <LoopCopyDataInit>

08002f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f46:	3304      	adds	r3, #4

08002f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f4c:	d3f9      	bcc.n	8002f42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f50:	4c0a      	ldr	r4, [pc, #40]	@ (8002f7c <LoopForever+0x16>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f54:	e001      	b.n	8002f5a <LoopFillZerobss>

08002f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f58:	3204      	adds	r2, #4

08002f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f5c:	d3fb      	bcc.n	8002f56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f5e:	f000 fa8f 	bl	8003480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f62:	f7ff feff 	bl	8002d64 <main>

08002f66 <LoopForever>:

LoopForever:
  b LoopForever
 8002f66:	e7fe      	b.n	8002f66 <LoopForever>
  ldr   r0, =_estack
 8002f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f70:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 8002f74:	080041b8 	.word	0x080041b8
  ldr r2, =_sbss
 8002f78:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 8002f7c:	20001380 	.word	0x20001380

08002f80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f80:	e7fe      	b.n	8002f80 <ADC_IRQHandler>
	...

08002f84 <std>:
 8002f84:	2300      	movs	r3, #0
 8002f86:	b510      	push	{r4, lr}
 8002f88:	4604      	mov	r4, r0
 8002f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f92:	6083      	str	r3, [r0, #8]
 8002f94:	8181      	strh	r1, [r0, #12]
 8002f96:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f98:	81c2      	strh	r2, [r0, #14]
 8002f9a:	6183      	str	r3, [r0, #24]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	305c      	adds	r0, #92	@ 0x5c
 8002fa2:	f000 fa09 	bl	80033b8 <memset>
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <std+0x58>)
 8002fa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8002faa:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <std+0x5c>)
 8002fac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <std+0x60>)
 8002fb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <std+0x64>)
 8002fb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fec <std+0x68>)
 8002fb8:	6224      	str	r4, [r4, #32]
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d006      	beq.n	8002fcc <std+0x48>
 8002fbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002fc2:	4294      	cmp	r4, r2
 8002fc4:	d002      	beq.n	8002fcc <std+0x48>
 8002fc6:	33d0      	adds	r3, #208	@ 0xd0
 8002fc8:	429c      	cmp	r4, r3
 8002fca:	d105      	bne.n	8002fd8 <std+0x54>
 8002fcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd4:	f000 ba78 	b.w	80034c8 <__retarget_lock_init_recursive>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	bf00      	nop
 8002fdc:	08003209 	.word	0x08003209
 8002fe0:	0800322b 	.word	0x0800322b
 8002fe4:	08003263 	.word	0x08003263
 8002fe8:	08003287 	.word	0x08003287
 8002fec:	20001234 	.word	0x20001234

08002ff0 <stdio_exit_handler>:
 8002ff0:	4a02      	ldr	r2, [pc, #8]	@ (8002ffc <stdio_exit_handler+0xc>)
 8002ff2:	4903      	ldr	r1, [pc, #12]	@ (8003000 <stdio_exit_handler+0x10>)
 8002ff4:	4803      	ldr	r0, [pc, #12]	@ (8003004 <stdio_exit_handler+0x14>)
 8002ff6:	f000 b869 	b.w	80030cc <_fwalk_sglue>
 8002ffa:	bf00      	nop
 8002ffc:	200002c8 	.word	0x200002c8
 8003000:	08003db5 	.word	0x08003db5
 8003004:	200002d8 	.word	0x200002d8

08003008 <cleanup_stdio>:
 8003008:	6841      	ldr	r1, [r0, #4]
 800300a:	4b0c      	ldr	r3, [pc, #48]	@ (800303c <cleanup_stdio+0x34>)
 800300c:	4299      	cmp	r1, r3
 800300e:	b510      	push	{r4, lr}
 8003010:	4604      	mov	r4, r0
 8003012:	d001      	beq.n	8003018 <cleanup_stdio+0x10>
 8003014:	f000 fece 	bl	8003db4 <_fflush_r>
 8003018:	68a1      	ldr	r1, [r4, #8]
 800301a:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <cleanup_stdio+0x38>)
 800301c:	4299      	cmp	r1, r3
 800301e:	d002      	beq.n	8003026 <cleanup_stdio+0x1e>
 8003020:	4620      	mov	r0, r4
 8003022:	f000 fec7 	bl	8003db4 <_fflush_r>
 8003026:	68e1      	ldr	r1, [r4, #12]
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <cleanup_stdio+0x3c>)
 800302a:	4299      	cmp	r1, r3
 800302c:	d004      	beq.n	8003038 <cleanup_stdio+0x30>
 800302e:	4620      	mov	r0, r4
 8003030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003034:	f000 bebe 	b.w	8003db4 <_fflush_r>
 8003038:	bd10      	pop	{r4, pc}
 800303a:	bf00      	nop
 800303c:	20001234 	.word	0x20001234
 8003040:	2000129c 	.word	0x2000129c
 8003044:	20001304 	.word	0x20001304

08003048 <global_stdio_init.part.0>:
 8003048:	b510      	push	{r4, lr}
 800304a:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <global_stdio_init.part.0+0x30>)
 800304c:	4c0b      	ldr	r4, [pc, #44]	@ (800307c <global_stdio_init.part.0+0x34>)
 800304e:	4a0c      	ldr	r2, [pc, #48]	@ (8003080 <global_stdio_init.part.0+0x38>)
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	4620      	mov	r0, r4
 8003054:	2200      	movs	r2, #0
 8003056:	2104      	movs	r1, #4
 8003058:	f7ff ff94 	bl	8002f84 <std>
 800305c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003060:	2201      	movs	r2, #1
 8003062:	2109      	movs	r1, #9
 8003064:	f7ff ff8e 	bl	8002f84 <std>
 8003068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800306c:	2202      	movs	r2, #2
 800306e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003072:	2112      	movs	r1, #18
 8003074:	f7ff bf86 	b.w	8002f84 <std>
 8003078:	2000136c 	.word	0x2000136c
 800307c:	20001234 	.word	0x20001234
 8003080:	08002ff1 	.word	0x08002ff1

08003084 <__sfp_lock_acquire>:
 8003084:	4801      	ldr	r0, [pc, #4]	@ (800308c <__sfp_lock_acquire+0x8>)
 8003086:	f000 ba20 	b.w	80034ca <__retarget_lock_acquire_recursive>
 800308a:	bf00      	nop
 800308c:	20001375 	.word	0x20001375

08003090 <__sfp_lock_release>:
 8003090:	4801      	ldr	r0, [pc, #4]	@ (8003098 <__sfp_lock_release+0x8>)
 8003092:	f000 ba1b 	b.w	80034cc <__retarget_lock_release_recursive>
 8003096:	bf00      	nop
 8003098:	20001375 	.word	0x20001375

0800309c <__sinit>:
 800309c:	b510      	push	{r4, lr}
 800309e:	4604      	mov	r4, r0
 80030a0:	f7ff fff0 	bl	8003084 <__sfp_lock_acquire>
 80030a4:	6a23      	ldr	r3, [r4, #32]
 80030a6:	b11b      	cbz	r3, 80030b0 <__sinit+0x14>
 80030a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030ac:	f7ff bff0 	b.w	8003090 <__sfp_lock_release>
 80030b0:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <__sinit+0x28>)
 80030b2:	6223      	str	r3, [r4, #32]
 80030b4:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <__sinit+0x2c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f5      	bne.n	80030a8 <__sinit+0xc>
 80030bc:	f7ff ffc4 	bl	8003048 <global_stdio_init.part.0>
 80030c0:	e7f2      	b.n	80030a8 <__sinit+0xc>
 80030c2:	bf00      	nop
 80030c4:	08003009 	.word	0x08003009
 80030c8:	2000136c 	.word	0x2000136c

080030cc <_fwalk_sglue>:
 80030cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030d0:	4607      	mov	r7, r0
 80030d2:	4688      	mov	r8, r1
 80030d4:	4614      	mov	r4, r2
 80030d6:	2600      	movs	r6, #0
 80030d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030dc:	f1b9 0901 	subs.w	r9, r9, #1
 80030e0:	d505      	bpl.n	80030ee <_fwalk_sglue+0x22>
 80030e2:	6824      	ldr	r4, [r4, #0]
 80030e4:	2c00      	cmp	r4, #0
 80030e6:	d1f7      	bne.n	80030d8 <_fwalk_sglue+0xc>
 80030e8:	4630      	mov	r0, r6
 80030ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ee:	89ab      	ldrh	r3, [r5, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d907      	bls.n	8003104 <_fwalk_sglue+0x38>
 80030f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030f8:	3301      	adds	r3, #1
 80030fa:	d003      	beq.n	8003104 <_fwalk_sglue+0x38>
 80030fc:	4629      	mov	r1, r5
 80030fe:	4638      	mov	r0, r7
 8003100:	47c0      	blx	r8
 8003102:	4306      	orrs	r6, r0
 8003104:	3568      	adds	r5, #104	@ 0x68
 8003106:	e7e9      	b.n	80030dc <_fwalk_sglue+0x10>

08003108 <_puts_r>:
 8003108:	6a03      	ldr	r3, [r0, #32]
 800310a:	b570      	push	{r4, r5, r6, lr}
 800310c:	6884      	ldr	r4, [r0, #8]
 800310e:	4605      	mov	r5, r0
 8003110:	460e      	mov	r6, r1
 8003112:	b90b      	cbnz	r3, 8003118 <_puts_r+0x10>
 8003114:	f7ff ffc2 	bl	800309c <__sinit>
 8003118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800311a:	07db      	lsls	r3, r3, #31
 800311c:	d405      	bmi.n	800312a <_puts_r+0x22>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	0598      	lsls	r0, r3, #22
 8003122:	d402      	bmi.n	800312a <_puts_r+0x22>
 8003124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003126:	f000 f9d0 	bl	80034ca <__retarget_lock_acquire_recursive>
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	0719      	lsls	r1, r3, #28
 800312e:	d502      	bpl.n	8003136 <_puts_r+0x2e>
 8003130:	6923      	ldr	r3, [r4, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d135      	bne.n	80031a2 <_puts_r+0x9a>
 8003136:	4621      	mov	r1, r4
 8003138:	4628      	mov	r0, r5
 800313a:	f000 f8e7 	bl	800330c <__swsetup_r>
 800313e:	b380      	cbz	r0, 80031a2 <_puts_r+0x9a>
 8003140:	f04f 35ff 	mov.w	r5, #4294967295
 8003144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003146:	07da      	lsls	r2, r3, #31
 8003148:	d405      	bmi.n	8003156 <_puts_r+0x4e>
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	059b      	lsls	r3, r3, #22
 800314e:	d402      	bmi.n	8003156 <_puts_r+0x4e>
 8003150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003152:	f000 f9bb 	bl	80034cc <__retarget_lock_release_recursive>
 8003156:	4628      	mov	r0, r5
 8003158:	bd70      	pop	{r4, r5, r6, pc}
 800315a:	2b00      	cmp	r3, #0
 800315c:	da04      	bge.n	8003168 <_puts_r+0x60>
 800315e:	69a2      	ldr	r2, [r4, #24]
 8003160:	429a      	cmp	r2, r3
 8003162:	dc17      	bgt.n	8003194 <_puts_r+0x8c>
 8003164:	290a      	cmp	r1, #10
 8003166:	d015      	beq.n	8003194 <_puts_r+0x8c>
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	6022      	str	r2, [r4, #0]
 800316e:	7019      	strb	r1, [r3, #0]
 8003170:	68a3      	ldr	r3, [r4, #8]
 8003172:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003176:	3b01      	subs	r3, #1
 8003178:	60a3      	str	r3, [r4, #8]
 800317a:	2900      	cmp	r1, #0
 800317c:	d1ed      	bne.n	800315a <_puts_r+0x52>
 800317e:	2b00      	cmp	r3, #0
 8003180:	da11      	bge.n	80031a6 <_puts_r+0x9e>
 8003182:	4622      	mov	r2, r4
 8003184:	210a      	movs	r1, #10
 8003186:	4628      	mov	r0, r5
 8003188:	f000 f881 	bl	800328e <__swbuf_r>
 800318c:	3001      	adds	r0, #1
 800318e:	d0d7      	beq.n	8003140 <_puts_r+0x38>
 8003190:	250a      	movs	r5, #10
 8003192:	e7d7      	b.n	8003144 <_puts_r+0x3c>
 8003194:	4622      	mov	r2, r4
 8003196:	4628      	mov	r0, r5
 8003198:	f000 f879 	bl	800328e <__swbuf_r>
 800319c:	3001      	adds	r0, #1
 800319e:	d1e7      	bne.n	8003170 <_puts_r+0x68>
 80031a0:	e7ce      	b.n	8003140 <_puts_r+0x38>
 80031a2:	3e01      	subs	r6, #1
 80031a4:	e7e4      	b.n	8003170 <_puts_r+0x68>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	6022      	str	r2, [r4, #0]
 80031ac:	220a      	movs	r2, #10
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e7ee      	b.n	8003190 <_puts_r+0x88>
	...

080031b4 <puts>:
 80031b4:	4b02      	ldr	r3, [pc, #8]	@ (80031c0 <puts+0xc>)
 80031b6:	4601      	mov	r1, r0
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	f7ff bfa5 	b.w	8003108 <_puts_r>
 80031be:	bf00      	nop
 80031c0:	200002d4 	.word	0x200002d4

080031c4 <siprintf>:
 80031c4:	b40e      	push	{r1, r2, r3}
 80031c6:	b510      	push	{r4, lr}
 80031c8:	b09d      	sub	sp, #116	@ 0x74
 80031ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80031cc:	9002      	str	r0, [sp, #8]
 80031ce:	9006      	str	r0, [sp, #24]
 80031d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80031d4:	480a      	ldr	r0, [pc, #40]	@ (8003200 <siprintf+0x3c>)
 80031d6:	9107      	str	r1, [sp, #28]
 80031d8:	9104      	str	r1, [sp, #16]
 80031da:	490a      	ldr	r1, [pc, #40]	@ (8003204 <siprintf+0x40>)
 80031dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80031e0:	9105      	str	r1, [sp, #20]
 80031e2:	2400      	movs	r4, #0
 80031e4:	a902      	add	r1, sp, #8
 80031e6:	6800      	ldr	r0, [r0, #0]
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80031ec:	f000 fada 	bl	80037a4 <_svfiprintf_r>
 80031f0:	9b02      	ldr	r3, [sp, #8]
 80031f2:	701c      	strb	r4, [r3, #0]
 80031f4:	b01d      	add	sp, #116	@ 0x74
 80031f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031fa:	b003      	add	sp, #12
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	200002d4 	.word	0x200002d4
 8003204:	ffff0208 	.word	0xffff0208

08003208 <__sread>:
 8003208:	b510      	push	{r4, lr}
 800320a:	460c      	mov	r4, r1
 800320c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003210:	f000 f90c 	bl	800342c <_read_r>
 8003214:	2800      	cmp	r0, #0
 8003216:	bfab      	itete	ge
 8003218:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800321a:	89a3      	ldrhlt	r3, [r4, #12]
 800321c:	181b      	addge	r3, r3, r0
 800321e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003222:	bfac      	ite	ge
 8003224:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003226:	81a3      	strhlt	r3, [r4, #12]
 8003228:	bd10      	pop	{r4, pc}

0800322a <__swrite>:
 800322a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800322e:	461f      	mov	r7, r3
 8003230:	898b      	ldrh	r3, [r1, #12]
 8003232:	05db      	lsls	r3, r3, #23
 8003234:	4605      	mov	r5, r0
 8003236:	460c      	mov	r4, r1
 8003238:	4616      	mov	r6, r2
 800323a:	d505      	bpl.n	8003248 <__swrite+0x1e>
 800323c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003240:	2302      	movs	r3, #2
 8003242:	2200      	movs	r2, #0
 8003244:	f000 f8e0 	bl	8003408 <_lseek_r>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800324e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003252:	81a3      	strh	r3, [r4, #12]
 8003254:	4632      	mov	r2, r6
 8003256:	463b      	mov	r3, r7
 8003258:	4628      	mov	r0, r5
 800325a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800325e:	f000 b8f7 	b.w	8003450 <_write_r>

08003262 <__sseek>:
 8003262:	b510      	push	{r4, lr}
 8003264:	460c      	mov	r4, r1
 8003266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326a:	f000 f8cd 	bl	8003408 <_lseek_r>
 800326e:	1c43      	adds	r3, r0, #1
 8003270:	89a3      	ldrh	r3, [r4, #12]
 8003272:	bf15      	itete	ne
 8003274:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003276:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800327a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800327e:	81a3      	strheq	r3, [r4, #12]
 8003280:	bf18      	it	ne
 8003282:	81a3      	strhne	r3, [r4, #12]
 8003284:	bd10      	pop	{r4, pc}

08003286 <__sclose>:
 8003286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800328a:	f000 b8ad 	b.w	80033e8 <_close_r>

0800328e <__swbuf_r>:
 800328e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003290:	460e      	mov	r6, r1
 8003292:	4614      	mov	r4, r2
 8003294:	4605      	mov	r5, r0
 8003296:	b118      	cbz	r0, 80032a0 <__swbuf_r+0x12>
 8003298:	6a03      	ldr	r3, [r0, #32]
 800329a:	b90b      	cbnz	r3, 80032a0 <__swbuf_r+0x12>
 800329c:	f7ff fefe 	bl	800309c <__sinit>
 80032a0:	69a3      	ldr	r3, [r4, #24]
 80032a2:	60a3      	str	r3, [r4, #8]
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	071a      	lsls	r2, r3, #28
 80032a8:	d501      	bpl.n	80032ae <__swbuf_r+0x20>
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	b943      	cbnz	r3, 80032c0 <__swbuf_r+0x32>
 80032ae:	4621      	mov	r1, r4
 80032b0:	4628      	mov	r0, r5
 80032b2:	f000 f82b 	bl	800330c <__swsetup_r>
 80032b6:	b118      	cbz	r0, 80032c0 <__swbuf_r+0x32>
 80032b8:	f04f 37ff 	mov.w	r7, #4294967295
 80032bc:	4638      	mov	r0, r7
 80032be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	6922      	ldr	r2, [r4, #16]
 80032c4:	1a98      	subs	r0, r3, r2
 80032c6:	6963      	ldr	r3, [r4, #20]
 80032c8:	b2f6      	uxtb	r6, r6
 80032ca:	4283      	cmp	r3, r0
 80032cc:	4637      	mov	r7, r6
 80032ce:	dc05      	bgt.n	80032dc <__swbuf_r+0x4e>
 80032d0:	4621      	mov	r1, r4
 80032d2:	4628      	mov	r0, r5
 80032d4:	f000 fd6e 	bl	8003db4 <_fflush_r>
 80032d8:	2800      	cmp	r0, #0
 80032da:	d1ed      	bne.n	80032b8 <__swbuf_r+0x2a>
 80032dc:	68a3      	ldr	r3, [r4, #8]
 80032de:	3b01      	subs	r3, #1
 80032e0:	60a3      	str	r3, [r4, #8]
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	6022      	str	r2, [r4, #0]
 80032e8:	701e      	strb	r6, [r3, #0]
 80032ea:	6962      	ldr	r2, [r4, #20]
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d004      	beq.n	80032fc <__swbuf_r+0x6e>
 80032f2:	89a3      	ldrh	r3, [r4, #12]
 80032f4:	07db      	lsls	r3, r3, #31
 80032f6:	d5e1      	bpl.n	80032bc <__swbuf_r+0x2e>
 80032f8:	2e0a      	cmp	r6, #10
 80032fa:	d1df      	bne.n	80032bc <__swbuf_r+0x2e>
 80032fc:	4621      	mov	r1, r4
 80032fe:	4628      	mov	r0, r5
 8003300:	f000 fd58 	bl	8003db4 <_fflush_r>
 8003304:	2800      	cmp	r0, #0
 8003306:	d0d9      	beq.n	80032bc <__swbuf_r+0x2e>
 8003308:	e7d6      	b.n	80032b8 <__swbuf_r+0x2a>
	...

0800330c <__swsetup_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <__swsetup_r+0xa8>)
 8003310:	4605      	mov	r5, r0
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	460c      	mov	r4, r1
 8003316:	b118      	cbz	r0, 8003320 <__swsetup_r+0x14>
 8003318:	6a03      	ldr	r3, [r0, #32]
 800331a:	b90b      	cbnz	r3, 8003320 <__swsetup_r+0x14>
 800331c:	f7ff febe 	bl	800309c <__sinit>
 8003320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003324:	0719      	lsls	r1, r3, #28
 8003326:	d422      	bmi.n	800336e <__swsetup_r+0x62>
 8003328:	06da      	lsls	r2, r3, #27
 800332a:	d407      	bmi.n	800333c <__swsetup_r+0x30>
 800332c:	2209      	movs	r2, #9
 800332e:	602a      	str	r2, [r5, #0]
 8003330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003334:	81a3      	strh	r3, [r4, #12]
 8003336:	f04f 30ff 	mov.w	r0, #4294967295
 800333a:	e033      	b.n	80033a4 <__swsetup_r+0x98>
 800333c:	0758      	lsls	r0, r3, #29
 800333e:	d512      	bpl.n	8003366 <__swsetup_r+0x5a>
 8003340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003342:	b141      	cbz	r1, 8003356 <__swsetup_r+0x4a>
 8003344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003348:	4299      	cmp	r1, r3
 800334a:	d002      	beq.n	8003352 <__swsetup_r+0x46>
 800334c:	4628      	mov	r0, r5
 800334e:	f000 f8d5 	bl	80034fc <_free_r>
 8003352:	2300      	movs	r3, #0
 8003354:	6363      	str	r3, [r4, #52]	@ 0x34
 8003356:	89a3      	ldrh	r3, [r4, #12]
 8003358:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800335c:	81a3      	strh	r3, [r4, #12]
 800335e:	2300      	movs	r3, #0
 8003360:	6063      	str	r3, [r4, #4]
 8003362:	6923      	ldr	r3, [r4, #16]
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	f043 0308 	orr.w	r3, r3, #8
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	6923      	ldr	r3, [r4, #16]
 8003370:	b94b      	cbnz	r3, 8003386 <__swsetup_r+0x7a>
 8003372:	89a3      	ldrh	r3, [r4, #12]
 8003374:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800337c:	d003      	beq.n	8003386 <__swsetup_r+0x7a>
 800337e:	4621      	mov	r1, r4
 8003380:	4628      	mov	r0, r5
 8003382:	f000 fd65 	bl	8003e50 <__smakebuf_r>
 8003386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800338a:	f013 0201 	ands.w	r2, r3, #1
 800338e:	d00a      	beq.n	80033a6 <__swsetup_r+0x9a>
 8003390:	2200      	movs	r2, #0
 8003392:	60a2      	str	r2, [r4, #8]
 8003394:	6962      	ldr	r2, [r4, #20]
 8003396:	4252      	negs	r2, r2
 8003398:	61a2      	str	r2, [r4, #24]
 800339a:	6922      	ldr	r2, [r4, #16]
 800339c:	b942      	cbnz	r2, 80033b0 <__swsetup_r+0xa4>
 800339e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80033a2:	d1c5      	bne.n	8003330 <__swsetup_r+0x24>
 80033a4:	bd38      	pop	{r3, r4, r5, pc}
 80033a6:	0799      	lsls	r1, r3, #30
 80033a8:	bf58      	it	pl
 80033aa:	6962      	ldrpl	r2, [r4, #20]
 80033ac:	60a2      	str	r2, [r4, #8]
 80033ae:	e7f4      	b.n	800339a <__swsetup_r+0x8e>
 80033b0:	2000      	movs	r0, #0
 80033b2:	e7f7      	b.n	80033a4 <__swsetup_r+0x98>
 80033b4:	200002d4 	.word	0x200002d4

080033b8 <memset>:
 80033b8:	4402      	add	r2, r0
 80033ba:	4603      	mov	r3, r0
 80033bc:	4293      	cmp	r3, r2
 80033be:	d100      	bne.n	80033c2 <memset+0xa>
 80033c0:	4770      	bx	lr
 80033c2:	f803 1b01 	strb.w	r1, [r3], #1
 80033c6:	e7f9      	b.n	80033bc <memset+0x4>

080033c8 <strcat>:
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4602      	mov	r2, r0
 80033cc:	7814      	ldrb	r4, [r2, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	3201      	adds	r2, #1
 80033d2:	2c00      	cmp	r4, #0
 80033d4:	d1fa      	bne.n	80033cc <strcat+0x4>
 80033d6:	3b01      	subs	r3, #1
 80033d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033e0:	2a00      	cmp	r2, #0
 80033e2:	d1f9      	bne.n	80033d8 <strcat+0x10>
 80033e4:	bd10      	pop	{r4, pc}
	...

080033e8 <_close_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4d06      	ldr	r5, [pc, #24]	@ (8003404 <_close_r+0x1c>)
 80033ec:	2300      	movs	r3, #0
 80033ee:	4604      	mov	r4, r0
 80033f0:	4608      	mov	r0, r1
 80033f2:	602b      	str	r3, [r5, #0]
 80033f4:	f7ff fd35 	bl	8002e62 <_close>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d102      	bne.n	8003402 <_close_r+0x1a>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	b103      	cbz	r3, 8003402 <_close_r+0x1a>
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	bd38      	pop	{r3, r4, r5, pc}
 8003404:	20001370 	.word	0x20001370

08003408 <_lseek_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4d07      	ldr	r5, [pc, #28]	@ (8003428 <_lseek_r+0x20>)
 800340c:	4604      	mov	r4, r0
 800340e:	4608      	mov	r0, r1
 8003410:	4611      	mov	r1, r2
 8003412:	2200      	movs	r2, #0
 8003414:	602a      	str	r2, [r5, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	f7ff fd47 	bl	8002eaa <_lseek>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d102      	bne.n	8003426 <_lseek_r+0x1e>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	b103      	cbz	r3, 8003426 <_lseek_r+0x1e>
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	20001370 	.word	0x20001370

0800342c <_read_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4d07      	ldr	r5, [pc, #28]	@ (800344c <_read_r+0x20>)
 8003430:	4604      	mov	r4, r0
 8003432:	4608      	mov	r0, r1
 8003434:	4611      	mov	r1, r2
 8003436:	2200      	movs	r2, #0
 8003438:	602a      	str	r2, [r5, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	f7ff fcd8 	bl	8002df0 <_read>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d102      	bne.n	800344a <_read_r+0x1e>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	b103      	cbz	r3, 800344a <_read_r+0x1e>
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	bd38      	pop	{r3, r4, r5, pc}
 800344c:	20001370 	.word	0x20001370

08003450 <_write_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4d07      	ldr	r5, [pc, #28]	@ (8003470 <_write_r+0x20>)
 8003454:	4604      	mov	r4, r0
 8003456:	4608      	mov	r0, r1
 8003458:	4611      	mov	r1, r2
 800345a:	2200      	movs	r2, #0
 800345c:	602a      	str	r2, [r5, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff fce3 	bl	8002e2a <_write>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d102      	bne.n	800346e <_write_r+0x1e>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	b103      	cbz	r3, 800346e <_write_r+0x1e>
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	bd38      	pop	{r3, r4, r5, pc}
 8003470:	20001370 	.word	0x20001370

08003474 <__errno>:
 8003474:	4b01      	ldr	r3, [pc, #4]	@ (800347c <__errno+0x8>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	200002d4 	.word	0x200002d4

08003480 <__libc_init_array>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	4d0d      	ldr	r5, [pc, #52]	@ (80034b8 <__libc_init_array+0x38>)
 8003484:	4c0d      	ldr	r4, [pc, #52]	@ (80034bc <__libc_init_array+0x3c>)
 8003486:	1b64      	subs	r4, r4, r5
 8003488:	10a4      	asrs	r4, r4, #2
 800348a:	2600      	movs	r6, #0
 800348c:	42a6      	cmp	r6, r4
 800348e:	d109      	bne.n	80034a4 <__libc_init_array+0x24>
 8003490:	4d0b      	ldr	r5, [pc, #44]	@ (80034c0 <__libc_init_array+0x40>)
 8003492:	4c0c      	ldr	r4, [pc, #48]	@ (80034c4 <__libc_init_array+0x44>)
 8003494:	f000 fd9a 	bl	8003fcc <_init>
 8003498:	1b64      	subs	r4, r4, r5
 800349a:	10a4      	asrs	r4, r4, #2
 800349c:	2600      	movs	r6, #0
 800349e:	42a6      	cmp	r6, r4
 80034a0:	d105      	bne.n	80034ae <__libc_init_array+0x2e>
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a8:	4798      	blx	r3
 80034aa:	3601      	adds	r6, #1
 80034ac:	e7ee      	b.n	800348c <__libc_init_array+0xc>
 80034ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b2:	4798      	blx	r3
 80034b4:	3601      	adds	r6, #1
 80034b6:	e7f2      	b.n	800349e <__libc_init_array+0x1e>
 80034b8:	080041b0 	.word	0x080041b0
 80034bc:	080041b0 	.word	0x080041b0
 80034c0:	080041b0 	.word	0x080041b0
 80034c4:	080041b4 	.word	0x080041b4

080034c8 <__retarget_lock_init_recursive>:
 80034c8:	4770      	bx	lr

080034ca <__retarget_lock_acquire_recursive>:
 80034ca:	4770      	bx	lr

080034cc <__retarget_lock_release_recursive>:
 80034cc:	4770      	bx	lr

080034ce <strcpy>:
 80034ce:	4603      	mov	r3, r0
 80034d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034d4:	f803 2b01 	strb.w	r2, [r3], #1
 80034d8:	2a00      	cmp	r2, #0
 80034da:	d1f9      	bne.n	80034d0 <strcpy+0x2>
 80034dc:	4770      	bx	lr

080034de <memcpy>:
 80034de:	440a      	add	r2, r1
 80034e0:	4291      	cmp	r1, r2
 80034e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80034e6:	d100      	bne.n	80034ea <memcpy+0xc>
 80034e8:	4770      	bx	lr
 80034ea:	b510      	push	{r4, lr}
 80034ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034f4:	4291      	cmp	r1, r2
 80034f6:	d1f9      	bne.n	80034ec <memcpy+0xe>
 80034f8:	bd10      	pop	{r4, pc}
	...

080034fc <_free_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	4605      	mov	r5, r0
 8003500:	2900      	cmp	r1, #0
 8003502:	d041      	beq.n	8003588 <_free_r+0x8c>
 8003504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003508:	1f0c      	subs	r4, r1, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	bfb8      	it	lt
 800350e:	18e4      	addlt	r4, r4, r3
 8003510:	f000 f8e0 	bl	80036d4 <__malloc_lock>
 8003514:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <_free_r+0x90>)
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	b933      	cbnz	r3, 8003528 <_free_r+0x2c>
 800351a:	6063      	str	r3, [r4, #4]
 800351c:	6014      	str	r4, [r2, #0]
 800351e:	4628      	mov	r0, r5
 8003520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003524:	f000 b8dc 	b.w	80036e0 <__malloc_unlock>
 8003528:	42a3      	cmp	r3, r4
 800352a:	d908      	bls.n	800353e <_free_r+0x42>
 800352c:	6820      	ldr	r0, [r4, #0]
 800352e:	1821      	adds	r1, r4, r0
 8003530:	428b      	cmp	r3, r1
 8003532:	bf01      	itttt	eq
 8003534:	6819      	ldreq	r1, [r3, #0]
 8003536:	685b      	ldreq	r3, [r3, #4]
 8003538:	1809      	addeq	r1, r1, r0
 800353a:	6021      	streq	r1, [r4, #0]
 800353c:	e7ed      	b.n	800351a <_free_r+0x1e>
 800353e:	461a      	mov	r2, r3
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	b10b      	cbz	r3, 8003548 <_free_r+0x4c>
 8003544:	42a3      	cmp	r3, r4
 8003546:	d9fa      	bls.n	800353e <_free_r+0x42>
 8003548:	6811      	ldr	r1, [r2, #0]
 800354a:	1850      	adds	r0, r2, r1
 800354c:	42a0      	cmp	r0, r4
 800354e:	d10b      	bne.n	8003568 <_free_r+0x6c>
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	4401      	add	r1, r0
 8003554:	1850      	adds	r0, r2, r1
 8003556:	4283      	cmp	r3, r0
 8003558:	6011      	str	r1, [r2, #0]
 800355a:	d1e0      	bne.n	800351e <_free_r+0x22>
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	6053      	str	r3, [r2, #4]
 8003562:	4408      	add	r0, r1
 8003564:	6010      	str	r0, [r2, #0]
 8003566:	e7da      	b.n	800351e <_free_r+0x22>
 8003568:	d902      	bls.n	8003570 <_free_r+0x74>
 800356a:	230c      	movs	r3, #12
 800356c:	602b      	str	r3, [r5, #0]
 800356e:	e7d6      	b.n	800351e <_free_r+0x22>
 8003570:	6820      	ldr	r0, [r4, #0]
 8003572:	1821      	adds	r1, r4, r0
 8003574:	428b      	cmp	r3, r1
 8003576:	bf04      	itt	eq
 8003578:	6819      	ldreq	r1, [r3, #0]
 800357a:	685b      	ldreq	r3, [r3, #4]
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	bf04      	itt	eq
 8003580:	1809      	addeq	r1, r1, r0
 8003582:	6021      	streq	r1, [r4, #0]
 8003584:	6054      	str	r4, [r2, #4]
 8003586:	e7ca      	b.n	800351e <_free_r+0x22>
 8003588:	bd38      	pop	{r3, r4, r5, pc}
 800358a:	bf00      	nop
 800358c:	2000137c 	.word	0x2000137c

08003590 <sbrk_aligned>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4e0f      	ldr	r6, [pc, #60]	@ (80035d0 <sbrk_aligned+0x40>)
 8003594:	460c      	mov	r4, r1
 8003596:	6831      	ldr	r1, [r6, #0]
 8003598:	4605      	mov	r5, r0
 800359a:	b911      	cbnz	r1, 80035a2 <sbrk_aligned+0x12>
 800359c:	f000 fcd0 	bl	8003f40 <_sbrk_r>
 80035a0:	6030      	str	r0, [r6, #0]
 80035a2:	4621      	mov	r1, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f000 fccb 	bl	8003f40 <_sbrk_r>
 80035aa:	1c43      	adds	r3, r0, #1
 80035ac:	d103      	bne.n	80035b6 <sbrk_aligned+0x26>
 80035ae:	f04f 34ff 	mov.w	r4, #4294967295
 80035b2:	4620      	mov	r0, r4
 80035b4:	bd70      	pop	{r4, r5, r6, pc}
 80035b6:	1cc4      	adds	r4, r0, #3
 80035b8:	f024 0403 	bic.w	r4, r4, #3
 80035bc:	42a0      	cmp	r0, r4
 80035be:	d0f8      	beq.n	80035b2 <sbrk_aligned+0x22>
 80035c0:	1a21      	subs	r1, r4, r0
 80035c2:	4628      	mov	r0, r5
 80035c4:	f000 fcbc 	bl	8003f40 <_sbrk_r>
 80035c8:	3001      	adds	r0, #1
 80035ca:	d1f2      	bne.n	80035b2 <sbrk_aligned+0x22>
 80035cc:	e7ef      	b.n	80035ae <sbrk_aligned+0x1e>
 80035ce:	bf00      	nop
 80035d0:	20001378 	.word	0x20001378

080035d4 <_malloc_r>:
 80035d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d8:	1ccd      	adds	r5, r1, #3
 80035da:	f025 0503 	bic.w	r5, r5, #3
 80035de:	3508      	adds	r5, #8
 80035e0:	2d0c      	cmp	r5, #12
 80035e2:	bf38      	it	cc
 80035e4:	250c      	movcc	r5, #12
 80035e6:	2d00      	cmp	r5, #0
 80035e8:	4606      	mov	r6, r0
 80035ea:	db01      	blt.n	80035f0 <_malloc_r+0x1c>
 80035ec:	42a9      	cmp	r1, r5
 80035ee:	d904      	bls.n	80035fa <_malloc_r+0x26>
 80035f0:	230c      	movs	r3, #12
 80035f2:	6033      	str	r3, [r6, #0]
 80035f4:	2000      	movs	r0, #0
 80035f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036d0 <_malloc_r+0xfc>
 80035fe:	f000 f869 	bl	80036d4 <__malloc_lock>
 8003602:	f8d8 3000 	ldr.w	r3, [r8]
 8003606:	461c      	mov	r4, r3
 8003608:	bb44      	cbnz	r4, 800365c <_malloc_r+0x88>
 800360a:	4629      	mov	r1, r5
 800360c:	4630      	mov	r0, r6
 800360e:	f7ff ffbf 	bl	8003590 <sbrk_aligned>
 8003612:	1c43      	adds	r3, r0, #1
 8003614:	4604      	mov	r4, r0
 8003616:	d158      	bne.n	80036ca <_malloc_r+0xf6>
 8003618:	f8d8 4000 	ldr.w	r4, [r8]
 800361c:	4627      	mov	r7, r4
 800361e:	2f00      	cmp	r7, #0
 8003620:	d143      	bne.n	80036aa <_malloc_r+0xd6>
 8003622:	2c00      	cmp	r4, #0
 8003624:	d04b      	beq.n	80036be <_malloc_r+0xea>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	4639      	mov	r1, r7
 800362a:	4630      	mov	r0, r6
 800362c:	eb04 0903 	add.w	r9, r4, r3
 8003630:	f000 fc86 	bl	8003f40 <_sbrk_r>
 8003634:	4581      	cmp	r9, r0
 8003636:	d142      	bne.n	80036be <_malloc_r+0xea>
 8003638:	6821      	ldr	r1, [r4, #0]
 800363a:	1a6d      	subs	r5, r5, r1
 800363c:	4629      	mov	r1, r5
 800363e:	4630      	mov	r0, r6
 8003640:	f7ff ffa6 	bl	8003590 <sbrk_aligned>
 8003644:	3001      	adds	r0, #1
 8003646:	d03a      	beq.n	80036be <_malloc_r+0xea>
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	442b      	add	r3, r5
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	f8d8 3000 	ldr.w	r3, [r8]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	bb62      	cbnz	r2, 80036b0 <_malloc_r+0xdc>
 8003656:	f8c8 7000 	str.w	r7, [r8]
 800365a:	e00f      	b.n	800367c <_malloc_r+0xa8>
 800365c:	6822      	ldr	r2, [r4, #0]
 800365e:	1b52      	subs	r2, r2, r5
 8003660:	d420      	bmi.n	80036a4 <_malloc_r+0xd0>
 8003662:	2a0b      	cmp	r2, #11
 8003664:	d917      	bls.n	8003696 <_malloc_r+0xc2>
 8003666:	1961      	adds	r1, r4, r5
 8003668:	42a3      	cmp	r3, r4
 800366a:	6025      	str	r5, [r4, #0]
 800366c:	bf18      	it	ne
 800366e:	6059      	strne	r1, [r3, #4]
 8003670:	6863      	ldr	r3, [r4, #4]
 8003672:	bf08      	it	eq
 8003674:	f8c8 1000 	streq.w	r1, [r8]
 8003678:	5162      	str	r2, [r4, r5]
 800367a:	604b      	str	r3, [r1, #4]
 800367c:	4630      	mov	r0, r6
 800367e:	f000 f82f 	bl	80036e0 <__malloc_unlock>
 8003682:	f104 000b 	add.w	r0, r4, #11
 8003686:	1d23      	adds	r3, r4, #4
 8003688:	f020 0007 	bic.w	r0, r0, #7
 800368c:	1ac2      	subs	r2, r0, r3
 800368e:	bf1c      	itt	ne
 8003690:	1a1b      	subne	r3, r3, r0
 8003692:	50a3      	strne	r3, [r4, r2]
 8003694:	e7af      	b.n	80035f6 <_malloc_r+0x22>
 8003696:	6862      	ldr	r2, [r4, #4]
 8003698:	42a3      	cmp	r3, r4
 800369a:	bf0c      	ite	eq
 800369c:	f8c8 2000 	streq.w	r2, [r8]
 80036a0:	605a      	strne	r2, [r3, #4]
 80036a2:	e7eb      	b.n	800367c <_malloc_r+0xa8>
 80036a4:	4623      	mov	r3, r4
 80036a6:	6864      	ldr	r4, [r4, #4]
 80036a8:	e7ae      	b.n	8003608 <_malloc_r+0x34>
 80036aa:	463c      	mov	r4, r7
 80036ac:	687f      	ldr	r7, [r7, #4]
 80036ae:	e7b6      	b.n	800361e <_malloc_r+0x4a>
 80036b0:	461a      	mov	r2, r3
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	42a3      	cmp	r3, r4
 80036b6:	d1fb      	bne.n	80036b0 <_malloc_r+0xdc>
 80036b8:	2300      	movs	r3, #0
 80036ba:	6053      	str	r3, [r2, #4]
 80036bc:	e7de      	b.n	800367c <_malloc_r+0xa8>
 80036be:	230c      	movs	r3, #12
 80036c0:	6033      	str	r3, [r6, #0]
 80036c2:	4630      	mov	r0, r6
 80036c4:	f000 f80c 	bl	80036e0 <__malloc_unlock>
 80036c8:	e794      	b.n	80035f4 <_malloc_r+0x20>
 80036ca:	6005      	str	r5, [r0, #0]
 80036cc:	e7d6      	b.n	800367c <_malloc_r+0xa8>
 80036ce:	bf00      	nop
 80036d0:	2000137c 	.word	0x2000137c

080036d4 <__malloc_lock>:
 80036d4:	4801      	ldr	r0, [pc, #4]	@ (80036dc <__malloc_lock+0x8>)
 80036d6:	f7ff bef8 	b.w	80034ca <__retarget_lock_acquire_recursive>
 80036da:	bf00      	nop
 80036dc:	20001374 	.word	0x20001374

080036e0 <__malloc_unlock>:
 80036e0:	4801      	ldr	r0, [pc, #4]	@ (80036e8 <__malloc_unlock+0x8>)
 80036e2:	f7ff bef3 	b.w	80034cc <__retarget_lock_release_recursive>
 80036e6:	bf00      	nop
 80036e8:	20001374 	.word	0x20001374

080036ec <__ssputs_r>:
 80036ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f0:	688e      	ldr	r6, [r1, #8]
 80036f2:	461f      	mov	r7, r3
 80036f4:	42be      	cmp	r6, r7
 80036f6:	680b      	ldr	r3, [r1, #0]
 80036f8:	4682      	mov	sl, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	4690      	mov	r8, r2
 80036fe:	d82d      	bhi.n	800375c <__ssputs_r+0x70>
 8003700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003704:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003708:	d026      	beq.n	8003758 <__ssputs_r+0x6c>
 800370a:	6965      	ldr	r5, [r4, #20]
 800370c:	6909      	ldr	r1, [r1, #16]
 800370e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003712:	eba3 0901 	sub.w	r9, r3, r1
 8003716:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800371a:	1c7b      	adds	r3, r7, #1
 800371c:	444b      	add	r3, r9
 800371e:	106d      	asrs	r5, r5, #1
 8003720:	429d      	cmp	r5, r3
 8003722:	bf38      	it	cc
 8003724:	461d      	movcc	r5, r3
 8003726:	0553      	lsls	r3, r2, #21
 8003728:	d527      	bpl.n	800377a <__ssputs_r+0x8e>
 800372a:	4629      	mov	r1, r5
 800372c:	f7ff ff52 	bl	80035d4 <_malloc_r>
 8003730:	4606      	mov	r6, r0
 8003732:	b360      	cbz	r0, 800378e <__ssputs_r+0xa2>
 8003734:	6921      	ldr	r1, [r4, #16]
 8003736:	464a      	mov	r2, r9
 8003738:	f7ff fed1 	bl	80034de <memcpy>
 800373c:	89a3      	ldrh	r3, [r4, #12]
 800373e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003746:	81a3      	strh	r3, [r4, #12]
 8003748:	6126      	str	r6, [r4, #16]
 800374a:	6165      	str	r5, [r4, #20]
 800374c:	444e      	add	r6, r9
 800374e:	eba5 0509 	sub.w	r5, r5, r9
 8003752:	6026      	str	r6, [r4, #0]
 8003754:	60a5      	str	r5, [r4, #8]
 8003756:	463e      	mov	r6, r7
 8003758:	42be      	cmp	r6, r7
 800375a:	d900      	bls.n	800375e <__ssputs_r+0x72>
 800375c:	463e      	mov	r6, r7
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	4632      	mov	r2, r6
 8003762:	4641      	mov	r1, r8
 8003764:	f000 fbb0 	bl	8003ec8 <memmove>
 8003768:	68a3      	ldr	r3, [r4, #8]
 800376a:	1b9b      	subs	r3, r3, r6
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	4433      	add	r3, r6
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	2000      	movs	r0, #0
 8003776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377a:	462a      	mov	r2, r5
 800377c:	f000 fbf0 	bl	8003f60 <_realloc_r>
 8003780:	4606      	mov	r6, r0
 8003782:	2800      	cmp	r0, #0
 8003784:	d1e0      	bne.n	8003748 <__ssputs_r+0x5c>
 8003786:	6921      	ldr	r1, [r4, #16]
 8003788:	4650      	mov	r0, sl
 800378a:	f7ff feb7 	bl	80034fc <_free_r>
 800378e:	230c      	movs	r3, #12
 8003790:	f8ca 3000 	str.w	r3, [sl]
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800379a:	81a3      	strh	r3, [r4, #12]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	e7e9      	b.n	8003776 <__ssputs_r+0x8a>
	...

080037a4 <_svfiprintf_r>:
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	4698      	mov	r8, r3
 80037aa:	898b      	ldrh	r3, [r1, #12]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	b09d      	sub	sp, #116	@ 0x74
 80037b0:	4607      	mov	r7, r0
 80037b2:	460d      	mov	r5, r1
 80037b4:	4614      	mov	r4, r2
 80037b6:	d510      	bpl.n	80037da <_svfiprintf_r+0x36>
 80037b8:	690b      	ldr	r3, [r1, #16]
 80037ba:	b973      	cbnz	r3, 80037da <_svfiprintf_r+0x36>
 80037bc:	2140      	movs	r1, #64	@ 0x40
 80037be:	f7ff ff09 	bl	80035d4 <_malloc_r>
 80037c2:	6028      	str	r0, [r5, #0]
 80037c4:	6128      	str	r0, [r5, #16]
 80037c6:	b930      	cbnz	r0, 80037d6 <_svfiprintf_r+0x32>
 80037c8:	230c      	movs	r3, #12
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	b01d      	add	sp, #116	@ 0x74
 80037d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d6:	2340      	movs	r3, #64	@ 0x40
 80037d8:	616b      	str	r3, [r5, #20]
 80037da:	2300      	movs	r3, #0
 80037dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80037de:	2320      	movs	r3, #32
 80037e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80037e8:	2330      	movs	r3, #48	@ 0x30
 80037ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003988 <_svfiprintf_r+0x1e4>
 80037ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037f2:	f04f 0901 	mov.w	r9, #1
 80037f6:	4623      	mov	r3, r4
 80037f8:	469a      	mov	sl, r3
 80037fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037fe:	b10a      	cbz	r2, 8003804 <_svfiprintf_r+0x60>
 8003800:	2a25      	cmp	r2, #37	@ 0x25
 8003802:	d1f9      	bne.n	80037f8 <_svfiprintf_r+0x54>
 8003804:	ebba 0b04 	subs.w	fp, sl, r4
 8003808:	d00b      	beq.n	8003822 <_svfiprintf_r+0x7e>
 800380a:	465b      	mov	r3, fp
 800380c:	4622      	mov	r2, r4
 800380e:	4629      	mov	r1, r5
 8003810:	4638      	mov	r0, r7
 8003812:	f7ff ff6b 	bl	80036ec <__ssputs_r>
 8003816:	3001      	adds	r0, #1
 8003818:	f000 80a7 	beq.w	800396a <_svfiprintf_r+0x1c6>
 800381c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800381e:	445a      	add	r2, fp
 8003820:	9209      	str	r2, [sp, #36]	@ 0x24
 8003822:	f89a 3000 	ldrb.w	r3, [sl]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 809f 	beq.w	800396a <_svfiprintf_r+0x1c6>
 800382c:	2300      	movs	r3, #0
 800382e:	f04f 32ff 	mov.w	r2, #4294967295
 8003832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003836:	f10a 0a01 	add.w	sl, sl, #1
 800383a:	9304      	str	r3, [sp, #16]
 800383c:	9307      	str	r3, [sp, #28]
 800383e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003842:	931a      	str	r3, [sp, #104]	@ 0x68
 8003844:	4654      	mov	r4, sl
 8003846:	2205      	movs	r2, #5
 8003848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800384c:	484e      	ldr	r0, [pc, #312]	@ (8003988 <_svfiprintf_r+0x1e4>)
 800384e:	f7fc fcc7 	bl	80001e0 <memchr>
 8003852:	9a04      	ldr	r2, [sp, #16]
 8003854:	b9d8      	cbnz	r0, 800388e <_svfiprintf_r+0xea>
 8003856:	06d0      	lsls	r0, r2, #27
 8003858:	bf44      	itt	mi
 800385a:	2320      	movmi	r3, #32
 800385c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003860:	0711      	lsls	r1, r2, #28
 8003862:	bf44      	itt	mi
 8003864:	232b      	movmi	r3, #43	@ 0x2b
 8003866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800386a:	f89a 3000 	ldrb.w	r3, [sl]
 800386e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003870:	d015      	beq.n	800389e <_svfiprintf_r+0xfa>
 8003872:	9a07      	ldr	r2, [sp, #28]
 8003874:	4654      	mov	r4, sl
 8003876:	2000      	movs	r0, #0
 8003878:	f04f 0c0a 	mov.w	ip, #10
 800387c:	4621      	mov	r1, r4
 800387e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003882:	3b30      	subs	r3, #48	@ 0x30
 8003884:	2b09      	cmp	r3, #9
 8003886:	d94b      	bls.n	8003920 <_svfiprintf_r+0x17c>
 8003888:	b1b0      	cbz	r0, 80038b8 <_svfiprintf_r+0x114>
 800388a:	9207      	str	r2, [sp, #28]
 800388c:	e014      	b.n	80038b8 <_svfiprintf_r+0x114>
 800388e:	eba0 0308 	sub.w	r3, r0, r8
 8003892:	fa09 f303 	lsl.w	r3, r9, r3
 8003896:	4313      	orrs	r3, r2
 8003898:	9304      	str	r3, [sp, #16]
 800389a:	46a2      	mov	sl, r4
 800389c:	e7d2      	b.n	8003844 <_svfiprintf_r+0xa0>
 800389e:	9b03      	ldr	r3, [sp, #12]
 80038a0:	1d19      	adds	r1, r3, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	9103      	str	r1, [sp, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bfbb      	ittet	lt
 80038aa:	425b      	neglt	r3, r3
 80038ac:	f042 0202 	orrlt.w	r2, r2, #2
 80038b0:	9307      	strge	r3, [sp, #28]
 80038b2:	9307      	strlt	r3, [sp, #28]
 80038b4:	bfb8      	it	lt
 80038b6:	9204      	strlt	r2, [sp, #16]
 80038b8:	7823      	ldrb	r3, [r4, #0]
 80038ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80038bc:	d10a      	bne.n	80038d4 <_svfiprintf_r+0x130>
 80038be:	7863      	ldrb	r3, [r4, #1]
 80038c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80038c2:	d132      	bne.n	800392a <_svfiprintf_r+0x186>
 80038c4:	9b03      	ldr	r3, [sp, #12]
 80038c6:	1d1a      	adds	r2, r3, #4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	9203      	str	r2, [sp, #12]
 80038cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038d0:	3402      	adds	r4, #2
 80038d2:	9305      	str	r3, [sp, #20]
 80038d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800398c <_svfiprintf_r+0x1e8>
 80038d8:	7821      	ldrb	r1, [r4, #0]
 80038da:	2203      	movs	r2, #3
 80038dc:	4650      	mov	r0, sl
 80038de:	f7fc fc7f 	bl	80001e0 <memchr>
 80038e2:	b138      	cbz	r0, 80038f4 <_svfiprintf_r+0x150>
 80038e4:	9b04      	ldr	r3, [sp, #16]
 80038e6:	eba0 000a 	sub.w	r0, r0, sl
 80038ea:	2240      	movs	r2, #64	@ 0x40
 80038ec:	4082      	lsls	r2, r0
 80038ee:	4313      	orrs	r3, r2
 80038f0:	3401      	adds	r4, #1
 80038f2:	9304      	str	r3, [sp, #16]
 80038f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038f8:	4825      	ldr	r0, [pc, #148]	@ (8003990 <_svfiprintf_r+0x1ec>)
 80038fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038fe:	2206      	movs	r2, #6
 8003900:	f7fc fc6e 	bl	80001e0 <memchr>
 8003904:	2800      	cmp	r0, #0
 8003906:	d036      	beq.n	8003976 <_svfiprintf_r+0x1d2>
 8003908:	4b22      	ldr	r3, [pc, #136]	@ (8003994 <_svfiprintf_r+0x1f0>)
 800390a:	bb1b      	cbnz	r3, 8003954 <_svfiprintf_r+0x1b0>
 800390c:	9b03      	ldr	r3, [sp, #12]
 800390e:	3307      	adds	r3, #7
 8003910:	f023 0307 	bic.w	r3, r3, #7
 8003914:	3308      	adds	r3, #8
 8003916:	9303      	str	r3, [sp, #12]
 8003918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800391a:	4433      	add	r3, r6
 800391c:	9309      	str	r3, [sp, #36]	@ 0x24
 800391e:	e76a      	b.n	80037f6 <_svfiprintf_r+0x52>
 8003920:	fb0c 3202 	mla	r2, ip, r2, r3
 8003924:	460c      	mov	r4, r1
 8003926:	2001      	movs	r0, #1
 8003928:	e7a8      	b.n	800387c <_svfiprintf_r+0xd8>
 800392a:	2300      	movs	r3, #0
 800392c:	3401      	adds	r4, #1
 800392e:	9305      	str	r3, [sp, #20]
 8003930:	4619      	mov	r1, r3
 8003932:	f04f 0c0a 	mov.w	ip, #10
 8003936:	4620      	mov	r0, r4
 8003938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800393c:	3a30      	subs	r2, #48	@ 0x30
 800393e:	2a09      	cmp	r2, #9
 8003940:	d903      	bls.n	800394a <_svfiprintf_r+0x1a6>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0c6      	beq.n	80038d4 <_svfiprintf_r+0x130>
 8003946:	9105      	str	r1, [sp, #20]
 8003948:	e7c4      	b.n	80038d4 <_svfiprintf_r+0x130>
 800394a:	fb0c 2101 	mla	r1, ip, r1, r2
 800394e:	4604      	mov	r4, r0
 8003950:	2301      	movs	r3, #1
 8003952:	e7f0      	b.n	8003936 <_svfiprintf_r+0x192>
 8003954:	ab03      	add	r3, sp, #12
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	462a      	mov	r2, r5
 800395a:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <_svfiprintf_r+0x1f4>)
 800395c:	a904      	add	r1, sp, #16
 800395e:	4638      	mov	r0, r7
 8003960:	f3af 8000 	nop.w
 8003964:	1c42      	adds	r2, r0, #1
 8003966:	4606      	mov	r6, r0
 8003968:	d1d6      	bne.n	8003918 <_svfiprintf_r+0x174>
 800396a:	89ab      	ldrh	r3, [r5, #12]
 800396c:	065b      	lsls	r3, r3, #25
 800396e:	f53f af2d 	bmi.w	80037cc <_svfiprintf_r+0x28>
 8003972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003974:	e72c      	b.n	80037d0 <_svfiprintf_r+0x2c>
 8003976:	ab03      	add	r3, sp, #12
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	462a      	mov	r2, r5
 800397c:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <_svfiprintf_r+0x1f4>)
 800397e:	a904      	add	r1, sp, #16
 8003980:	4638      	mov	r0, r7
 8003982:	f000 f879 	bl	8003a78 <_printf_i>
 8003986:	e7ed      	b.n	8003964 <_svfiprintf_r+0x1c0>
 8003988:	08004172 	.word	0x08004172
 800398c:	08004178 	.word	0x08004178
 8003990:	0800417c 	.word	0x0800417c
 8003994:	00000000 	.word	0x00000000
 8003998:	080036ed 	.word	0x080036ed

0800399c <_printf_common>:
 800399c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a0:	4616      	mov	r6, r2
 80039a2:	4698      	mov	r8, r3
 80039a4:	688a      	ldr	r2, [r1, #8]
 80039a6:	690b      	ldr	r3, [r1, #16]
 80039a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039ac:	4293      	cmp	r3, r2
 80039ae:	bfb8      	it	lt
 80039b0:	4613      	movlt	r3, r2
 80039b2:	6033      	str	r3, [r6, #0]
 80039b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039b8:	4607      	mov	r7, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	b10a      	cbz	r2, 80039c2 <_printf_common+0x26>
 80039be:	3301      	adds	r3, #1
 80039c0:	6033      	str	r3, [r6, #0]
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	0699      	lsls	r1, r3, #26
 80039c6:	bf42      	ittt	mi
 80039c8:	6833      	ldrmi	r3, [r6, #0]
 80039ca:	3302      	addmi	r3, #2
 80039cc:	6033      	strmi	r3, [r6, #0]
 80039ce:	6825      	ldr	r5, [r4, #0]
 80039d0:	f015 0506 	ands.w	r5, r5, #6
 80039d4:	d106      	bne.n	80039e4 <_printf_common+0x48>
 80039d6:	f104 0a19 	add.w	sl, r4, #25
 80039da:	68e3      	ldr	r3, [r4, #12]
 80039dc:	6832      	ldr	r2, [r6, #0]
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	42ab      	cmp	r3, r5
 80039e2:	dc26      	bgt.n	8003a32 <_printf_common+0x96>
 80039e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039e8:	6822      	ldr	r2, [r4, #0]
 80039ea:	3b00      	subs	r3, #0
 80039ec:	bf18      	it	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	0692      	lsls	r2, r2, #26
 80039f2:	d42b      	bmi.n	8003a4c <_printf_common+0xb0>
 80039f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039f8:	4641      	mov	r1, r8
 80039fa:	4638      	mov	r0, r7
 80039fc:	47c8      	blx	r9
 80039fe:	3001      	adds	r0, #1
 8003a00:	d01e      	beq.n	8003a40 <_printf_common+0xa4>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	6922      	ldr	r2, [r4, #16]
 8003a06:	f003 0306 	and.w	r3, r3, #6
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf02      	ittt	eq
 8003a0e:	68e5      	ldreq	r5, [r4, #12]
 8003a10:	6833      	ldreq	r3, [r6, #0]
 8003a12:	1aed      	subeq	r5, r5, r3
 8003a14:	68a3      	ldr	r3, [r4, #8]
 8003a16:	bf0c      	ite	eq
 8003a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a1c:	2500      	movne	r5, #0
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	bfc4      	itt	gt
 8003a22:	1a9b      	subgt	r3, r3, r2
 8003a24:	18ed      	addgt	r5, r5, r3
 8003a26:	2600      	movs	r6, #0
 8003a28:	341a      	adds	r4, #26
 8003a2a:	42b5      	cmp	r5, r6
 8003a2c:	d11a      	bne.n	8003a64 <_printf_common+0xc8>
 8003a2e:	2000      	movs	r0, #0
 8003a30:	e008      	b.n	8003a44 <_printf_common+0xa8>
 8003a32:	2301      	movs	r3, #1
 8003a34:	4652      	mov	r2, sl
 8003a36:	4641      	mov	r1, r8
 8003a38:	4638      	mov	r0, r7
 8003a3a:	47c8      	blx	r9
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d103      	bne.n	8003a48 <_printf_common+0xac>
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
 8003a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a48:	3501      	adds	r5, #1
 8003a4a:	e7c6      	b.n	80039da <_printf_common+0x3e>
 8003a4c:	18e1      	adds	r1, r4, r3
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	2030      	movs	r0, #48	@ 0x30
 8003a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a56:	4422      	add	r2, r4
 8003a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a60:	3302      	adds	r3, #2
 8003a62:	e7c7      	b.n	80039f4 <_printf_common+0x58>
 8003a64:	2301      	movs	r3, #1
 8003a66:	4622      	mov	r2, r4
 8003a68:	4641      	mov	r1, r8
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	47c8      	blx	r9
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d0e6      	beq.n	8003a40 <_printf_common+0xa4>
 8003a72:	3601      	adds	r6, #1
 8003a74:	e7d9      	b.n	8003a2a <_printf_common+0x8e>
	...

08003a78 <_printf_i>:
 8003a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7c:	7e0f      	ldrb	r7, [r1, #24]
 8003a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a80:	2f78      	cmp	r7, #120	@ 0x78
 8003a82:	4691      	mov	r9, r2
 8003a84:	4680      	mov	r8, r0
 8003a86:	460c      	mov	r4, r1
 8003a88:	469a      	mov	sl, r3
 8003a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a8e:	d807      	bhi.n	8003aa0 <_printf_i+0x28>
 8003a90:	2f62      	cmp	r7, #98	@ 0x62
 8003a92:	d80a      	bhi.n	8003aaa <_printf_i+0x32>
 8003a94:	2f00      	cmp	r7, #0
 8003a96:	f000 80d1 	beq.w	8003c3c <_printf_i+0x1c4>
 8003a9a:	2f58      	cmp	r7, #88	@ 0x58
 8003a9c:	f000 80b8 	beq.w	8003c10 <_printf_i+0x198>
 8003aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003aa8:	e03a      	b.n	8003b20 <_printf_i+0xa8>
 8003aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003aae:	2b15      	cmp	r3, #21
 8003ab0:	d8f6      	bhi.n	8003aa0 <_printf_i+0x28>
 8003ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ab8 <_printf_i+0x40>)
 8003ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ab8:	08003b11 	.word	0x08003b11
 8003abc:	08003b25 	.word	0x08003b25
 8003ac0:	08003aa1 	.word	0x08003aa1
 8003ac4:	08003aa1 	.word	0x08003aa1
 8003ac8:	08003aa1 	.word	0x08003aa1
 8003acc:	08003aa1 	.word	0x08003aa1
 8003ad0:	08003b25 	.word	0x08003b25
 8003ad4:	08003aa1 	.word	0x08003aa1
 8003ad8:	08003aa1 	.word	0x08003aa1
 8003adc:	08003aa1 	.word	0x08003aa1
 8003ae0:	08003aa1 	.word	0x08003aa1
 8003ae4:	08003c23 	.word	0x08003c23
 8003ae8:	08003b4f 	.word	0x08003b4f
 8003aec:	08003bdd 	.word	0x08003bdd
 8003af0:	08003aa1 	.word	0x08003aa1
 8003af4:	08003aa1 	.word	0x08003aa1
 8003af8:	08003c45 	.word	0x08003c45
 8003afc:	08003aa1 	.word	0x08003aa1
 8003b00:	08003b4f 	.word	0x08003b4f
 8003b04:	08003aa1 	.word	0x08003aa1
 8003b08:	08003aa1 	.word	0x08003aa1
 8003b0c:	08003be5 	.word	0x08003be5
 8003b10:	6833      	ldr	r3, [r6, #0]
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6032      	str	r2, [r6, #0]
 8003b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b20:	2301      	movs	r3, #1
 8003b22:	e09c      	b.n	8003c5e <_printf_i+0x1e6>
 8003b24:	6833      	ldr	r3, [r6, #0]
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	1d19      	adds	r1, r3, #4
 8003b2a:	6031      	str	r1, [r6, #0]
 8003b2c:	0606      	lsls	r6, r0, #24
 8003b2e:	d501      	bpl.n	8003b34 <_printf_i+0xbc>
 8003b30:	681d      	ldr	r5, [r3, #0]
 8003b32:	e003      	b.n	8003b3c <_printf_i+0xc4>
 8003b34:	0645      	lsls	r5, r0, #25
 8003b36:	d5fb      	bpl.n	8003b30 <_printf_i+0xb8>
 8003b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b3c:	2d00      	cmp	r5, #0
 8003b3e:	da03      	bge.n	8003b48 <_printf_i+0xd0>
 8003b40:	232d      	movs	r3, #45	@ 0x2d
 8003b42:	426d      	negs	r5, r5
 8003b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b48:	4858      	ldr	r0, [pc, #352]	@ (8003cac <_printf_i+0x234>)
 8003b4a:	230a      	movs	r3, #10
 8003b4c:	e011      	b.n	8003b72 <_printf_i+0xfa>
 8003b4e:	6821      	ldr	r1, [r4, #0]
 8003b50:	6833      	ldr	r3, [r6, #0]
 8003b52:	0608      	lsls	r0, r1, #24
 8003b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b58:	d402      	bmi.n	8003b60 <_printf_i+0xe8>
 8003b5a:	0649      	lsls	r1, r1, #25
 8003b5c:	bf48      	it	mi
 8003b5e:	b2ad      	uxthmi	r5, r5
 8003b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b62:	4852      	ldr	r0, [pc, #328]	@ (8003cac <_printf_i+0x234>)
 8003b64:	6033      	str	r3, [r6, #0]
 8003b66:	bf14      	ite	ne
 8003b68:	230a      	movne	r3, #10
 8003b6a:	2308      	moveq	r3, #8
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b72:	6866      	ldr	r6, [r4, #4]
 8003b74:	60a6      	str	r6, [r4, #8]
 8003b76:	2e00      	cmp	r6, #0
 8003b78:	db05      	blt.n	8003b86 <_printf_i+0x10e>
 8003b7a:	6821      	ldr	r1, [r4, #0]
 8003b7c:	432e      	orrs	r6, r5
 8003b7e:	f021 0104 	bic.w	r1, r1, #4
 8003b82:	6021      	str	r1, [r4, #0]
 8003b84:	d04b      	beq.n	8003c1e <_printf_i+0x1a6>
 8003b86:	4616      	mov	r6, r2
 8003b88:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b8c:	fb03 5711 	mls	r7, r3, r1, r5
 8003b90:	5dc7      	ldrb	r7, [r0, r7]
 8003b92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b96:	462f      	mov	r7, r5
 8003b98:	42bb      	cmp	r3, r7
 8003b9a:	460d      	mov	r5, r1
 8003b9c:	d9f4      	bls.n	8003b88 <_printf_i+0x110>
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d10b      	bne.n	8003bba <_printf_i+0x142>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	07df      	lsls	r7, r3, #31
 8003ba6:	d508      	bpl.n	8003bba <_printf_i+0x142>
 8003ba8:	6923      	ldr	r3, [r4, #16]
 8003baa:	6861      	ldr	r1, [r4, #4]
 8003bac:	4299      	cmp	r1, r3
 8003bae:	bfde      	ittt	le
 8003bb0:	2330      	movle	r3, #48	@ 0x30
 8003bb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bba:	1b92      	subs	r2, r2, r6
 8003bbc:	6122      	str	r2, [r4, #16]
 8003bbe:	f8cd a000 	str.w	sl, [sp]
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	aa03      	add	r2, sp, #12
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4640      	mov	r0, r8
 8003bca:	f7ff fee7 	bl	800399c <_printf_common>
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d14a      	bne.n	8003c68 <_printf_i+0x1f0>
 8003bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd6:	b004      	add	sp, #16
 8003bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	f043 0320 	orr.w	r3, r3, #32
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	4832      	ldr	r0, [pc, #200]	@ (8003cb0 <_printf_i+0x238>)
 8003be6:	2778      	movs	r7, #120	@ 0x78
 8003be8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	6831      	ldr	r1, [r6, #0]
 8003bf0:	061f      	lsls	r7, r3, #24
 8003bf2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bf6:	d402      	bmi.n	8003bfe <_printf_i+0x186>
 8003bf8:	065f      	lsls	r7, r3, #25
 8003bfa:	bf48      	it	mi
 8003bfc:	b2ad      	uxthmi	r5, r5
 8003bfe:	6031      	str	r1, [r6, #0]
 8003c00:	07d9      	lsls	r1, r3, #31
 8003c02:	bf44      	itt	mi
 8003c04:	f043 0320 	orrmi.w	r3, r3, #32
 8003c08:	6023      	strmi	r3, [r4, #0]
 8003c0a:	b11d      	cbz	r5, 8003c14 <_printf_i+0x19c>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	e7ad      	b.n	8003b6c <_printf_i+0xf4>
 8003c10:	4826      	ldr	r0, [pc, #152]	@ (8003cac <_printf_i+0x234>)
 8003c12:	e7e9      	b.n	8003be8 <_printf_i+0x170>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	f023 0320 	bic.w	r3, r3, #32
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	e7f6      	b.n	8003c0c <_printf_i+0x194>
 8003c1e:	4616      	mov	r6, r2
 8003c20:	e7bd      	b.n	8003b9e <_printf_i+0x126>
 8003c22:	6833      	ldr	r3, [r6, #0]
 8003c24:	6825      	ldr	r5, [r4, #0]
 8003c26:	6961      	ldr	r1, [r4, #20]
 8003c28:	1d18      	adds	r0, r3, #4
 8003c2a:	6030      	str	r0, [r6, #0]
 8003c2c:	062e      	lsls	r6, r5, #24
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	d501      	bpl.n	8003c36 <_printf_i+0x1be>
 8003c32:	6019      	str	r1, [r3, #0]
 8003c34:	e002      	b.n	8003c3c <_printf_i+0x1c4>
 8003c36:	0668      	lsls	r0, r5, #25
 8003c38:	d5fb      	bpl.n	8003c32 <_printf_i+0x1ba>
 8003c3a:	8019      	strh	r1, [r3, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6123      	str	r3, [r4, #16]
 8003c40:	4616      	mov	r6, r2
 8003c42:	e7bc      	b.n	8003bbe <_printf_i+0x146>
 8003c44:	6833      	ldr	r3, [r6, #0]
 8003c46:	1d1a      	adds	r2, r3, #4
 8003c48:	6032      	str	r2, [r6, #0]
 8003c4a:	681e      	ldr	r6, [r3, #0]
 8003c4c:	6862      	ldr	r2, [r4, #4]
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7fc fac5 	bl	80001e0 <memchr>
 8003c56:	b108      	cbz	r0, 8003c5c <_printf_i+0x1e4>
 8003c58:	1b80      	subs	r0, r0, r6
 8003c5a:	6060      	str	r0, [r4, #4]
 8003c5c:	6863      	ldr	r3, [r4, #4]
 8003c5e:	6123      	str	r3, [r4, #16]
 8003c60:	2300      	movs	r3, #0
 8003c62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c66:	e7aa      	b.n	8003bbe <_printf_i+0x146>
 8003c68:	6923      	ldr	r3, [r4, #16]
 8003c6a:	4632      	mov	r2, r6
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	4640      	mov	r0, r8
 8003c70:	47d0      	blx	sl
 8003c72:	3001      	adds	r0, #1
 8003c74:	d0ad      	beq.n	8003bd2 <_printf_i+0x15a>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	079b      	lsls	r3, r3, #30
 8003c7a:	d413      	bmi.n	8003ca4 <_printf_i+0x22c>
 8003c7c:	68e0      	ldr	r0, [r4, #12]
 8003c7e:	9b03      	ldr	r3, [sp, #12]
 8003c80:	4298      	cmp	r0, r3
 8003c82:	bfb8      	it	lt
 8003c84:	4618      	movlt	r0, r3
 8003c86:	e7a6      	b.n	8003bd6 <_printf_i+0x15e>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4632      	mov	r2, r6
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	4640      	mov	r0, r8
 8003c90:	47d0      	blx	sl
 8003c92:	3001      	adds	r0, #1
 8003c94:	d09d      	beq.n	8003bd2 <_printf_i+0x15a>
 8003c96:	3501      	adds	r5, #1
 8003c98:	68e3      	ldr	r3, [r4, #12]
 8003c9a:	9903      	ldr	r1, [sp, #12]
 8003c9c:	1a5b      	subs	r3, r3, r1
 8003c9e:	42ab      	cmp	r3, r5
 8003ca0:	dcf2      	bgt.n	8003c88 <_printf_i+0x210>
 8003ca2:	e7eb      	b.n	8003c7c <_printf_i+0x204>
 8003ca4:	2500      	movs	r5, #0
 8003ca6:	f104 0619 	add.w	r6, r4, #25
 8003caa:	e7f5      	b.n	8003c98 <_printf_i+0x220>
 8003cac:	08004183 	.word	0x08004183
 8003cb0:	08004194 	.word	0x08004194

08003cb4 <__sflush_r>:
 8003cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	0716      	lsls	r6, r2, #28
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	d454      	bmi.n	8003d6c <__sflush_r+0xb8>
 8003cc2:	684b      	ldr	r3, [r1, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	dc02      	bgt.n	8003cce <__sflush_r+0x1a>
 8003cc8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	dd48      	ble.n	8003d60 <__sflush_r+0xac>
 8003cce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003cd0:	2e00      	cmp	r6, #0
 8003cd2:	d045      	beq.n	8003d60 <__sflush_r+0xac>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003cda:	682f      	ldr	r7, [r5, #0]
 8003cdc:	6a21      	ldr	r1, [r4, #32]
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	d030      	beq.n	8003d44 <__sflush_r+0x90>
 8003ce2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	0759      	lsls	r1, r3, #29
 8003ce8:	d505      	bpl.n	8003cf6 <__sflush_r+0x42>
 8003cea:	6863      	ldr	r3, [r4, #4]
 8003cec:	1ad2      	subs	r2, r2, r3
 8003cee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003cf0:	b10b      	cbz	r3, 8003cf6 <__sflush_r+0x42>
 8003cf2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003cf4:	1ad2      	subs	r2, r2, r3
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003cfa:	6a21      	ldr	r1, [r4, #32]
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	47b0      	blx	r6
 8003d00:	1c43      	adds	r3, r0, #1
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	d106      	bne.n	8003d14 <__sflush_r+0x60>
 8003d06:	6829      	ldr	r1, [r5, #0]
 8003d08:	291d      	cmp	r1, #29
 8003d0a:	d82b      	bhi.n	8003d64 <__sflush_r+0xb0>
 8003d0c:	4a28      	ldr	r2, [pc, #160]	@ (8003db0 <__sflush_r+0xfc>)
 8003d0e:	40ca      	lsrs	r2, r1
 8003d10:	07d6      	lsls	r6, r2, #31
 8003d12:	d527      	bpl.n	8003d64 <__sflush_r+0xb0>
 8003d14:	2200      	movs	r2, #0
 8003d16:	6062      	str	r2, [r4, #4]
 8003d18:	04d9      	lsls	r1, r3, #19
 8003d1a:	6922      	ldr	r2, [r4, #16]
 8003d1c:	6022      	str	r2, [r4, #0]
 8003d1e:	d504      	bpl.n	8003d2a <__sflush_r+0x76>
 8003d20:	1c42      	adds	r2, r0, #1
 8003d22:	d101      	bne.n	8003d28 <__sflush_r+0x74>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	b903      	cbnz	r3, 8003d2a <__sflush_r+0x76>
 8003d28:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d2c:	602f      	str	r7, [r5, #0]
 8003d2e:	b1b9      	cbz	r1, 8003d60 <__sflush_r+0xac>
 8003d30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d34:	4299      	cmp	r1, r3
 8003d36:	d002      	beq.n	8003d3e <__sflush_r+0x8a>
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f7ff fbdf 	bl	80034fc <_free_r>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d42:	e00d      	b.n	8003d60 <__sflush_r+0xac>
 8003d44:	2301      	movs	r3, #1
 8003d46:	4628      	mov	r0, r5
 8003d48:	47b0      	blx	r6
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	1c50      	adds	r0, r2, #1
 8003d4e:	d1c9      	bne.n	8003ce4 <__sflush_r+0x30>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0c6      	beq.n	8003ce4 <__sflush_r+0x30>
 8003d56:	2b1d      	cmp	r3, #29
 8003d58:	d001      	beq.n	8003d5e <__sflush_r+0xaa>
 8003d5a:	2b16      	cmp	r3, #22
 8003d5c:	d11d      	bne.n	8003d9a <__sflush_r+0xe6>
 8003d5e:	602f      	str	r7, [r5, #0]
 8003d60:	2000      	movs	r0, #0
 8003d62:	e021      	b.n	8003da8 <__sflush_r+0xf4>
 8003d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d68:	b21b      	sxth	r3, r3
 8003d6a:	e01a      	b.n	8003da2 <__sflush_r+0xee>
 8003d6c:	690f      	ldr	r7, [r1, #16]
 8003d6e:	2f00      	cmp	r7, #0
 8003d70:	d0f6      	beq.n	8003d60 <__sflush_r+0xac>
 8003d72:	0793      	lsls	r3, r2, #30
 8003d74:	680e      	ldr	r6, [r1, #0]
 8003d76:	bf08      	it	eq
 8003d78:	694b      	ldreq	r3, [r1, #20]
 8003d7a:	600f      	str	r7, [r1, #0]
 8003d7c:	bf18      	it	ne
 8003d7e:	2300      	movne	r3, #0
 8003d80:	1bf6      	subs	r6, r6, r7
 8003d82:	608b      	str	r3, [r1, #8]
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	ddeb      	ble.n	8003d60 <__sflush_r+0xac>
 8003d88:	6a21      	ldr	r1, [r4, #32]
 8003d8a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003d8e:	4633      	mov	r3, r6
 8003d90:	463a      	mov	r2, r7
 8003d92:	4628      	mov	r0, r5
 8003d94:	47e0      	blx	ip
 8003d96:	2800      	cmp	r0, #0
 8003d98:	dc07      	bgt.n	8003daa <__sflush_r+0xf6>
 8003d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003daa:	4407      	add	r7, r0
 8003dac:	1a36      	subs	r6, r6, r0
 8003dae:	e7e9      	b.n	8003d84 <__sflush_r+0xd0>
 8003db0:	20400001 	.word	0x20400001

08003db4 <_fflush_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	4605      	mov	r5, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	b913      	cbnz	r3, 8003dc4 <_fflush_r+0x10>
 8003dbe:	2500      	movs	r5, #0
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	b118      	cbz	r0, 8003dce <_fflush_r+0x1a>
 8003dc6:	6a03      	ldr	r3, [r0, #32]
 8003dc8:	b90b      	cbnz	r3, 8003dce <_fflush_r+0x1a>
 8003dca:	f7ff f967 	bl	800309c <__sinit>
 8003dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f3      	beq.n	8003dbe <_fflush_r+0xa>
 8003dd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003dd8:	07d0      	lsls	r0, r2, #31
 8003dda:	d404      	bmi.n	8003de6 <_fflush_r+0x32>
 8003ddc:	0599      	lsls	r1, r3, #22
 8003dde:	d402      	bmi.n	8003de6 <_fflush_r+0x32>
 8003de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003de2:	f7ff fb72 	bl	80034ca <__retarget_lock_acquire_recursive>
 8003de6:	4628      	mov	r0, r5
 8003de8:	4621      	mov	r1, r4
 8003dea:	f7ff ff63 	bl	8003cb4 <__sflush_r>
 8003dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003df0:	07da      	lsls	r2, r3, #31
 8003df2:	4605      	mov	r5, r0
 8003df4:	d4e4      	bmi.n	8003dc0 <_fflush_r+0xc>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	059b      	lsls	r3, r3, #22
 8003dfa:	d4e1      	bmi.n	8003dc0 <_fflush_r+0xc>
 8003dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dfe:	f7ff fb65 	bl	80034cc <__retarget_lock_release_recursive>
 8003e02:	e7dd      	b.n	8003dc0 <_fflush_r+0xc>

08003e04 <__swhatbuf_r>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	460c      	mov	r4, r1
 8003e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	b096      	sub	sp, #88	@ 0x58
 8003e10:	4615      	mov	r5, r2
 8003e12:	461e      	mov	r6, r3
 8003e14:	da0d      	bge.n	8003e32 <__swhatbuf_r+0x2e>
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e1c:	f04f 0100 	mov.w	r1, #0
 8003e20:	bf14      	ite	ne
 8003e22:	2340      	movne	r3, #64	@ 0x40
 8003e24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e28:	2000      	movs	r0, #0
 8003e2a:	6031      	str	r1, [r6, #0]
 8003e2c:	602b      	str	r3, [r5, #0]
 8003e2e:	b016      	add	sp, #88	@ 0x58
 8003e30:	bd70      	pop	{r4, r5, r6, pc}
 8003e32:	466a      	mov	r2, sp
 8003e34:	f000 f862 	bl	8003efc <_fstat_r>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	dbec      	blt.n	8003e16 <__swhatbuf_r+0x12>
 8003e3c:	9901      	ldr	r1, [sp, #4]
 8003e3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e46:	4259      	negs	r1, r3
 8003e48:	4159      	adcs	r1, r3
 8003e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e4e:	e7eb      	b.n	8003e28 <__swhatbuf_r+0x24>

08003e50 <__smakebuf_r>:
 8003e50:	898b      	ldrh	r3, [r1, #12]
 8003e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e54:	079d      	lsls	r5, r3, #30
 8003e56:	4606      	mov	r6, r0
 8003e58:	460c      	mov	r4, r1
 8003e5a:	d507      	bpl.n	8003e6c <__smakebuf_r+0x1c>
 8003e5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	6123      	str	r3, [r4, #16]
 8003e64:	2301      	movs	r3, #1
 8003e66:	6163      	str	r3, [r4, #20]
 8003e68:	b003      	add	sp, #12
 8003e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6c:	ab01      	add	r3, sp, #4
 8003e6e:	466a      	mov	r2, sp
 8003e70:	f7ff ffc8 	bl	8003e04 <__swhatbuf_r>
 8003e74:	9f00      	ldr	r7, [sp, #0]
 8003e76:	4605      	mov	r5, r0
 8003e78:	4639      	mov	r1, r7
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f7ff fbaa 	bl	80035d4 <_malloc_r>
 8003e80:	b948      	cbnz	r0, 8003e96 <__smakebuf_r+0x46>
 8003e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e86:	059a      	lsls	r2, r3, #22
 8003e88:	d4ee      	bmi.n	8003e68 <__smakebuf_r+0x18>
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	f043 0302 	orr.w	r3, r3, #2
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	e7e2      	b.n	8003e5c <__smakebuf_r+0xc>
 8003e96:	89a3      	ldrh	r3, [r4, #12]
 8003e98:	6020      	str	r0, [r4, #0]
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	9b01      	ldr	r3, [sp, #4]
 8003ea2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ea6:	b15b      	cbz	r3, 8003ec0 <__smakebuf_r+0x70>
 8003ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 f837 	bl	8003f20 <_isatty_r>
 8003eb2:	b128      	cbz	r0, 8003ec0 <__smakebuf_r+0x70>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	431d      	orrs	r5, r3
 8003ec4:	81a5      	strh	r5, [r4, #12]
 8003ec6:	e7cf      	b.n	8003e68 <__smakebuf_r+0x18>

08003ec8 <memmove>:
 8003ec8:	4288      	cmp	r0, r1
 8003eca:	b510      	push	{r4, lr}
 8003ecc:	eb01 0402 	add.w	r4, r1, r2
 8003ed0:	d902      	bls.n	8003ed8 <memmove+0x10>
 8003ed2:	4284      	cmp	r4, r0
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	d807      	bhi.n	8003ee8 <memmove+0x20>
 8003ed8:	1e43      	subs	r3, r0, #1
 8003eda:	42a1      	cmp	r1, r4
 8003edc:	d008      	beq.n	8003ef0 <memmove+0x28>
 8003ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ee6:	e7f8      	b.n	8003eda <memmove+0x12>
 8003ee8:	4402      	add	r2, r0
 8003eea:	4601      	mov	r1, r0
 8003eec:	428a      	cmp	r2, r1
 8003eee:	d100      	bne.n	8003ef2 <memmove+0x2a>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003efa:	e7f7      	b.n	8003eec <memmove+0x24>

08003efc <_fstat_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d07      	ldr	r5, [pc, #28]	@ (8003f1c <_fstat_r+0x20>)
 8003f00:	2300      	movs	r3, #0
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	602b      	str	r3, [r5, #0]
 8003f0a:	f7fe ffb5 	bl	8002e78 <_fstat>
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	d102      	bne.n	8003f18 <_fstat_r+0x1c>
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	b103      	cbz	r3, 8003f18 <_fstat_r+0x1c>
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20001370 	.word	0x20001370

08003f20 <_isatty_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4d06      	ldr	r5, [pc, #24]	@ (8003f3c <_isatty_r+0x1c>)
 8003f24:	2300      	movs	r3, #0
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	f7fe ffb3 	bl	8002e96 <_isatty>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_isatty_r+0x1a>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_isatty_r+0x1a>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	20001370 	.word	0x20001370

08003f40 <_sbrk_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d06      	ldr	r5, [pc, #24]	@ (8003f5c <_sbrk_r+0x1c>)
 8003f44:	2300      	movs	r3, #0
 8003f46:	4604      	mov	r4, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	f7fe ffba 	bl	8002ec4 <_sbrk>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_sbrk_r+0x1a>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_sbrk_r+0x1a>
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	20001370 	.word	0x20001370

08003f60 <_realloc_r>:
 8003f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f64:	4607      	mov	r7, r0
 8003f66:	4614      	mov	r4, r2
 8003f68:	460d      	mov	r5, r1
 8003f6a:	b921      	cbnz	r1, 8003f76 <_realloc_r+0x16>
 8003f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f70:	4611      	mov	r1, r2
 8003f72:	f7ff bb2f 	b.w	80035d4 <_malloc_r>
 8003f76:	b92a      	cbnz	r2, 8003f84 <_realloc_r+0x24>
 8003f78:	f7ff fac0 	bl	80034fc <_free_r>
 8003f7c:	4625      	mov	r5, r4
 8003f7e:	4628      	mov	r0, r5
 8003f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f84:	f000 f81a 	bl	8003fbc <_malloc_usable_size_r>
 8003f88:	4284      	cmp	r4, r0
 8003f8a:	4606      	mov	r6, r0
 8003f8c:	d802      	bhi.n	8003f94 <_realloc_r+0x34>
 8003f8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f92:	d8f4      	bhi.n	8003f7e <_realloc_r+0x1e>
 8003f94:	4621      	mov	r1, r4
 8003f96:	4638      	mov	r0, r7
 8003f98:	f7ff fb1c 	bl	80035d4 <_malloc_r>
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	b908      	cbnz	r0, 8003fa4 <_realloc_r+0x44>
 8003fa0:	4645      	mov	r5, r8
 8003fa2:	e7ec      	b.n	8003f7e <_realloc_r+0x1e>
 8003fa4:	42b4      	cmp	r4, r6
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	bf28      	it	cs
 8003fac:	4632      	movcs	r2, r6
 8003fae:	f7ff fa96 	bl	80034de <memcpy>
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f7ff faa1 	bl	80034fc <_free_r>
 8003fba:	e7f1      	b.n	8003fa0 <_realloc_r+0x40>

08003fbc <_malloc_usable_size_r>:
 8003fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc0:	1f18      	subs	r0, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfbc      	itt	lt
 8003fc6:	580b      	ldrlt	r3, [r1, r0]
 8003fc8:	18c0      	addlt	r0, r0, r3
 8003fca:	4770      	bx	lr

08003fcc <_init>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr

08003fd8 <_fini>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	bf00      	nop
 8003fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fde:	bc08      	pop	{r3}
 8003fe0:	469e      	mov	lr, r3
 8003fe2:	4770      	bx	lr
