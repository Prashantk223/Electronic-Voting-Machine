
EVM_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ee4  08000ee4  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ee4  08000ee4  00002414  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000ee4  08000ee4  00001ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000eec  08000eec  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eec  08000eec  00001eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ef0  08000ef0  00001ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000414  20000000  08000ef4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002414  2**0
                  CONTENTS
 10 .bss          00000050  20000414  20000414  00002414  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  00002414  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020ef  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a45  00000000  00000000  0000452d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  00004f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c0  00000000  00000000  000051d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002407  00000000  00000000  00005398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000030fe  00000000  00000000  0000779f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a849  00000000  00000000  0000a89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000150e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007ec  00000000  00000000  0001512c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00015918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000414 	.word	0x20000414
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ecc 	.word	0x08000ecc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000418 	.word	0x20000418
 80001c4:	08000ecc 	.word	0x08000ecc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <EXTI0_IRQHandler>:
        //start debounce timer
    }
    return ret; 
}
void EXTI0_IRQHandler(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 80001dc:	2064      	movs	r0, #100	@ 0x64
 80001de:	f000 fb57 	bl	8000890 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 fa84 	bl	80006f0 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 80001e8:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <EXTI0_IRQHandler+0x20>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	0;
 80001ee:	4b02      	ldr	r3, [pc, #8]	@ (80001f8 <EXTI0_IRQHandler+0x20>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	705a      	strb	r2, [r3, #1]
}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000430 	.word	0x20000430

080001fc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 8000200:	2064      	movs	r0, #100	@ 0x64
 8000202:	f000 fb45 	bl	8000890 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 fa72 	bl	80006f0 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 800020c:	4b03      	ldr	r3, [pc, #12]	@ (800021c <EXTI1_IRQHandler+0x20>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	1;
 8000212:	4b02      	ldr	r3, [pc, #8]	@ (800021c <EXTI1_IRQHandler+0x20>)
 8000214:	2201      	movs	r2, #1
 8000216:	705a      	strb	r2, [r3, #1]
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000430 	.word	0x20000430

08000220 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 8000224:	2064      	movs	r0, #100	@ 0x64
 8000226:	f000 fb33 	bl	8000890 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_1);
 800022a:	2001      	movs	r0, #1
 800022c:	f000 fa60 	bl	80006f0 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 8000230:	4b03      	ldr	r3, [pc, #12]	@ (8000240 <EXTI2_IRQHandler+0x20>)
 8000232:	2201      	movs	r2, #1
 8000234:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	2;
 8000236:	4b02      	ldr	r3, [pc, #8]	@ (8000240 <EXTI2_IRQHandler+0x20>)
 8000238:	2202      	movs	r2, #2
 800023a:	705a      	strb	r2, [r3, #1]
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000430 	.word	0x20000430

08000244 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 8000248:	2064      	movs	r0, #100	@ 0x64
 800024a:	f000 fb21 	bl	8000890 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_2);
 800024e:	2002      	movs	r0, #2
 8000250:	f000 fa4e 	bl	80006f0 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 8000254:	4b03      	ldr	r3, [pc, #12]	@ (8000264 <EXTI3_IRQHandler+0x20>)
 8000256:	2201      	movs	r2, #1
 8000258:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	3;
 800025a:	4b02      	ldr	r3, [pc, #8]	@ (8000264 <EXTI3_IRQHandler+0x20>)
 800025c:	2203      	movs	r2, #3
 800025e:	705a      	strb	r2, [r3, #1]
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000430 	.word	0x20000430

08000268 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 800026c:	2064      	movs	r0, #100	@ 0x64
 800026e:	f000 fb0f 	bl	8000890 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_3);
 8000272:	2003      	movs	r0, #3
 8000274:	f000 fa3c 	bl	80006f0 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 8000278:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <EXTI4_IRQHandler+0x20>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	4;
 800027e:	4b02      	ldr	r3, [pc, #8]	@ (8000288 <EXTI4_IRQHandler+0x20>)
 8000280:	2204      	movs	r2, #4
 8000282:	705a      	strb	r2, [r3, #1]
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000430 	.word	0x20000430

0800028c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  //start debounce timer
	timer2_delay_ms(100);
 8000290:	2064      	movs	r0, #100	@ 0x64
 8000292:	f000 fafd 	bl	8000890 <timer2_delay_ms>
	GPIO_IRQHandling(GPIO_PIN_NO_1);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fa2a 	bl	80006f0 <GPIO_IRQHandling>
	Event_Key.Status = 	Event_Key_Pressed;
 800029c:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <EXTI9_5_IRQHandler+0x20>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
	Event_Key.Key_Index = 	5;
 80002a2:	4b02      	ldr	r3, [pc, #8]	@ (80002ac <EXTI9_5_IRQHandler+0x20>)
 80002a4:	2205      	movs	r2, #5
 80002a6:	705a      	strb	r2, [r3, #1]
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000430 	.word	0x20000430

080002b0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d161      	bne.n	8000386 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a32      	ldr	r2, [pc, #200]	@ (8000390 <GPIO_PeriClockControl+0xe0>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002ca:	4b32      	ldr	r3, [pc, #200]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a31      	ldr	r2, [pc, #196]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
        
	}

}
 80002d6:	e056      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOB)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a2f      	ldr	r2, [pc, #188]	@ (8000398 <GPIO_PeriClockControl+0xe8>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ec:	e04b      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOC)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a2a      	ldr	r2, [pc, #168]	@ (800039c <GPIO_PeriClockControl+0xec>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002f6:	4b27      	ldr	r3, [pc, #156]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fa:	4a26      	ldr	r2, [pc, #152]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000302:	e040      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOD)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a26      	ldr	r2, [pc, #152]	@ (80003a0 <GPIO_PeriClockControl+0xf0>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800030c:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a20      	ldr	r2, [pc, #128]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000318:	e035      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOE)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a21      	ldr	r2, [pc, #132]	@ (80003a4 <GPIO_PeriClockControl+0xf4>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000322:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000326:	4a1b      	ldr	r2, [pc, #108]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032e:	e02a      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOF)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a1d      	ldr	r2, [pc, #116]	@ (80003a8 <GPIO_PeriClockControl+0xf8>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000338:	4b16      	ldr	r3, [pc, #88]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033c:	4a15      	ldr	r2, [pc, #84]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000344:	e01f      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOG)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a18      	ldr	r2, [pc, #96]	@ (80003ac <GPIO_PeriClockControl+0xfc>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000352:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000358:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035a:	e014      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOH)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a14      	ldr	r2, [pc, #80]	@ (80003b0 <GPIO_PeriClockControl+0x100>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000364:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000368:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800036e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000370:	e009      	b.n	8000386 <GPIO_PeriClockControl+0xd6>
        else if (pGPIOx == GPIOI)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a0f      	ldr	r2, [pc, #60]	@ (80003b4 <GPIO_PeriClockControl+0x104>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d105      	bne.n	8000386 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <GPIO_PeriClockControl+0xe4>)
 8000380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000384:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff70 	bl	80002b0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	d820      	bhi.n	800041a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	461a      	mov	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	791b      	ldrb	r3, [r3, #4]
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	fa02 f303 	lsl.w	r3, r2, r3
 80003e8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	791b      	ldrb	r3, [r3, #4]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	2103      	movs	r1, #3
 80003f8:	fa01 f303 	lsl.w	r3, r1, r3
 80003fc:	43db      	mvns	r3, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	400a      	ands	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6819      	ldr	r1, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	430a      	orrs	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	e0cb      	b.n	80005b2 <GPIO_Init+0x1fa>

	}else
	{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	2b04      	cmp	r3, #4
 8000420:	d117      	bne.n	8000452 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000422:	4b4b      	ldr	r3, [pc, #300]	@ (8000550 <GPIO_Init+0x198>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	4611      	mov	r1, r2
 8000432:	4a47      	ldr	r2, [pc, #284]	@ (8000550 <GPIO_Init+0x198>)
 8000434:	430b      	orrs	r3, r1
 8000436:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	4b45      	ldr	r3, [pc, #276]	@ (8000550 <GPIO_Init+0x198>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	43d2      	mvns	r2, r2
 8000448:	4611      	mov	r1, r2
 800044a:	4a41      	ldr	r2, [pc, #260]	@ (8000550 <GPIO_Init+0x198>)
 800044c:	400b      	ands	r3, r1
 800044e:	6093      	str	r3, [r2, #8]
 8000450:	e035      	b.n	80004be <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	795b      	ldrb	r3, [r3, #5]
 8000456:	2b05      	cmp	r3, #5
 8000458:	d117      	bne.n	800048a <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045a:	4b3d      	ldr	r3, [pc, #244]	@ (8000550 <GPIO_Init+0x198>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	7912      	ldrb	r2, [r2, #4]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	4611      	mov	r1, r2
 800046a:	4a39      	ldr	r2, [pc, #228]	@ (8000550 <GPIO_Init+0x198>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000470:	4b37      	ldr	r3, [pc, #220]	@ (8000550 <GPIO_Init+0x198>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	7912      	ldrb	r2, [r2, #4]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	43d2      	mvns	r2, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a33      	ldr	r2, [pc, #204]	@ (8000550 <GPIO_Init+0x198>)
 8000484:	400b      	ands	r3, r1
 8000486:	60d3      	str	r3, [r2, #12]
 8000488:	e019      	b.n	80004be <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	795b      	ldrb	r3, [r3, #5]
 800048e:	2b06      	cmp	r3, #6
 8000490:	d115      	bne.n	80004be <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000492:	4b2f      	ldr	r3, [pc, #188]	@ (8000550 <GPIO_Init+0x198>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7912      	ldrb	r2, [r2, #4]
 800049a:	4611      	mov	r1, r2
 800049c:	2201      	movs	r2, #1
 800049e:	408a      	lsls	r2, r1
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000550 <GPIO_Init+0x198>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <GPIO_Init+0x198>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a25      	ldr	r2, [pc, #148]	@ (8000550 <GPIO_Init+0x198>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	089b      	lsrs	r3, r3, #2
 80004c4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	791b      	ldrb	r3, [r3, #4]
 80004ca:	f003 0303 	and.w	r3, r3, #3
 80004ce:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000554 <GPIO_Init+0x19c>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d04e      	beq.n	8000578 <GPIO_Init+0x1c0>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1e      	ldr	r2, [pc, #120]	@ (8000558 <GPIO_Init+0x1a0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d032      	beq.n	800054a <GPIO_Init+0x192>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1c      	ldr	r2, [pc, #112]	@ (800055c <GPIO_Init+0x1a4>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d02b      	beq.n	8000546 <GPIO_Init+0x18e>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <GPIO_Init+0x1a8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d024      	beq.n	8000542 <GPIO_Init+0x18a>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a19      	ldr	r2, [pc, #100]	@ (8000564 <GPIO_Init+0x1ac>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d01d      	beq.n	800053e <GPIO_Init+0x186>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a18      	ldr	r2, [pc, #96]	@ (8000568 <GPIO_Init+0x1b0>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d016      	beq.n	800053a <GPIO_Init+0x182>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a16      	ldr	r2, [pc, #88]	@ (800056c <GPIO_Init+0x1b4>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d00f      	beq.n	8000536 <GPIO_Init+0x17e>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <GPIO_Init+0x1b8>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d008      	beq.n	8000532 <GPIO_Init+0x17a>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a13      	ldr	r2, [pc, #76]	@ (8000574 <GPIO_Init+0x1bc>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d101      	bne.n	800052e <GPIO_Init+0x176>
 800052a:	2308      	movs	r3, #8
 800052c:	e025      	b.n	800057a <GPIO_Init+0x1c2>
 800052e:	2300      	movs	r3, #0
 8000530:	e023      	b.n	800057a <GPIO_Init+0x1c2>
 8000532:	2307      	movs	r3, #7
 8000534:	e021      	b.n	800057a <GPIO_Init+0x1c2>
 8000536:	2306      	movs	r3, #6
 8000538:	e01f      	b.n	800057a <GPIO_Init+0x1c2>
 800053a:	2305      	movs	r3, #5
 800053c:	e01d      	b.n	800057a <GPIO_Init+0x1c2>
 800053e:	2304      	movs	r3, #4
 8000540:	e01b      	b.n	800057a <GPIO_Init+0x1c2>
 8000542:	2303      	movs	r3, #3
 8000544:	e019      	b.n	800057a <GPIO_Init+0x1c2>
 8000546:	2302      	movs	r3, #2
 8000548:	e017      	b.n	800057a <GPIO_Init+0x1c2>
 800054a:	2301      	movs	r3, #1
 800054c:	e015      	b.n	800057a <GPIO_Init+0x1c2>
 800054e:	bf00      	nop
 8000550:	40013c00 	.word	0x40013c00
 8000554:	40020000 	.word	0x40020000
 8000558:	40020400 	.word	0x40020400
 800055c:	40020800 	.word	0x40020800
 8000560:	40020c00 	.word	0x40020c00
 8000564:	40021000 	.word	0x40021000
 8000568:	40021400 	.word	0x40021400
 800056c:	40021800 	.word	0x40021800
 8000570:	40021c00 	.word	0x40021c00
 8000574:	40022000 	.word	0x40022000
 8000578:	2300      	movs	r3, #0
 800057a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800057c:	4b59      	ldr	r3, [pc, #356]	@ (80006e4 <GPIO_Init+0x32c>)
 800057e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000580:	4a58      	ldr	r2, [pc, #352]	@ (80006e4 <GPIO_Init+0x32c>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000586:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000588:	7c7a      	ldrb	r2, [r7, #17]
 800058a:	7cbb      	ldrb	r3, [r7, #18]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	fa02 f103 	lsl.w	r1, r2, r3
 8000592:	4a55      	ldr	r2, [pc, #340]	@ (80006e8 <GPIO_Init+0x330>)
 8000594:	7cfb      	ldrb	r3, [r7, #19]
 8000596:	3302      	adds	r3, #2
 8000598:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800059c:	4b53      	ldr	r3, [pc, #332]	@ (80006ec <GPIO_Init+0x334>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a4f      	ldr	r2, [pc, #316]	@ (80006ec <GPIO_Init+0x334>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	799b      	ldrb	r3, [r3, #6]
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689a      	ldr	r2, [r3, #8]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	2103      	movs	r1, #3
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	400a      	ands	r2, r1
 80005e0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6899      	ldr	r1, [r3, #8]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	79db      	ldrb	r3, [r3, #7]
 80005f6:	461a      	mov	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	68da      	ldr	r2, [r3, #12]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	2103      	movs	r1, #3
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	400a      	ands	r2, r1
 8000620:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68d9      	ldr	r1, [r3, #12]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	430a      	orrs	r2, r1
 8000630:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7a1b      	ldrb	r3, [r3, #8]
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	4619      	mov	r1, r3
 800064e:	2301      	movs	r3, #1
 8000650:	408b      	lsls	r3, r1
 8000652:	43db      	mvns	r3, r3
 8000654:	4619      	mov	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	400a      	ands	r2, r1
 800065c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6859      	ldr	r1, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	430a      	orrs	r2, r1
 800066c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality if necessary
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	795b      	ldrb	r3, [r3, #5]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d131      	bne.n	80006da <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	08db      	lsrs	r3, r3, #3
 800067c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	7c3a      	ldrb	r2, [r7, #16]
 800068e:	3208      	adds	r2, #8
 8000690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	220f      	movs	r2, #15
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	43db      	mvns	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	7c3a      	ldrb	r2, [r7, #16]
 80006a8:	4001      	ands	r1, r0
 80006aa:	3208      	adds	r2, #8
 80006ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	7c3a      	ldrb	r2, [r7, #16]
 80006b6:	3208      	adds	r2, #8
 80006b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7a5b      	ldrb	r3, [r3, #9]
 80006c0:	461a      	mov	r2, r3
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	7c3a      	ldrb	r2, [r7, #16]
 80006d2:	4301      	orrs	r1, r0
 80006d4:	3208      	adds	r2, #8
 80006d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40013800 	.word	0x40013800
 80006ec:	40013c00 	.word	0x40013c00

080006f0 <GPIO_IRQHandling>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

void GPIO_IRQHandling(uint8_t PinNumber)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber))
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <GPIO_IRQHandling+0x3c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	79fa      	ldrb	r2, [r7, #7]
 8000700:	2101      	movs	r1, #1
 8000702:	fa01 f202 	lsl.w	r2, r1, r2
 8000706:	4013      	ands	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	d009      	beq.n	8000720 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <GPIO_IRQHandling+0x3c>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f202 	lsl.w	r2, r1, r2
 8000718:	4611      	mov	r1, r2
 800071a:	4a04      	ldr	r2, [pc, #16]	@ (800072c <GPIO_IRQHandling+0x3c>)
 800071c:	430b      	orrs	r3, r1
 800071e:	6153      	str	r3, [r2, #20]
	}

}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40013c00 	.word	0x40013c00

08000730 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000736:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <RCC_GetPCLK1Value+0x9c>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	089b      	lsrs	r3, r3, #2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 0303 	and.w	r3, r3, #3
 8000742:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000744:	7a7b      	ldrb	r3, [r7, #9]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d102      	bne.n	8000750 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <RCC_GetPCLK1Value+0xa0>)
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	e00b      	b.n	8000768 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000750:	7a7b      	ldrb	r3, [r7, #9]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d102      	bne.n	800075c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000756:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <RCC_GetPCLK1Value+0xa4>)
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e005      	b.n	8000768 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 800075c:	7a7b      	ldrb	r3, [r7, #9]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d102      	bne.n	8000768 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000762:	f000 f88d 	bl	8000880 <RCC_GetPLLOutputClock>
 8000766:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <RCC_GetPCLK1Value+0x9c>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	091b      	lsrs	r3, r3, #4
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 030f 	and.w	r3, r3, #15
 8000774:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000776:	7a3b      	ldrb	r3, [r7, #8]
 8000778:	2b07      	cmp	r3, #7
 800077a:	d802      	bhi.n	8000782 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	72fb      	strb	r3, [r7, #11]
 8000780:	e005      	b.n	800078e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000782:	7a3b      	ldrb	r3, [r7, #8]
 8000784:	3b08      	subs	r3, #8
 8000786:	4a14      	ldr	r2, [pc, #80]	@ (80007d8 <RCC_GetPCLK1Value+0xa8>)
 8000788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078c:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <RCC_GetPCLK1Value+0x9c>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	0a9b      	lsrs	r3, r3, #10
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 800079c:	7a3b      	ldrb	r3, [r7, #8]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d802      	bhi.n	80007a8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	72bb      	strb	r3, [r7, #10]
 80007a6:	e004      	b.n	80007b2 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80007a8:	7a3b      	ldrb	r3, [r7, #8]
 80007aa:	3b04      	subs	r3, #4
 80007ac:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <RCC_GetPCLK1Value+0xac>)
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80007b2:	7afb      	ldrb	r3, [r7, #11]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80007ba:	7abb      	ldrb	r3, [r7, #10]
 80007bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c0:	607b      	str	r3, [r7, #4]

	return pclk1;
 80007c2:	687b      	ldr	r3, [r7, #4]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	00f42400 	.word	0x00f42400
 80007d4:	007a1200 	.word	0x007a1200
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000010 	.word	0x20000010

080007e0 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <RCC_GetPCLK2Value+0x8c>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80007f8:	7a7b      	ldrb	r3, [r7, #9]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <RCC_GetPCLK2Value+0x90>)
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e001      	b.n	8000808 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <RCC_GetPCLK2Value+0x94>)
 8000806:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <RCC_GetPCLK2Value+0x8c>)
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	091b      	lsrs	r3, r3, #4
 800080e:	f003 030f 	and.w	r3, r3, #15
 8000812:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b07      	cmp	r3, #7
 8000818:	d802      	bhi.n	8000820 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	72fb      	strb	r3, [r7, #11]
 800081e:	e005      	b.n	800082c <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b08      	subs	r3, #8
 8000824:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <RCC_GetPCLK2Value+0x98>)
 8000826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800082a:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <RCC_GetPCLK2Value+0x8c>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	0b5b      	lsrs	r3, r3, #13
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d802      	bhi.n	8000844 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	72bb      	strb	r3, [r7, #10]
 8000842:	e004      	b.n	800084e <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b04      	subs	r3, #4
 8000848:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <RCC_GetPCLK2Value+0x9c>)
 800084a:	5cd3      	ldrb	r3, [r2, r3]
 800084c:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 800084e:	7afb      	ldrb	r3, [r7, #11]
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	fbb2 f2f3 	udiv	r2, r2, r3
 8000856:	7abb      	ldrb	r3, [r7, #10]
 8000858:	fbb2 f3f3 	udiv	r3, r2, r3
 800085c:	603b      	str	r3, [r7, #0]

	return pclk2;
 800085e:	683b      	ldr	r3, [r7, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	00f42400 	.word	0x00f42400
 8000874:	007a1200 	.word	0x007a1200
 8000878:	20000000 	.word	0x20000000
 800087c:	20000010 	.word	0x20000010

08000880 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
	...

08000890 <timer2_delay_ms>:
    NVIC_EnableIRQ(TIM2_IRQn);
}


void timer2_delay_ms(uint32_t ms)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    delay_counter = ms;
 8000898:	4a09      	ldr	r2, [pc, #36]	@ (80008c0 <timer2_delay_ms+0x30>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]

    // Start the timer
    TIM2->CNT = 0;
 800089e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->CR1 |= TIM_CR1_CEN;
 80008a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6013      	str	r3, [r2, #0]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	20000434 	.word	0x20000434

080008c4 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    TIM2_IRQHandler_Handler();
 80008c8:	f000 f802 	bl	80008d0 <TIM2_IRQHandler_Handler>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <TIM2_IRQHandler_Handler>:
uint8_t delay_done;
void TIM2_IRQHandler_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 80008d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d01f      	beq.n	8000922 <TIM2_IRQHandler_Handler+0x52>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 80008e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	6113      	str	r3, [r2, #16]

        if (delay_counter > 0)
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <TIM2_IRQHandler_Handler+0x5c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d013      	beq.n	8000922 <TIM2_IRQHandler_Handler+0x52>
        {
            delay_counter--;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <TIM2_IRQHandler_Handler+0x5c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <TIM2_IRQHandler_Handler+0x5c>)
 8000902:	6013      	str	r3, [r2, #0]

            if (delay_counter == 0)
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <TIM2_IRQHandler_Handler+0x5c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d10a      	bne.n	8000922 <TIM2_IRQHandler_Handler+0x52>
            {
                TIM2->CR1 &= ~TIM_CR1_CEN;
 800090c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000916:	f023 0301 	bic.w	r3, r3, #1
 800091a:	6013      	str	r3, [r2, #0]
                delay_done = 1; // Signal that delay is over
 800091c:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <TIM2_IRQHandler_Handler+0x60>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000434 	.word	0x20000434
 8000930:	2000043c 	.word	0x2000043c

08000934 <TIM3_IRQHandler>:
{
    return os_tick_count;
}

void TIM3_IRQHandler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF)
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <TIM3_IRQHandler+0x30>)
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00a      	beq.n	800095a <TIM3_IRQHandler+0x26>
    {
        TIM3->SR &= ~TIM_SR_UIF;  // Clear the interrupt flag
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <TIM3_IRQHandler+0x30>)
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <TIM3_IRQHandler+0x30>)
 800094a:	f023 0301 	bic.w	r3, r3, #1
 800094e:	6113      	str	r3, [r2, #16]
        os_tick_count++;          // Increment OS tick
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <TIM3_IRQHandler+0x34>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <TIM3_IRQHandler+0x34>)
 8000958:	6013      	str	r3, [r2, #0]
    }
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40000400 	.word	0x40000400
 8000968:	20000438 	.word	0x20000438

0800096c <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a31      	ldr	r2, [pc, #196]	@ (8000a44 <USART_SetBaudRate+0xd8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d003      	beq.n	800098a <USART_SetBaudRate+0x1e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a30      	ldr	r2, [pc, #192]	@ (8000a48 <USART_SetBaudRate+0xdc>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d103      	bne.n	8000992 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 800098a:	f7ff ff29 	bl	80007e0 <RCC_GetPCLK2Value>
 800098e:	61f8      	str	r0, [r7, #28]
 8000990:	e002      	b.n	8000998 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000992:	f7ff fecd 	bl	8000730 <RCC_GetPCLK1Value>
 8000996:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d00b      	beq.n	80009bc <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80009a4:	69fa      	ldr	r2, [r7, #28]
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	009a      	lsls	r2, r3, #2
 80009ae:	441a      	add	r2, r3
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	e00a      	b.n	80009d2 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 80009bc:	69fa      	ldr	r2, [r7, #28]
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	009a      	lsls	r2, r3, #2
 80009c6:	441a      	add	r2, r3
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d0:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <USART_SetBaudRate+0xe0>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2264      	movs	r2, #100	@ 0x64
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00a      	beq.n	8000a18 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	3332      	adds	r3, #50	@ 0x32
 8000a08:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <USART_SetBaudRate+0xe0>)
 8000a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0e:	095b      	lsrs	r3, r3, #5
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	011b      	lsls	r3, r3, #4
 8000a1c:	3332      	adds	r3, #50	@ 0x32
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <USART_SetBaudRate+0xe0>)
 8000a20:	fba2 2303 	umull	r2, r3, r2, r3
 8000a24:	095b      	lsrs	r3, r3, #5
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	609a      	str	r2, [r3, #8]
}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40011000 	.word	0x40011000
 8000a48:	40011400 	.word	0x40011400
 8000a4c:	51eb851f 	.word	0x51eb851f

08000a50 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f890 	bl	8000b88 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d104      	bne.n	8000a7a <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e010      	b.n	8000a9c <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e007      	b.n	8000a9c <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d103      	bne.n	8000a9c <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f043 030c 	orr.w	r3, r3, #12
 8000a9a:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7b5b      	ldrb	r3, [r3, #13]
 8000aa0:	031b      	lsls	r3, r3, #12
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7b9b      	ldrb	r3, [r3, #14]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d104      	bne.n	8000aba <USART_Init+0x6a>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e00b      	b.n	8000ad2 <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7b9b      	ldrb	r3, [r3, #14]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d107      	bne.n	8000ad2 <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ac8:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad0:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7b1b      	ldrb	r3, [r3, #12]
 8000ae2:	031b      	lsls	r3, r3, #12
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7bdb      	ldrb	r3, [r3, #15]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d104      	bne.n	8000b08 <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e014      	b.n	8000b32 <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7bdb      	ldrb	r3, [r3, #15]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d104      	bne.n	8000b1a <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e00b      	b.n	8000b32 <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7bdb      	ldrb	r3, [r3, #15]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d107      	bne.n	8000b32 <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b28:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b30:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	4619      	mov	r1, r3
 8000b44:	4610      	mov	r0, r2
 8000b46:	f7ff ff11 	bl	800096c <USART_SetBaudRate>

}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d106      	bne.n	8000b72 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000b70:	e005      	b.n	8000b7e <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60da      	str	r2, [r3, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d12a      	bne.n	8000bf0 <USART_PeriClockControl+0x68>
	{
		if(pUSARTx == USART1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <USART_PeriClockControl+0x74>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d106      	bne.n	8000bb0 <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 8000ba2:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <USART_PeriClockControl+0x78>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a16      	ldr	r2, [pc, #88]	@ (8000c00 <USART_PeriClockControl+0x78>)
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
	else
	{
		//TODO
	}

}
 8000bae:	e01f      	b.n	8000bf0 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <USART_PeriClockControl+0x7c>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d106      	bne.n	8000bc6 <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <USART_PeriClockControl+0x78>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	4a10      	ldr	r2, [pc, #64]	@ (8000c00 <USART_PeriClockControl+0x78>)
 8000bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bc4:	e014      	b.n	8000bf0 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART3)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c08 <USART_PeriClockControl+0x80>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d106      	bne.n	8000bdc <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <USART_PeriClockControl+0x78>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <USART_PeriClockControl+0x78>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bda:	e009      	b.n	8000bf0 <USART_PeriClockControl+0x68>
		else if (pUSARTx == UART4)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <USART_PeriClockControl+0x84>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d105      	bne.n	8000bf0 <USART_PeriClockControl+0x68>
			UART4_PCCK_EN();
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <USART_PeriClockControl+0x78>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <USART_PeriClockControl+0x78>)
 8000bea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40011000 	.word	0x40011000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40004400 	.word	0x40004400
 8000c08:	40004800 	.word	0x40004800
 8000c0c:	40004c00 	.word	0x40004c00

08000c10 <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	4013      	ands	r3, r2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e031      	b.n	8000cae <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000c4a:	bf00      	nop
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2180      	movs	r1, #128	@ 0x80
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffdc 	bl	8000c10 <USART_GetFlagStatus>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f6      	beq.n	8000c4c <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	7b5b      	ldrb	r3, [r3, #13]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d118      	bne.n	8000c98 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c78:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	7b9b      	ldrb	r3, [r3, #14]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d106      	bne.n	8000c90 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	e00b      	b.n	8000ca8 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	e007      	b.n	8000ca8 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d3c9      	bcc.n	8000c4a <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000cb6:	bf00      	nop
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2140      	movs	r1, #64	@ 0x40
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffa6 	bl	8000c10 <USART_GetFlagStatus>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f6      	beq.n	8000cb8 <USART_SendData+0x80>
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;
extern uint8_t delay_done ;
void USART2_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <USART2_Init+0x3c>)
 8000cda:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <USART2_Init+0x40>)
 8000cdc:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <USART2_Init+0x3c>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce4:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <USART2_Init+0x3c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <USART2_Init+0x3c>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <USART2_Init+0x3c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <USART2_Init+0x3c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <USART2_Init+0x3c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <USART2_Init+0x3c>)
 8000d06:	f7ff fea3 	bl	8000a50 <USART_Init>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000440 	.word	0x20000440
 8000d14:	40004400 	.word	0x40004400

08000d18 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <USART2_GPIOInit+0x40>)
 8000d20:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d22:	2302      	movs	r3, #2
 8000d24:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d26:	2300      	movs	r3, #0
 8000d28:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000d32:	2307      	movs	r3, #7
 8000d34:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fb3b 	bl	80003b8 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000d42:	2303      	movs	r3, #3
 8000d44:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fb35 	bl	80003b8 <GPIO_Init>


}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40020000 	.word	0x40020000

08000d5c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <GPIO_ButtonInit+0x54>)
 8000d64:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000d72:	2300      	movs	r3, #0
 8000d74:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fb1c 	bl	80003b8 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <GPIO_ButtonInit+0x58>)
 8000d82:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000d84:	230c      	movs	r3, #12
 8000d86:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000d90:	2301      	movs	r3, #1
 8000d92:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000d94:	2300      	movs	r3, #0
 8000d96:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <GPIO_ButtonInit+0x58>)
 8000d9c:	f7ff fa88 	bl	80002b0 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000da0:	463b      	mov	r3, r7
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fb08 	bl	80003b8 <GPIO_Init>

}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020c00 	.word	0x40020c00

08000db8 <delay>:

void delay(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	e002      	b.n	8000dca <delay+0x12>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <delay+0x28>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d9f8      	bls.n	8000dc4 <delay+0xc>
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	0003d08f 	.word	0x0003d08f

08000de4 <main>:


int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000de8:	f7ff ffb8 	bl	8000d5c <GPIO_ButtonInit>

	USART2_GPIOInit();
 8000dec:	f7ff ff94 	bl	8000d18 <USART2_GPIOInit>

    USART2_Init();
 8000df0:	f7ff ff70 	bl	8000cd4 <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 8000df4:	2101      	movs	r1, #1
 8000df6:	480a      	ldr	r0, [pc, #40]	@ (8000e20 <main+0x3c>)
 8000df8:	f7ff feab 	bl	8000b52 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! delay_done );
 8000dfc:	bf00      	nop
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <main+0x40>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0fb      	beq.n	8000dfe <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000e06:	f7ff ffd7 	bl	8000db8 <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000e0a:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <main+0x44>)
 8000e0c:	f7ff f9dc 	bl	80001c8 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4904      	ldr	r1, [pc, #16]	@ (8000e28 <main+0x44>)
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <main+0x48>)
 8000e18:	f7ff ff0e 	bl	8000c38 <USART_SendData>
		while( ! delay_done );
 8000e1c:	e7ee      	b.n	8000dfc <main+0x18>
 8000e1e:	bf00      	nop
 8000e20:	40004400 	.word	0x40004400
 8000e24:	2000043c 	.word	0x2000043c
 8000e28:	20000014 	.word	0x20000014
 8000e2c:	20000440 	.word	0x20000440

08000e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f000 f811 	bl	8000e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff ffbf 	bl	8000de4 <main>

08000e66 <LoopForever>:

LoopForever:
  b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8000e74:	08000ef4 	.word	0x08000ef4
  ldr r2, =_sbss
 8000e78:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000e7c:	20000464 	.word	0x20000464

08000e80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <__libc_init_array>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	4d0d      	ldr	r5, [pc, #52]	@ (8000ebc <__libc_init_array+0x38>)
 8000e88:	4c0d      	ldr	r4, [pc, #52]	@ (8000ec0 <__libc_init_array+0x3c>)
 8000e8a:	1b64      	subs	r4, r4, r5
 8000e8c:	10a4      	asrs	r4, r4, #2
 8000e8e:	2600      	movs	r6, #0
 8000e90:	42a6      	cmp	r6, r4
 8000e92:	d109      	bne.n	8000ea8 <__libc_init_array+0x24>
 8000e94:	4d0b      	ldr	r5, [pc, #44]	@ (8000ec4 <__libc_init_array+0x40>)
 8000e96:	4c0c      	ldr	r4, [pc, #48]	@ (8000ec8 <__libc_init_array+0x44>)
 8000e98:	f000 f818 	bl	8000ecc <_init>
 8000e9c:	1b64      	subs	r4, r4, r5
 8000e9e:	10a4      	asrs	r4, r4, #2
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	42a6      	cmp	r6, r4
 8000ea4:	d105      	bne.n	8000eb2 <__libc_init_array+0x2e>
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
 8000ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eac:	4798      	blx	r3
 8000eae:	3601      	adds	r6, #1
 8000eb0:	e7ee      	b.n	8000e90 <__libc_init_array+0xc>
 8000eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb6:	4798      	blx	r3
 8000eb8:	3601      	adds	r6, #1
 8000eba:	e7f2      	b.n	8000ea2 <__libc_init_array+0x1e>
 8000ebc:	08000eec 	.word	0x08000eec
 8000ec0:	08000eec 	.word	0x08000eec
 8000ec4:	08000eec 	.word	0x08000eec
 8000ec8:	08000ef0 	.word	0x08000ef0

08000ecc <_init>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	bf00      	nop
 8000ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed2:	bc08      	pop	{r3}
 8000ed4:	469e      	mov	lr, r3
 8000ed6:	4770      	bx	lr

08000ed8 <_fini>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr
